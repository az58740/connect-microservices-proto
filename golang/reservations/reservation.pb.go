// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: reservations/reservation.proto

package reservations

import (
	users "github.com/az58740/connect-microservices-proto/golang/users"
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// نوع مالک تایم‌اسلات — تعیین می‌کند که تایم‌اسلات متعلق به فرد است یا فضای مشترک
// TimeSlot owner type — defines whether it's owned by an individual (e.g., doctor) or shared (e.g., room)
type OwnerType int32

const (
	OwnerType_INDIVIDUAL OwnerType = 0 // شخصی (مانند پزشک یا آرایشگر) | Individual (like doctor, hairdresser)
	OwnerType_SHARED     OwnerType = 1 // اشتراکی (مانند میز یا سالن) | Shared (like room or hall)
)

// Enum value maps for OwnerType.
var (
	OwnerType_name = map[int32]string{
		0: "INDIVIDUAL",
		1: "SHARED",
	}
	OwnerType_value = map[string]int32{
		"INDIVIDUAL": 0,
		"SHARED":     1,
	}
)

func (x OwnerType) Enum() *OwnerType {
	p := new(OwnerType)
	*p = x
	return p
}

func (x OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[0].Descriptor()
}

func (OwnerType) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[0]
}

func (x OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerType.Descriptor instead.
func (OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{0}
}

// وضعیت رزرو | Reservation status
type ReservationStatus int32

const (
	ReservationStatus_PENDING   ReservationStatus = 0 // در انتظار تأیید | Waiting for confirmation
	ReservationStatus_CONFIRMED ReservationStatus = 1 // تأیید شده | Confirmed
	ReservationStatus_CANCELLED ReservationStatus = 2 // لغو شده | Cancelled
	ReservationStatus_COMPLETED ReservationStatus = 3 // انجام شده | Completed
)

// Enum value maps for ReservationStatus.
var (
	ReservationStatus_name = map[int32]string{
		0: "PENDING",
		1: "CONFIRMED",
		2: "CANCELLED",
		3: "COMPLETED",
	}
	ReservationStatus_value = map[string]int32{
		"PENDING":   0,
		"CONFIRMED": 1,
		"CANCELLED": 2,
		"COMPLETED": 3,
	}
)

func (x ReservationStatus) Enum() *ReservationStatus {
	p := new(ReservationStatus)
	*p = x
	return p
}

func (x ReservationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[1].Descriptor()
}

func (ReservationStatus) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[1]
}

func (x ReservationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationStatus.Descriptor instead.
func (ReservationStatus) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{1}
}

// روزهای هفته | Days of the week
type WeekDay int32

const (
	WeekDay_SATURDAY  WeekDay = 0 // شنبه | Saturday
	WeekDay_SUNDAY    WeekDay = 1 // یکشنبه | Sunday
	WeekDay_MONDAY    WeekDay = 2 // دوشنبه | Monday
	WeekDay_TUESDAY   WeekDay = 3 // سه‌شنبه | Tuesday
	WeekDay_WEDNESDAY WeekDay = 4 // چهارشنبه | Wednesday
	WeekDay_THURSDAY  WeekDay = 5 // پنج‌شنبه | Thursday
	WeekDay_FRIDAY    WeekDay = 6 // جمعه | Friday
)

// Enum value maps for WeekDay.
var (
	WeekDay_name = map[int32]string{
		0: "SATURDAY",
		1: "SUNDAY",
		2: "MONDAY",
		3: "TUESDAY",
		4: "WEDNESDAY",
		5: "THURSDAY",
		6: "FRIDAY",
	}
	WeekDay_value = map[string]int32{
		"SATURDAY":  0,
		"SUNDAY":    1,
		"MONDAY":    2,
		"TUESDAY":   3,
		"WEDNESDAY": 4,
		"THURSDAY":  5,
		"FRIDAY":    6,
	}
)

func (x WeekDay) Enum() *WeekDay {
	p := new(WeekDay)
	*p = x
	return p
}

func (x WeekDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeekDay) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[2].Descriptor()
}

func (WeekDay) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[2]
}

func (x WeekDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeekDay.Descriptor instead.
func (WeekDay) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{2}
}

// وضعیت حضور | Attendance status
type AttendanceStatus int32

const (
	AttendanceStatus_UNKNOWN_Status AttendanceStatus = 0 // نامشخص | Unknown
	AttendanceStatus_ATTENDED       AttendanceStatus = 1 // حضور داشته | Attended
	AttendanceStatus_NO_SHOW        AttendanceStatus = 2 // عدم حضور | No-show
)

// Enum value maps for AttendanceStatus.
var (
	AttendanceStatus_name = map[int32]string{
		0: "UNKNOWN_Status",
		1: "ATTENDED",
		2: "NO_SHOW",
	}
	AttendanceStatus_value = map[string]int32{
		"UNKNOWN_Status": 0,
		"ATTENDED":       1,
		"NO_SHOW":        2,
	}
)

func (x AttendanceStatus) Enum() *AttendanceStatus {
	p := new(AttendanceStatus)
	*p = x
	return p
}

func (x AttendanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttendanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[3].Descriptor()
}

func (AttendanceStatus) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[3]
}

func (x AttendanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttendanceStatus.Descriptor instead.
func (AttendanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{3}
}

type FacilityGroup int32

const (
	FacilityGroup_UNKNOWN_GROUP FacilityGroup = 0
	// 1. خدمات پزشکی و درمانی
	FacilityGroup_MEDICAL_SERVICES FacilityGroup = 1 // شامل: بیمارستان، کلینیک، داروخانه، آزمایشگاه
	// 2. سالن‌های آرایشی و زیبایی
	FacilityGroup_BEAUTY_SALONS FacilityGroup = 2 // شامل: سالن زیبایی، آرایشگاه، اسپا، ...
	// 3. سالن‌های ورزشی و تناسب اندام
	FacilityGroup_SPORTS_CLUBS FacilityGroup = 3 // شامل: باشگاه بدنسازی، یوگا، استخر و ...
	// 4. فروشگاه‌ها (خرده‌فروشی)
	FacilityGroup_RETAIL_STORES FacilityGroup = 4 // شامل: خواربارفروشی، لوازم الکترونیکی، پوشاک، حیوانات خانگی
	// 5. مراکز خرید (مرکزی، عمده و چند منظوره)
	FacilityGroup_SHOPPING_CENTERS FacilityGroup = 5 // شامل: مراکز خرید (مول)، هایپرمارکت، مرکز خرید عمده
	// 6. سرگرمی
	FacilityGroup_ENTERTAINMENT FacilityGroup = 6 // شامل: سینما، گیم‌نت، مرکز بازی
	// 7. مراکز اقامتی
	FacilityGroup_ACCOMMODATION FacilityGroup = 7 // شامل: هتل، متل، هاستل، مهمان‌سرایی
	// 8. غذا و نوشیدنی
	FacilityGroup_FOOD_AND_BEVERAGE FacilityGroup = 8 // شامل: رستوران، کافی‌شاپ، فست‌فود
	// 9. مراکز آموزشی
	FacilityGroup_EDUCATIONAL_CENTERS FacilityGroup = 9 // شامل: آموزشگاه، مدرسه، کلاس خصوصی
	// 10. خدمات حرفه‌ای و حقوقی
	FacilityGroup_PROFESSIONAL_SERVICES FacilityGroup = 10 // شامل: وکالت، مشاوره، حسابداری، املاک
	// 11. صنعت و تولید
	FacilityGroup_INDUSTRIAL_FACILITIES FacilityGroup = 11 // شامل: کارخانه، انبار، لجستیک
	// 12. فعالیت‌های آنلاین
	FacilityGroup_ONLINE_BUSINESSES FacilityGroup = 12 // شامل: فروشگاه اینترنتی، فریلنسرها
)

// Enum value maps for FacilityGroup.
var (
	FacilityGroup_name = map[int32]string{
		0:  "UNKNOWN_GROUP",
		1:  "MEDICAL_SERVICES",
		2:  "BEAUTY_SALONS",
		3:  "SPORTS_CLUBS",
		4:  "RETAIL_STORES",
		5:  "SHOPPING_CENTERS",
		6:  "ENTERTAINMENT",
		7:  "ACCOMMODATION",
		8:  "FOOD_AND_BEVERAGE",
		9:  "EDUCATIONAL_CENTERS",
		10: "PROFESSIONAL_SERVICES",
		11: "INDUSTRIAL_FACILITIES",
		12: "ONLINE_BUSINESSES",
	}
	FacilityGroup_value = map[string]int32{
		"UNKNOWN_GROUP":         0,
		"MEDICAL_SERVICES":      1,
		"BEAUTY_SALONS":         2,
		"SPORTS_CLUBS":          3,
		"RETAIL_STORES":         4,
		"SHOPPING_CENTERS":      5,
		"ENTERTAINMENT":         6,
		"ACCOMMODATION":         7,
		"FOOD_AND_BEVERAGE":     8,
		"EDUCATIONAL_CENTERS":   9,
		"PROFESSIONAL_SERVICES": 10,
		"INDUSTRIAL_FACILITIES": 11,
		"ONLINE_BUSINESSES":     12,
	}
)

func (x FacilityGroup) Enum() *FacilityGroup {
	p := new(FacilityGroup)
	*p = x
	return p
}

func (x FacilityGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacilityGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[4].Descriptor()
}

func (FacilityGroup) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[4]
}

func (x FacilityGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacilityGroup.Descriptor instead.
func (FacilityGroup) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{4}
}

// عنوان یا نوع کسب‌وکار، مرکز، یا شغل | Business type, workplace, or job title
type FacilityTitle int32

const (
	FacilityTitle_UNKNOWN FacilityTitle = 0 // نامشخص | Unknown
	// گروه: MEDICAL_SERVICES — خدمات پزشکی و درمانی
	FacilityTitle_CLINIC               FacilityTitle = 1 // کلینیک | Clinic
	FacilityTitle_HOSPITAL             FacilityTitle = 2 // بیمارستان | Hospital
	FacilityTitle_LABORATORY           FacilityTitle = 3 // آزمایشگاه | Laboratory
	FacilityTitle_PHARMACY             FacilityTitle = 4 // داروخانه | Pharmacy
	FacilityTitle_DENTAL_CLINIC        FacilityTitle = 5 // کلینیک دندانپزشکی | Dental Clinic
	FacilityTitle_PHYSIOTHERAPY_CENTER FacilityTitle = 6 // مرکز فیزیوتراپی | Physiotherapy Center
	FacilityTitle_VETERINARY_CLINIC    FacilityTitle = 7 // کلینیک دامپزشکی | Veterinary Clinic
	// متخصصین پزشکی
	FacilityTitle_GENERAL_PHYSICIAN  FacilityTitle = 8  // پزشک عمومی | General Physician
	FacilityTitle_DENTIST            FacilityTitle = 9  // دندانپزشک | Dentist
	FacilityTitle_CARDIOLOGIST       FacilityTitle = 10 // متخصص قلب و عروق | Cardiologist
	FacilityTitle_NEUROLOGIST        FacilityTitle = 11 // متخصص مغز و اعصاب | Neurologist
	FacilityTitle_PEDIATRICIAN       FacilityTitle = 12 // متخصص کودکان | Pediatrician
	FacilityTitle_DERMATOLOGIST      FacilityTitle = 13 // متخصص پوست | Dermatologist
	FacilityTitle_ORTHOPEDIC_SURGEON FacilityTitle = 14 // متخصص ارتوپدی / جراحی استخوان | Orthopedic Surgeon
	FacilityTitle_GYNECOLOGIST       FacilityTitle = 15 // متخصص زنان و زایمان | Gynecologist
	FacilityTitle_EYE_SPECIALIST     FacilityTitle = 16 // متخصص چشم | Ophthalmologist / Eye Specialist
	FacilityTitle_ENT_SPECIALIST     FacilityTitle = 17 // متخصص گوش و حنجره | Ear, Nose and Throat Specialist (ENT)
	FacilityTitle_PSYCHIATRIST       FacilityTitle = 18 // متخصص روانپزشکی | Psychiatrist
	FacilityTitle_DIETITIAN          FacilityTitle = 19 // متخصص تغذیه | Dietitian / Nutritionist
	FacilityTitle_UROLOGIST          FacilityTitle = 20 // متخصص ادراری و تناسلی | Urologist
	FacilityTitle_ONCOLOGIST         FacilityTitle = 21 // متخصص سرطان | Oncologist
	FacilityTitle_SURGEON            FacilityTitle = 22 // جراح عمومی | General Surgeon
	FacilityTitle_ANESTHESIOLOGIST   FacilityTitle = 23 // متخصص بیهوشی | Anesthesiologist
	FacilityTitle_RADIOLOGIST        FacilityTitle = 24 // متخصص تصویربرداری | Radiologist
	// گروه: BEAUTY_SALONS — سالن‌های زیبایی و آرایشی
	FacilityTitle_BEAUTY_SALON    FacilityTitle = 25 // سالن زیبایی | Beauty Salon
	FacilityTitle_BARBERSHOP      FacilityTitle = 26 // آرایشگاه مردانه | Barbershop
	FacilityTitle_SPA             FacilityTitle = 27 // اسپا | Spa or Massage Center
	FacilityTitle_COSMETICS_STORE FacilityTitle = 28 // فروشگاه لوازم آرایشی | Cosmetics Store
	FacilityTitle_HYGIENE_STORE   FacilityTitle = 29 // فروشگاه مواد شوینده و بهداشتی | Hygiene Store
	// گروه: SPORTS_CLUBS — باشگاه‌های ورزشی و تناسب اندام
	FacilityTitle_GYM           FacilityTitle = 30 // باشگاه بدنسازی | Gym
	FacilityTitle_SWIMMING_POOL FacilityTitle = 31 // استخر | Swimming Pool
	FacilityTitle_YOGA_CENTER   FacilityTitle = 32 // مرکز یوگا | Yoga Center
	FacilityTitle_SPORTS_CLUB   FacilityTitle = 33 // باشگاه ورزشی عمومی | Sports Club
	// گروه: RETAIL_STORES — فروشگاه‌های خرد
	FacilityTitle_GROCERY_STORE     FacilityTitle = 34 // خواربارفروشی | Grocery Store
	FacilityTitle_CLOTHING_STORE    FacilityTitle = 35 // فروشگاه پوشاک | Clothing Store
	FacilityTitle_ELECTRONICS_STORE FacilityTitle = 36 // فروشگاه الکترونیک | Electronics Store
	FacilityTitle_PET_SHOP          FacilityTitle = 37 // فروشگاه حیوانات خانگی | Pet Shop
	FacilityTitle_BOOKSTORE         FacilityTitle = 38 // کتاب‌فروشی | Bookstore
	FacilityTitle_TOY_STORE         FacilityTitle = 39 // فروشگاه اسباب‌بازی | Toy Store
	// گروه: SHOPPING_CENTERS — مراکز خرید و هایپرمارکت
	FacilityTitle_SHOPPING_MALL FacilityTitle = 40 // مرکز خرید (مول) | Shopping Mall
	FacilityTitle_HYPERMARKET   FacilityTitle = 41 // هایپرمارکت | Hypermarket
	FacilityTitle_MARKETPLACE   FacilityTitle = 42 // مجتمع فروشندگان | Marketplace / Bazaar
	// گروه: ENTERTAINMENT — سرگرمی
	FacilityTitle_CINEMA      FacilityTitle = 43 // سینما | Cinema
	FacilityTitle_GAME_CENTER FacilityTitle = 44 // مرکز بازی / گیم‌نت | Game Center
	FacilityTitle_PLAYGROUND  FacilityTitle = 45 // پارک بازی | Playground
	FacilityTitle_THEATER     FacilityTitle = 46 // تئاتر | Theater
	// گروه: ACCOMMODATION — مراکز اقامتی
	FacilityTitle_HOTEL        FacilityTitle = 47 // هتل | Hotel
	FacilityTitle_MOTEL        FacilityTitle = 48 // متل | Motel
	FacilityTitle_HOSTEL       FacilityTitle = 49 // هاستل | Hostel
	FacilityTitle_RESORT       FacilityTitle = 50 // رزورت | Resort
	FacilityTitle_CAMPING_SITE FacilityTitle = 51 // کمپینگ | Camping Site
	// گروه: FOOD_AND_BEVERAGE — غذا و نوشیدنی
	FacilityTitle_RESTAURANT  FacilityTitle = 52 // رستوران | Restaurant
	FacilityTitle_FAST_FOOD   FacilityTitle = 53 // فست‌فود | Fast Food
	FacilityTitle_CAFE        FacilityTitle = 54 // کافی‌شاپ | Cafe
	FacilityTitle_COFFEE_SHOP FacilityTitle = 55 // قهوه‌خانه | Coffee Shop
	FacilityTitle_BAKERY      FacilityTitle = 56 // نانوایی / کیک‌پزی | Bakery / Cake Shop
	// گروه: EDUCATIONAL_CENTERS — مراکز آموزشی
	FacilityTitle_SCHOOL          FacilityTitle = 57 // مدرسه | School
	FacilityTitle_UNIVERSITY      FacilityTitle = 58 // دانشگاه | University
	FacilityTitle_LANGUAGE_SCHOOL FacilityTitle = 59 // آموزشگاه زبان | Language School
	FacilityTitle_TUTORING_CENTER FacilityTitle = 60 // مرکز تدریس خصوصی | Tutoring Center
	FacilityTitle_CODING_BOOTCAMP FacilityTitle = 61 // دوره‌های کدنویسی | Coding Bootcamp
	// گروه: PROFESSIONAL_SERVICES — خدمات حرفه‌ای
	FacilityTitle_LAW_FIRM           FacilityTitle = 62 // دفتر حقوقی | Law Firm
	FacilityTitle_ACCOUNTING_OFFICE  FacilityTitle = 63 // دفتر حسابداری | Accounting Office
	FacilityTitle_CONSULTING_FIRM    FacilityTitle = 64 // شرکت مشاوره | Consulting Firm
	FacilityTitle_REAL_ESTATE_AGENCY FacilityTitle = 65 // آژانس املاک | Real Estate Agency
	FacilityTitle_INSURANCE_AGENCY   FacilityTitle = 66 // نمایندگی بیمه | Insurance Agency
	FacilityTitle_TRAVEL_AGENCY      FacilityTitle = 67 // آژانس مسافرتی | Travel Agency
	// گروه: INDUSTRIAL_FACILITIES — صنعت و تولید
	FacilityTitle_MANUFACTURING_PLANT FacilityTitle = 68 // کارخانه تولید | Manufacturing Plant
	FacilityTitle_WAREHOUSE           FacilityTitle = 69 // انبار | Warehouse
	FacilityTitle_LOGISTICS_CENTER    FacilityTitle = 70 // مرکز لجستیک | Logistics Center
	FacilityTitle_FACTORY             FacilityTitle = 71 // کارخانه عمومی | Factory
	// گروه: ONLINE_BUSINESSES — فعالیت‌های آنلاین
	FacilityTitle_FREELANCE_PROFESSIONAL FacilityTitle = 72 // فریلنسر | Freelance Professional
	FacilityTitle_ONLINE_SHOP            FacilityTitle = 73 // فروشگاه اینترنتی | Online Shop
	FacilityTitle_REMOTE_WORKSPACE       FacilityTitle = 74 // محیط کار آنلاین | Remote Workspace
)

// Enum value maps for FacilityTitle.
var (
	FacilityTitle_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CLINIC",
		2:  "HOSPITAL",
		3:  "LABORATORY",
		4:  "PHARMACY",
		5:  "DENTAL_CLINIC",
		6:  "PHYSIOTHERAPY_CENTER",
		7:  "VETERINARY_CLINIC",
		8:  "GENERAL_PHYSICIAN",
		9:  "DENTIST",
		10: "CARDIOLOGIST",
		11: "NEUROLOGIST",
		12: "PEDIATRICIAN",
		13: "DERMATOLOGIST",
		14: "ORTHOPEDIC_SURGEON",
		15: "GYNECOLOGIST",
		16: "EYE_SPECIALIST",
		17: "ENT_SPECIALIST",
		18: "PSYCHIATRIST",
		19: "DIETITIAN",
		20: "UROLOGIST",
		21: "ONCOLOGIST",
		22: "SURGEON",
		23: "ANESTHESIOLOGIST",
		24: "RADIOLOGIST",
		25: "BEAUTY_SALON",
		26: "BARBERSHOP",
		27: "SPA",
		28: "COSMETICS_STORE",
		29: "HYGIENE_STORE",
		30: "GYM",
		31: "SWIMMING_POOL",
		32: "YOGA_CENTER",
		33: "SPORTS_CLUB",
		34: "GROCERY_STORE",
		35: "CLOTHING_STORE",
		36: "ELECTRONICS_STORE",
		37: "PET_SHOP",
		38: "BOOKSTORE",
		39: "TOY_STORE",
		40: "SHOPPING_MALL",
		41: "HYPERMARKET",
		42: "MARKETPLACE",
		43: "CINEMA",
		44: "GAME_CENTER",
		45: "PLAYGROUND",
		46: "THEATER",
		47: "HOTEL",
		48: "MOTEL",
		49: "HOSTEL",
		50: "RESORT",
		51: "CAMPING_SITE",
		52: "RESTAURANT",
		53: "FAST_FOOD",
		54: "CAFE",
		55: "COFFEE_SHOP",
		56: "BAKERY",
		57: "SCHOOL",
		58: "UNIVERSITY",
		59: "LANGUAGE_SCHOOL",
		60: "TUTORING_CENTER",
		61: "CODING_BOOTCAMP",
		62: "LAW_FIRM",
		63: "ACCOUNTING_OFFICE",
		64: "CONSULTING_FIRM",
		65: "REAL_ESTATE_AGENCY",
		66: "INSURANCE_AGENCY",
		67: "TRAVEL_AGENCY",
		68: "MANUFACTURING_PLANT",
		69: "WAREHOUSE",
		70: "LOGISTICS_CENTER",
		71: "FACTORY",
		72: "FREELANCE_PROFESSIONAL",
		73: "ONLINE_SHOP",
		74: "REMOTE_WORKSPACE",
	}
	FacilityTitle_value = map[string]int32{
		"UNKNOWN":                0,
		"CLINIC":                 1,
		"HOSPITAL":               2,
		"LABORATORY":             3,
		"PHARMACY":               4,
		"DENTAL_CLINIC":          5,
		"PHYSIOTHERAPY_CENTER":   6,
		"VETERINARY_CLINIC":      7,
		"GENERAL_PHYSICIAN":      8,
		"DENTIST":                9,
		"CARDIOLOGIST":           10,
		"NEUROLOGIST":            11,
		"PEDIATRICIAN":           12,
		"DERMATOLOGIST":          13,
		"ORTHOPEDIC_SURGEON":     14,
		"GYNECOLOGIST":           15,
		"EYE_SPECIALIST":         16,
		"ENT_SPECIALIST":         17,
		"PSYCHIATRIST":           18,
		"DIETITIAN":              19,
		"UROLOGIST":              20,
		"ONCOLOGIST":             21,
		"SURGEON":                22,
		"ANESTHESIOLOGIST":       23,
		"RADIOLOGIST":            24,
		"BEAUTY_SALON":           25,
		"BARBERSHOP":             26,
		"SPA":                    27,
		"COSMETICS_STORE":        28,
		"HYGIENE_STORE":          29,
		"GYM":                    30,
		"SWIMMING_POOL":          31,
		"YOGA_CENTER":            32,
		"SPORTS_CLUB":            33,
		"GROCERY_STORE":          34,
		"CLOTHING_STORE":         35,
		"ELECTRONICS_STORE":      36,
		"PET_SHOP":               37,
		"BOOKSTORE":              38,
		"TOY_STORE":              39,
		"SHOPPING_MALL":          40,
		"HYPERMARKET":            41,
		"MARKETPLACE":            42,
		"CINEMA":                 43,
		"GAME_CENTER":            44,
		"PLAYGROUND":             45,
		"THEATER":                46,
		"HOTEL":                  47,
		"MOTEL":                  48,
		"HOSTEL":                 49,
		"RESORT":                 50,
		"CAMPING_SITE":           51,
		"RESTAURANT":             52,
		"FAST_FOOD":              53,
		"CAFE":                   54,
		"COFFEE_SHOP":            55,
		"BAKERY":                 56,
		"SCHOOL":                 57,
		"UNIVERSITY":             58,
		"LANGUAGE_SCHOOL":        59,
		"TUTORING_CENTER":        60,
		"CODING_BOOTCAMP":        61,
		"LAW_FIRM":               62,
		"ACCOUNTING_OFFICE":      63,
		"CONSULTING_FIRM":        64,
		"REAL_ESTATE_AGENCY":     65,
		"INSURANCE_AGENCY":       66,
		"TRAVEL_AGENCY":          67,
		"MANUFACTURING_PLANT":    68,
		"WAREHOUSE":              69,
		"LOGISTICS_CENTER":       70,
		"FACTORY":                71,
		"FREELANCE_PROFESSIONAL": 72,
		"ONLINE_SHOP":            73,
		"REMOTE_WORKSPACE":       74,
	}
)

func (x FacilityTitle) Enum() *FacilityTitle {
	p := new(FacilityTitle)
	*p = x
	return p
}

func (x FacilityTitle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacilityTitle) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[5].Descriptor()
}

func (FacilityTitle) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[5]
}

func (x FacilityTitle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacilityTitle.Descriptor instead.
func (FacilityTitle) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{5}
}

type FacilityType int32

const (
	FacilityType_Facility_BOOKABLE      FacilityType = 0 // قابل رزرو (مثلاً آرایشگاه، پزشک)
	FacilityType_Facility_PURCHASABLE   FacilityType = 1 // قابل خرید (مثلاً فروشگاه)
	FacilityType_Facility_HYBRID        FacilityType = 2 // ترکیبی
	FacilityType_Facility_ACCOMMODATION FacilityType = 3 // فسیلیتی اقامتی مثل هتل یا هاستل
)

// Enum value maps for FacilityType.
var (
	FacilityType_name = map[int32]string{
		0: "Facility_BOOKABLE",
		1: "Facility_PURCHASABLE",
		2: "Facility_HYBRID",
		3: "Facility_ACCOMMODATION",
	}
	FacilityType_value = map[string]int32{
		"Facility_BOOKABLE":      0,
		"Facility_PURCHASABLE":   1,
		"Facility_HYBRID":        2,
		"Facility_ACCOMMODATION": 3,
	}
)

func (x FacilityType) Enum() *FacilityType {
	p := new(FacilityType)
	*p = x
	return p
}

func (x FacilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[6].Descriptor()
}

func (FacilityType) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[6]
}

func (x FacilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacilityType.Descriptor instead.
func (FacilityType) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{6}
}

// نوع‌های استاندارد اتاق | Standard room type codes
type RoomTypeCode int32

const (
	RoomTypeCode_ROOM_TYPE_UNSPECIFIED RoomTypeCode = 0 // نامشخص | Unspecified
	RoomTypeCode_SINGLE                RoomTypeCode = 1 // یک‌تخته | Single
	RoomTypeCode_DOUBLE                RoomTypeCode = 2 // دوتخته | Double
	RoomTypeCode_TWIN                  RoomTypeCode = 3 // دو تخت جدا | Twin
	RoomTypeCode_SUITE                 RoomTypeCode = 4 // سوئیت | Suite
	RoomTypeCode_FAMILY                RoomTypeCode = 5 // خانوادگی | Family
	RoomTypeCode_KING                  RoomTypeCode = 6 // کینگ | King
	RoomTypeCode_QUEEN                 RoomTypeCode = 7 // کوئین | Queen
)

// Enum value maps for RoomTypeCode.
var (
	RoomTypeCode_name = map[int32]string{
		0: "ROOM_TYPE_UNSPECIFIED",
		1: "SINGLE",
		2: "DOUBLE",
		3: "TWIN",
		4: "SUITE",
		5: "FAMILY",
		6: "KING",
		7: "QUEEN",
	}
	RoomTypeCode_value = map[string]int32{
		"ROOM_TYPE_UNSPECIFIED": 0,
		"SINGLE":                1,
		"DOUBLE":                2,
		"TWIN":                  3,
		"SUITE":                 4,
		"FAMILY":                5,
		"KING":                  6,
		"QUEEN":                 7,
	}
)

func (x RoomTypeCode) Enum() *RoomTypeCode {
	p := new(RoomTypeCode)
	*p = x
	return p
}

func (x RoomTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[7].Descriptor()
}

func (RoomTypeCode) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[7]
}

func (x RoomTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomTypeCode.Descriptor instead.
func (RoomTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{7}
}

type Status int32

const (
	Status_ACTIVE   Status = 0 // پیش‌فرض: فعال
	Status_INACTIVE Status = 1 // غیرفعال
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Status_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[8].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[8]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{8}
}

type TimeSlot_SlotSource int32

const (
	TimeSlot_GENERATED_FROM_WEEKLY TimeSlot_SlotSource = 0 // تولیدشده از برنامه هفتگی
	TimeSlot_MANUAL                TimeSlot_SlotSource = 1 // وارد شده به صورت دستی
)

// Enum value maps for TimeSlot_SlotSource.
var (
	TimeSlot_SlotSource_name = map[int32]string{
		0: "GENERATED_FROM_WEEKLY",
		1: "MANUAL",
	}
	TimeSlot_SlotSource_value = map[string]int32{
		"GENERATED_FROM_WEEKLY": 0,
		"MANUAL":                1,
	}
)

func (x TimeSlot_SlotSource) Enum() *TimeSlot_SlotSource {
	p := new(TimeSlot_SlotSource)
	*p = x
	return p
}

func (x TimeSlot_SlotSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSlot_SlotSource) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[9].Descriptor()
}

func (TimeSlot_SlotSource) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[9]
}

func (x TimeSlot_SlotSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSlot_SlotSource.Descriptor instead.
func (TimeSlot_SlotSource) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{6, 0}
}

// ========== ENTITIES ==========
// رشته قابل ترجمه در چند زبان | Translatable string with multiple languages
type LocalizedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fa string `protobuf:"bytes,1,opt,name=fa,proto3" json:"fa,omitempty"` // فارسی
	En string `protobuf:"bytes,2,opt,name=en,proto3" json:"en,omitempty"` // انگلیسی
	Ar string `protobuf:"bytes,3,opt,name=ar,proto3" json:"ar,omitempty"` // عربی
}

func (x *LocalizedString) Reset() {
	*x = LocalizedString{}
	mi := &file_reservations_reservation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedString) ProtoMessage() {}

func (x *LocalizedString) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedString.ProtoReflect.Descriptor instead.
func (*LocalizedString) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{0}
}

func (x *LocalizedString) GetFa() string {
	if x != nil {
		return x.Fa
	}
	return ""
}

func (x *LocalizedString) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

func (x *LocalizedString) GetAr() string {
	if x != nil {
		return x.Ar
	}
	return ""
}

// فسیلیتی یا مکان — مانند مطب، آرایشگاه، هتل، باشگاه
// Facility such as a clinic, salon, hotel, or gym
type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // شناسه منحصر به فرد
	Name   *LocalizedString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // نام ساختار (مثلاً "کلینیک دکتر محمدی")
	Title  FacilityTitle    `protobuf:"varint,3,opt,name=title,proto3,enum=reservation.FacilityTitle" json:"title,omitempty"` // نوع ساختاری (کلینیک، سالن، هتل و ...)
	Type   FacilityType     `protobuf:"varint,4,opt,name=type,proto3,enum=reservation.FacilityType" json:"type,omitempty"`    // کاربرد (رزرو، خرید، ترکیبی)
	Group  FacilityGroup    `protobuf:"varint,5,opt,name=group,proto3,enum=reservation.FacilityGroup" json:"group,omitempty"` // گروه‌بندی موضوعی
	Status Status           `protobuf:"varint,6,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`      // وضعیت: فعال / غیرفعال
}

func (x *Facility) Reset() {
	*x = Facility{}
	mi := &file_reservations_reservation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{1}
}

func (x *Facility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Facility) GetName() *LocalizedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Facility) GetTitle() FacilityTitle {
	if x != nil {
		return x.Title
	}
	return FacilityTitle_UNKNOWN
}

func (x *Facility) GetType() FacilityType {
	if x != nil {
		return x.Type
	}
	return FacilityType_Facility_BOOKABLE
}

func (x *Facility) GetGroup() FacilityGroup {
	if x != nil {
		return x.Group
	}
	return FacilityGroup_UNKNOWN_GROUP
}

func (x *Facility) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// سرویس یا خدمت قابل ارائه در فسیلیتی
// Service offered in a facility
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // شناسه یکتا | Unique service ID
	FacilityId             string           `protobuf:"bytes,2,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه فسیلیتی که این سرویس به آن تعلق دارد | Associated facility ID
	Name                   *LocalizedString `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // نام سرویس مانند "کوتاهی مو" یا "ویزیت عمومی" | Service name
	Description            *LocalizedString `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`           // توضیحات | Description
	IsAvailable            bool             `protobuf:"varint,5,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	DefaultDurationMinutes *int32           `protobuf:"varint,6,opt,name=default_duration_minutes,json=defaultDurationMinutes,proto3,oneof" json:"default_duration_minutes,omitempty"` // مدت پیش‌فرض | Default duration
	DefaultPrice           *money.Money     `protobuf:"bytes,7,opt,name=default_price,json=defaultPrice,proto3,oneof" json:"default_price,omitempty"`                                  // قیمت پیش‌فرض | Default price
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_reservations_reservation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *Service) GetName() *LocalizedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Service) GetDescription() *LocalizedString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Service) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *Service) GetDefaultDurationMinutes() int32 {
	if x != nil && x.DefaultDurationMinutes != nil {
		return *x.DefaultDurationMinutes
	}
	return 0
}

func (x *Service) GetDefaultPrice() *money.Money {
	if x != nil {
		return x.DefaultPrice
	}
	return nil
}

// تصویر مرتبط با یک فسیلیتی مانند عکس اتاق یا نمای بیرونی
// Image related to a facility, like room photo or exterior view
type FacilityImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // شناسه یکتا | Unique image ID
	FacilityId  string           `protobuf:"bytes,2,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه فسیلیتی | Related Facility ID
	Url         string           `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                                 // مسیر یا لینک فایل تصویر | URL or file path to the image
	Title       *LocalizedString `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                             // عنوان اختیاری | Optional image title
	Description *LocalizedString `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                 // توضیح تصویر | Optional image description
	Status      Status           `protobuf:"varint,6,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`  // وضعیت: فعال / غیرفعال
}

func (x *FacilityImage) Reset() {
	*x = FacilityImage{}
	mi := &file_reservations_reservation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FacilityImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacilityImage) ProtoMessage() {}

func (x *FacilityImage) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacilityImage.ProtoReflect.Descriptor instead.
func (*FacilityImage) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{3}
}

func (x *FacilityImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FacilityImage) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *FacilityImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FacilityImage) GetTitle() *LocalizedString {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *FacilityImage) GetDescription() *LocalizedString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *FacilityImage) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// نگاشت بین سرویس و ارائه‌دهنده خاص
// Mapping of service to a specific provider
type ProviderService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId    string      `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProviderUser *users.User `protobuf:"bytes,3,opt,name=provider_user,json=providerUser,proto3" json:"provider_user,omitempty"` // شناسه کاربر ارائه‌دهنده (مثل پزشک یا آرایشگر)
	IsAvailable  bool        `protobuf:"varint,4,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`   // آیا ارائه می‌شود یا نه
	// اگر مقداردهی شوند، جایگزین مقدار پیش‌فرض می‌شوند
	Price           *money.Money `protobuf:"bytes,5,opt,name=price,proto3,oneof" json:"price,omitempty"`                                             // قیمت اختصاصی این provider
	DurationMinutes *int32       `protobuf:"varint,6,opt,name=duration_minutes,json=durationMinutes,proto3,oneof" json:"duration_minutes,omitempty"` // مدت اختصاصی این provider
}

func (x *ProviderService) Reset() {
	*x = ProviderService{}
	mi := &file_reservations_reservation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderService) ProtoMessage() {}

func (x *ProviderService) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderService.ProtoReflect.Descriptor instead.
func (*ProviderService) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{4}
}

func (x *ProviderService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProviderService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ProviderService) GetProviderUser() *users.User {
	if x != nil {
		return x.ProviderUser
	}
	return nil
}

func (x *ProviderService) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *ProviderService) GetPrice() *money.Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ProviderService) GetDurationMinutes() int32 {
	if x != nil && x.DurationMinutes != nil {
		return *x.DurationMinutes
	}
	return 0
}

// برنامه‌ زمانی تکرارشونده‌ی سرویس‌دهنده در یک روز خاص
// Weekly recurring availability for provider
type WeeklySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderUserId string  `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	Day            WeekDay `protobuf:"varint,3,opt,name=day,proto3,enum=reservation.WeekDay" json:"day,omitempty"`          // روز هفته | Day of the week (e.g. Saturday)
	StartTime      string  `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       // ساعت شروع (HH:mm) مثل "09:00"
	EndTime        string  `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`             // ساعت پایان (HH:mm) مثل "17:00"
	FacilityId     string  `protobuf:"bytes,6,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`    // مکان مرتبط | Facility ID
	ServiceId      *string `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3,oneof" json:"service_id,omitempty"` // سرویس خاص، اختیاری | Optional service ID
	Status         Status  `protobuf:"varint,8,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`     // وضعیت فعال یا غیرفعال
}

func (x *WeeklySchedule) Reset() {
	*x = WeeklySchedule{}
	mi := &file_reservations_reservation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklySchedule) ProtoMessage() {}

func (x *WeeklySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklySchedule.ProtoReflect.Descriptor instead.
func (*WeeklySchedule) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{5}
}

func (x *WeeklySchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WeeklySchedule) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *WeeklySchedule) GetDay() WeekDay {
	if x != nil {
		return x.Day
	}
	return WeekDay_SATURDAY
}

func (x *WeeklySchedule) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *WeeklySchedule) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *WeeklySchedule) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *WeeklySchedule) GetServiceId() string {
	if x != nil && x.ServiceId != nil {
		return *x.ServiceId
	}
	return ""
}

func (x *WeeklySchedule) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// بازه‌ زمانی رزروپذیر (تولیدشده یا دستی)
// Exact time slot for reservation
type TimeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderUserId   string                 `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OwnerType        OwnerType              `protobuf:"varint,5,opt,name=owner_type,json=ownerType,proto3,enum=reservation.OwnerType" json:"owner_type,omitempty"`  // فردی یا اشتراکی
	IsReserved       bool                   `protobuf:"varint,6,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`                          // آیا رزرو شده یا نه
	WeeklyScheduleId *string                `protobuf:"bytes,7,opt,name=weekly_schedule_id,json=weeklyScheduleId,proto3,oneof" json:"weekly_schedule_id,omitempty"` // منبع ساخت (در صورت تولید خودکار)
	FacilityId       string                 `protobuf:"bytes,8,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	ServiceId        *string                `protobuf:"bytes,9,opt,name=service_id,json=serviceId,proto3,oneof" json:"service_id,omitempty"`
	Source           TimeSlot_SlotSource    `protobuf:"varint,10,opt,name=source,proto3,enum=reservation.TimeSlot_SlotSource" json:"source,omitempty"`
	Status           Status                 `protobuf:"varint,11,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"` // فعال/غیرفعال (مثلاً کنسل شده یا غیرفعال شده)
}

func (x *TimeSlot) Reset() {
	*x = TimeSlot{}
	mi := &file_reservations_reservation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSlot) ProtoMessage() {}

func (x *TimeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSlot.ProtoReflect.Descriptor instead.
func (*TimeSlot) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{6}
}

func (x *TimeSlot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimeSlot) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *TimeSlot) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeSlot) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeSlot) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_INDIVIDUAL
}

func (x *TimeSlot) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

func (x *TimeSlot) GetWeeklyScheduleId() string {
	if x != nil && x.WeeklyScheduleId != nil {
		return *x.WeeklyScheduleId
	}
	return ""
}

func (x *TimeSlot) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *TimeSlot) GetServiceId() string {
	if x != nil && x.ServiceId != nil {
		return *x.ServiceId
	}
	return ""
}

func (x *TimeSlot) GetSource() TimeSlot_SlotSource {
	if x != nil {
		return x.Source
	}
	return TimeSlot_GENERATED_FROM_WEEKLY
}

func (x *TimeSlot) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// بازه‌های عدم دسترسی ارائه‌دهنده (برای کل روز یا ساعاتی خاص)
// Periods when the provider is not available (full day or specific hours)
type ProviderUnavailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderUserId string                 `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه ارائه‌دهنده | Provider user ID
	Date           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`                                             // تاریخ غیبت | Specific date (e.g. 2025-07-15)
	StartTime      *string                `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`            // ساعت شروع (مثلاً "09:00") | Optional start time
	EndTime        *string                `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`                  // ساعت پایان (مثلاً "12:00") | Optional end time
	Reason         *string                `protobuf:"bytes,6,opt,name=reason,proto3,oneof" json:"reason,omitempty"`                                   // دلیل اختیاری (مثلاً مرخصی، سفر و ...) | Optional reason
	FullDay        bool                   `protobuf:"varint,7,opt,name=full_day,json=fullDay,proto3" json:"full_day,omitempty"`                       // آیا کل روز غیرفعال است؟ | Is it a full-day off?
	Status         Status                 `protobuf:"varint,8,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`                // فعال / غیرفعال
}

func (x *ProviderUnavailability) Reset() {
	*x = ProviderUnavailability{}
	mi := &file_reservations_reservation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderUnavailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderUnavailability) ProtoMessage() {}

func (x *ProviderUnavailability) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderUnavailability.ProtoReflect.Descriptor instead.
func (*ProviderUnavailability) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{7}
}

func (x *ProviderUnavailability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProviderUnavailability) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *ProviderUnavailability) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ProviderUnavailability) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ProviderUnavailability) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ProviderUnavailability) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *ProviderUnavailability) GetFullDay() bool {
	if x != nil {
		return x.FullDay
	}
	return false
}

func (x *ProviderUnavailability) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

type RoomAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId  string                 `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Date       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"` // تاریخ شب
	IsReserved bool                   `protobuf:"varint,4,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`
}

func (x *RoomAvailability) Reset() {
	*x = RoomAvailability{}
	mi := &file_reservations_reservation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAvailability) ProtoMessage() {}

func (x *RoomAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAvailability.ProtoReflect.Descriptor instead.
func (*RoomAvailability) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{8}
}

func (x *RoomAvailability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoomAvailability) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RoomAvailability) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *RoomAvailability) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

type ServiceUnavailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId    string                 `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`          // اتاق خاص
	ProviderUser *users.User            `protobuf:"bytes,3,opt,name=provider_user,json=providerUser,proto3" json:"provider_user,omitempty"` // شناسه کاربر ارائه‌دهنده (مثل پزشک یا آرایشگر)
	From         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Reason       string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ServiceUnavailability) Reset() {
	*x = ServiceUnavailability{}
	mi := &file_reservations_reservation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceUnavailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUnavailability) ProtoMessage() {}

func (x *ServiceUnavailability) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUnavailability.ProtoReflect.Descriptor instead.
func (*ServiceUnavailability) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceUnavailability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceUnavailability) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceUnavailability) GetProviderUser() *users.User {
	if x != nil {
		return x.ProviderUser
	}
	return nil
}

func (x *ServiceUnavailability) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ServiceUnavailability) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ServiceUnavailability) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// اطلاعات نوع اتاق در هتل | Hotel room type definition
type RoomType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FacilityId         string           `protobuf:"bytes,2,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`                             // شناسه هتل | Hotel/facility ID
	TypeCode           RoomTypeCode     `protobuf:"varint,3,opt,name=type_code,json=typeCode,proto3,enum=reservation.RoomTypeCode" json:"type_code,omitempty"`    // کد نوع اتاق استاندارد | Standard room type code
	CustomName         *LocalizedString `protobuf:"bytes,4,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`                             // نام سفارشی توسط ادمین | Custom name (optional)
	Description        *LocalizedString `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                             // توضیحات | Description
	Capacity           int32            `protobuf:"varint,6,opt,name=capacity,proto3" json:"capacity,omitempty"`                                                  // ظرفیت | Max guest capacity
	BedCount           int32            `protobuf:"varint,7,opt,name=bed_count,json=bedCount,proto3" json:"bed_count,omitempty"`                                  // تعداد تخت | Bed count
	BedType            string           `protobuf:"bytes,8,opt,name=bed_type,json=bedType,proto3" json:"bed_type,omitempty"`                                      // نوع تخت | Bed type (Single, Double, King...)
	HasPrivateBathroom bool             `protobuf:"varint,9,opt,name=has_private_bathroom,json=hasPrivateBathroom,proto3" json:"has_private_bathroom,omitempty"`  // حمام اختصاصی | Private bathroom
	HasAirConditioning bool             `protobuf:"varint,10,opt,name=has_air_conditioning,json=hasAirConditioning,proto3" json:"has_air_conditioning,omitempty"` // تهویه مطبوع | Air conditioning
	HasTv              bool             `protobuf:"varint,11,opt,name=has_tv,json=hasTv,proto3" json:"has_tv,omitempty"`                                          // تلویزیون | TV
	HasWifi            bool             `protobuf:"varint,12,opt,name=has_wifi,json=hasWifi,proto3" json:"has_wifi,omitempty"`                                    // وای‌فای | WiFi
	HasBalcony         bool             `protobuf:"varint,13,opt,name=has_balcony,json=hasBalcony,proto3" json:"has_balcony,omitempty"`                           // بالکن | Balcony
	IsSmokingAllowed   bool             `protobuf:"varint,14,opt,name=is_smoking_allowed,json=isSmokingAllowed,proto3" json:"is_smoking_allowed,omitempty"`       // مجاز بودن سیگار | Smoking allowed
	BasePrice          *money.Money     `protobuf:"bytes,15,opt,name=base_price,json=basePrice,proto3,oneof" json:"base_price,omitempty"`                         // قیمت پایه | Base price
	Status             Status           `protobuf:"varint,16,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`                             // وضعیت: فعال/غیرفعال | Status
}

func (x *RoomType) Reset() {
	*x = RoomType{}
	mi := &file_reservations_reservation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomType) ProtoMessage() {}

func (x *RoomType) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomType.ProtoReflect.Descriptor instead.
func (*RoomType) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{10}
}

func (x *RoomType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoomType) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *RoomType) GetTypeCode() RoomTypeCode {
	if x != nil {
		return x.TypeCode
	}
	return RoomTypeCode_ROOM_TYPE_UNSPECIFIED
}

func (x *RoomType) GetCustomName() *LocalizedString {
	if x != nil {
		return x.CustomName
	}
	return nil
}

func (x *RoomType) GetDescription() *LocalizedString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RoomType) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RoomType) GetBedCount() int32 {
	if x != nil {
		return x.BedCount
	}
	return 0
}

func (x *RoomType) GetBedType() string {
	if x != nil {
		return x.BedType
	}
	return ""
}

func (x *RoomType) GetHasPrivateBathroom() bool {
	if x != nil {
		return x.HasPrivateBathroom
	}
	return false
}

func (x *RoomType) GetHasAirConditioning() bool {
	if x != nil {
		return x.HasAirConditioning
	}
	return false
}

func (x *RoomType) GetHasTv() bool {
	if x != nil {
		return x.HasTv
	}
	return false
}

func (x *RoomType) GetHasWifi() bool {
	if x != nil {
		return x.HasWifi
	}
	return false
}

func (x *RoomType) GetHasBalcony() bool {
	if x != nil {
		return x.HasBalcony
	}
	return false
}

func (x *RoomType) GetIsSmokingAllowed() bool {
	if x != nil {
		return x.IsSmokingAllowed
	}
	return false
}

func (x *RoomType) GetBasePrice() *money.Money {
	if x != nil {
		return x.BasePrice
	}
	return nil
}

func (x *RoomType) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// اطلاعات یک اتاق واقعی در هتل | Physical room information in a hotel
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FacilityId string       `protobuf:"bytes,2,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`   // شناسه هتل | Hotel/facility ID
	RoomTypeId string       `protobuf:"bytes,3,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"` // شناسه نوع اتاق | Associated RoomType ID
	RoomNumber string       `protobuf:"bytes,4,opt,name=room_number,json=roomNumber,proto3" json:"room_number,omitempty"`   // شماره یا نام اتاق | Room number or label (e.g., 101, A1)
	Images     []*RoomImage `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`                             // تصاویر اتاق | Room images
	Status     Status       `protobuf:"varint,6,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`    // وضعیت: فعال، غیرفعال، در حال تعمیر | Status (Available, Maintenance, etc.)
}

func (x *Room) Reset() {
	*x = Room{}
	mi := &file_reservations_reservation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{11}
}

func (x *Room) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Room) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *Room) GetRoomTypeId() string {
	if x != nil {
		return x.RoomTypeId
	}
	return ""
}

func (x *Room) GetRoomNumber() string {
	if x != nil {
		return x.RoomNumber
	}
	return ""
}

func (x *Room) GetImages() []*RoomImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Room) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// تصویرهای اتاق | Room images
type RoomImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                  // شناسه یکتا | Unique image ID
	RoomId      string           `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`            // شناسه اتاق | Room ID this image belongs to
	Url         string           `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                                // لینک یا مسیر فایل تصویر | Image URL or file path
	Title       *LocalizedString `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                            // عنوان تصویر (اختیاری) | Optional image title
	Description *LocalizedString `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                // توضیح تصویر (اختیاری) | Optional image description
	Status      Status           `protobuf:"varint,6,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"` // وضعیت: فعال / غیرفعال | Active / Inactive
}

func (x *RoomImage) Reset() {
	*x = RoomImage{}
	mi := &file_reservations_reservation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomImage) ProtoMessage() {}

func (x *RoomImage) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomImage.ProtoReflect.Descriptor instead.
func (*RoomImage) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{12}
}

func (x *RoomImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoomImage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RoomImage) GetTitle() *LocalizedString {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *RoomImage) GetDescription() *LocalizedString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RoomImage) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

// رزرو ثبت‌شده توسط کاربر
// Reservation made by user
type Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User           *users.User            `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                             // کاربر رزروکننده
	ProviderUserId string                 `protobuf:"bytes,3,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // سرویس‌دهنده
	ServiceId      string                 `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	FacilityId     string                 `protobuf:"bytes,5,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	TimeSlotId     string                 `protobuf:"bytes,6,opt,name=time_slot_id,json=timeSlotId,proto3" json:"time_slot_id,omitempty"`
	Status         ReservationStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=reservation.ReservationStatus" json:"status,omitempty"`
	Notes          string                 `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	mi := &file_reservations_reservation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{13}
}

func (x *Reservation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reservation) GetUser() *users.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Reservation) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *Reservation) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Reservation) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *Reservation) GetTimeSlotId() string {
	if x != nil {
		return x.TimeSlotId
	}
	return ""
}

func (x *Reservation) GetStatus() ReservationStatus {
	if x != nil {
		return x.Status
	}
	return ReservationStatus_PENDING
}

func (x *Reservation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Reservation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// ایجاد فسیلیتی | Create a facility
// Proto
type CreateFacilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *LocalizedString `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title  FacilityTitle    `protobuf:"varint,2,opt,name=title,proto3,enum=reservation.FacilityTitle" json:"title,omitempty"`
	Type   FacilityType     `protobuf:"varint,3,opt,name=type,proto3,enum=reservation.FacilityType" json:"type,omitempty"`
	Group  FacilityGroup    `protobuf:"varint,4,opt,name=group,proto3,enum=reservation.FacilityGroup" json:"group,omitempty"`
	Status Status           `protobuf:"varint,5,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`
}

func (x *CreateFacilityRequest) Reset() {
	*x = CreateFacilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFacilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFacilityRequest) ProtoMessage() {}

func (x *CreateFacilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFacilityRequest.ProtoReflect.Descriptor instead.
func (*CreateFacilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{14}
}

func (x *CreateFacilityRequest) GetName() *LocalizedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateFacilityRequest) GetTitle() FacilityTitle {
	if x != nil {
		return x.Title
	}
	return FacilityTitle_UNKNOWN
}

func (x *CreateFacilityRequest) GetType() FacilityType {
	if x != nil {
		return x.Type
	}
	return FacilityType_Facility_BOOKABLE
}

func (x *CreateFacilityRequest) GetGroup() FacilityGroup {
	if x != nil {
		return x.Group
	}
	return FacilityGroup_UNKNOWN_GROUP
}

func (x *CreateFacilityRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

type CreateFacilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // شناسه فسیلیتی ایجاد شده | Created facility ID
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
	Facility *Facility `protobuf:"bytes,3,opt,name=facility,proto3" json:"facility,omitempty"`
}

func (x *CreateFacilityResponse) Reset() {
	*x = CreateFacilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFacilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFacilityResponse) ProtoMessage() {}

func (x *CreateFacilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFacilityResponse.ProtoReflect.Descriptor instead.
func (*CreateFacilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{15}
}

func (x *CreateFacilityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateFacilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateFacilityResponse) GetFacility() *Facility {
	if x != nil {
		return x.Facility
	}
	return nil
}

type UpdateFacilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId int64 `protobuf:"varint,1,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	// می‌تونیم یک فیلد partial باشه و فقط فیلدهایی که کاربر می‌خواد بروز کنه را بفرسته
	Name   *LocalizedString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Title  FacilityTitle    `protobuf:"varint,3,opt,name=title,proto3,enum=reservation.FacilityTitle" json:"title,omitempty"`
	Type   FacilityType     `protobuf:"varint,4,opt,name=type,proto3,enum=reservation.FacilityType" json:"type,omitempty"`
	Group  FacilityGroup    `protobuf:"varint,5,opt,name=group,proto3,enum=reservation.FacilityGroup" json:"group,omitempty"`
	Status Status           `protobuf:"varint,6,opt,name=status,proto3,enum=reservation.Status" json:"status,omitempty"`
}

func (x *UpdateFacilityRequest) Reset() {
	*x = UpdateFacilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFacilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFacilityRequest) ProtoMessage() {}

func (x *UpdateFacilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFacilityRequest.ProtoReflect.Descriptor instead.
func (*UpdateFacilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateFacilityRequest) GetFacilityId() int64 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *UpdateFacilityRequest) GetName() *LocalizedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateFacilityRequest) GetTitle() FacilityTitle {
	if x != nil {
		return x.Title
	}
	return FacilityTitle_UNKNOWN
}

func (x *UpdateFacilityRequest) GetType() FacilityType {
	if x != nil {
		return x.Type
	}
	return FacilityType_Facility_BOOKABLE
}

func (x *UpdateFacilityRequest) GetGroup() FacilityGroup {
	if x != nil {
		return x.Group
	}
	return FacilityGroup_UNKNOWN_GROUP
}

func (x *UpdateFacilityRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

type UpdateFacilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility *Facility `protobuf:"bytes,1,opt,name=facility,proto3" json:"facility,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateFacilityResponse) Reset() {
	*x = UpdateFacilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFacilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFacilityResponse) ProtoMessage() {}

func (x *UpdateFacilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFacilityResponse.ProtoReflect.Descriptor instead.
func (*UpdateFacilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateFacilityResponse) GetFacility() *Facility {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *UpdateFacilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// افزودن تصویر به فسیلیتی | Add image to facility
type AddFacilityImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *FacilityImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"` // اطلاعات تصویر | Image info
}

func (x *AddFacilityImageRequest) Reset() {
	*x = AddFacilityImageRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFacilityImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFacilityImageRequest) ProtoMessage() {}

func (x *AddFacilityImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFacilityImageRequest.ProtoReflect.Descriptor instead.
func (*AddFacilityImageRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{18}
}

func (x *AddFacilityImageRequest) GetImage() *FacilityImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type AddFacilityImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // شناسه تصویر آپلود شده | Uploaded image ID
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *AddFacilityImageResponse) Reset() {
	*x = AddFacilityImageResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFacilityImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFacilityImageResponse) ProtoMessage() {}

func (x *AddFacilityImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFacilityImageResponse.ProtoReflect.Descriptor instead.
func (*AddFacilityImageResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{19}
}

func (x *AddFacilityImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddFacilityImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// حذف تصویر فسیلیتی | Delete facility image
type DeleteFacilityImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"` // شناسه تصویر | Image ID
}

func (x *DeleteFacilityImageRequest) Reset() {
	*x = DeleteFacilityImageRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFacilityImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFacilityImageRequest) ProtoMessage() {}

func (x *DeleteFacilityImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFacilityImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteFacilityImageRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteFacilityImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type DeleteFacilityImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *DeleteFacilityImageResponse) Reset() {
	*x = DeleteFacilityImageResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFacilityImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFacilityImageResponse) ProtoMessage() {}

func (x *DeleteFacilityImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFacilityImageResponse.ProtoReflect.Descriptor instead.
func (*DeleteFacilityImageResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFacilityImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// دریافت تصاویر فسیلیتی | Get images of a facility
type GetFacilityImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId string `protobuf:"bytes,1,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه فسیلیتی | Facility ID
}

func (x *GetFacilityImagesRequest) Reset() {
	*x = GetFacilityImagesRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFacilityImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFacilityImagesRequest) ProtoMessage() {}

func (x *GetFacilityImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFacilityImagesRequest.ProtoReflect.Descriptor instead.
func (*GetFacilityImagesRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{22}
}

func (x *GetFacilityImagesRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

type GetFacilityImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*FacilityImage `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"` // لیست تصاویر | List of images
}

func (x *GetFacilityImagesResponse) Reset() {
	*x = GetFacilityImagesResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFacilityImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFacilityImagesResponse) ProtoMessage() {}

func (x *GetFacilityImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFacilityImagesResponse.ProtoReflect.Descriptor instead.
func (*GetFacilityImagesResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{23}
}

func (x *GetFacilityImagesResponse) GetImages() []*FacilityImage {
	if x != nil {
		return x.Images
	}
	return nil
}

// ایجاد سرویس | Create a service
type CreateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"` // اطلاعات سرویس | Service info
}

func (x *CreateServiceRequest) Reset() {
	*x = CreateServiceRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceRequest) ProtoMessage() {}

func (x *CreateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{24}
}

func (x *CreateServiceRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type CreateServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // شناسه سرویس | Service ID
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *CreateServiceResponse) Reset() {
	*x = CreateServiceResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceResponse) ProtoMessage() {}

func (x *CreateServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{25}
}

func (x *CreateServiceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateServiceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// اختصاص سرویس به ارائه‌دهنده | Assign service to provider
type AssignServiceToProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId      string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                  // شناسه سرویس | Service ID
	ProviderUserId string `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه کاربر ارائه‌دهنده | Provider user ID
}

func (x *AssignServiceToProviderRequest) Reset() {
	*x = AssignServiceToProviderRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignServiceToProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignServiceToProviderRequest) ProtoMessage() {}

func (x *AssignServiceToProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignServiceToProviderRequest.ProtoReflect.Descriptor instead.
func (*AssignServiceToProviderRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{26}
}

func (x *AssignServiceToProviderRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *AssignServiceToProviderRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

type AssignServiceToProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت | Success message
}

func (x *AssignServiceToProviderResponse) Reset() {
	*x = AssignServiceToProviderResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignServiceToProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignServiceToProviderResponse) ProtoMessage() {}

func (x *AssignServiceToProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignServiceToProviderResponse.ProtoReflect.Descriptor instead.
func (*AssignServiceToProviderResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{27}
}

func (x *AssignServiceToProviderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ایجاد برنامه هفتگی | Create weekly schedule
type CreateWeeklyScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule *WeeklySchedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"` // برنامه زمانی | Weekly schedule
}

func (x *CreateWeeklyScheduleRequest) Reset() {
	*x = CreateWeeklyScheduleRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWeeklyScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWeeklyScheduleRequest) ProtoMessage() {}

func (x *CreateWeeklyScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWeeklyScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateWeeklyScheduleRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{28}
}

func (x *CreateWeeklyScheduleRequest) GetSchedule() *WeeklySchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type CreateWeeklyScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // شناسه برنامه | Schedule ID
}

func (x *CreateWeeklyScheduleResponse) Reset() {
	*x = CreateWeeklyScheduleResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWeeklyScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWeeklyScheduleResponse) ProtoMessage() {}

func (x *CreateWeeklyScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWeeklyScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateWeeklyScheduleResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{29}
}

func (x *CreateWeeklyScheduleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// تولید تایم‌اسلات بر اساس برنامه هفتگی | Generate timeslots from weekly schedule
type GenerateTimeSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeeklyScheduleId string `protobuf:"bytes,1,opt,name=weekly_schedule_id,json=weeklyScheduleId,proto3" json:"weekly_schedule_id,omitempty"` // شناسه برنامه هفتگی | Weekly schedule ID
}

func (x *GenerateTimeSlotsRequest) Reset() {
	*x = GenerateTimeSlotsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTimeSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTimeSlotsRequest) ProtoMessage() {}

func (x *GenerateTimeSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTimeSlotsRequest.ProtoReflect.Descriptor instead.
func (*GenerateTimeSlotsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{30}
}

func (x *GenerateTimeSlotsRequest) GetWeeklyScheduleId() string {
	if x != nil {
		return x.WeeklyScheduleId
	}
	return ""
}

type GenerateTimeSlotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSlots []*TimeSlot `protobuf:"bytes,1,rep,name=time_slots,json=timeSlots,proto3" json:"time_slots,omitempty"` // لیست تایم‌اسلات‌های ایجاد شده | Generated time slots
}

func (x *GenerateTimeSlotsResponse) Reset() {
	*x = GenerateTimeSlotsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTimeSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTimeSlotsResponse) ProtoMessage() {}

func (x *GenerateTimeSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTimeSlotsResponse.ProtoReflect.Descriptor instead.
func (*GenerateTimeSlotsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{31}
}

func (x *GenerateTimeSlotsResponse) GetTimeSlots() []*TimeSlot {
	if x != nil {
		return x.TimeSlots
	}
	return nil
}

// ایجاد رزرو | Create a reservation
type CreateReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // شناسه کاربر رزروکننده | User ID
	ProviderUserId string `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه ارائه‌دهنده | Provider user ID
	ServiceId      string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                  // شناسه سرویس | Service ID
	TimeSlotId     string `protobuf:"bytes,4,opt,name=time_slot_id,json=timeSlotId,proto3" json:"time_slot_id,omitempty"`             // شناسه تایم‌اسلات | TimeSlot ID
	Notes          string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`                                           // یادداشت‌های کاربر | Optional notes
}

func (x *CreateReservationRequest) Reset() {
	*x = CreateReservationRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationRequest) ProtoMessage() {}

func (x *CreateReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{32}
}

func (x *CreateReservationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReservationRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *CreateReservationRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateReservationRequest) GetTimeSlotId() string {
	if x != nil {
		return x.TimeSlotId
	}
	return ""
}

func (x *CreateReservationRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type CreateReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"` // شناسه رزرو | Reservation ID
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                  // پیام موفقیت یا خطا | Success or error message
}

func (x *CreateReservationResponse) Reset() {
	*x = CreateReservationResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationResponse) ProtoMessage() {}

func (x *CreateReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationResponse.ProtoReflect.Descriptor instead.
func (*CreateReservationResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{33}
}

func (x *CreateReservationResponse) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *CreateReservationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// لغو رزرو | Cancel reservation
type CancelReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"` // شناسه رزرو | Reservation ID
}

func (x *CancelReservationRequest) Reset() {
	*x = CancelReservationRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationRequest) ProtoMessage() {}

func (x *CancelReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationRequest.ProtoReflect.Descriptor instead.
func (*CancelReservationRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{34}
}

func (x *CancelReservationRequest) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

type CancelReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت | Success message
}

func (x *CancelReservationResponse) Reset() {
	*x = CancelReservationResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationResponse) ProtoMessage() {}

func (x *CancelReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationResponse.ProtoReflect.Descriptor instead.
func (*CancelReservationResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{35}
}

func (x *CancelReservationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ثبت وضعیت حضور | Mark attendance
type MarkAttendanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string           `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"` // شناسه رزرو | Reservation ID
	Status        AttendanceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=reservation.AttendanceStatus" json:"status,omitempty"` // وضعیت حضور | Attendance status
}

func (x *MarkAttendanceRequest) Reset() {
	*x = MarkAttendanceRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAttendanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAttendanceRequest) ProtoMessage() {}

func (x *MarkAttendanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAttendanceRequest.ProtoReflect.Descriptor instead.
func (*MarkAttendanceRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{36}
}

func (x *MarkAttendanceRequest) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *MarkAttendanceRequest) GetStatus() AttendanceStatus {
	if x != nil {
		return x.Status
	}
	return AttendanceStatus_UNKNOWN_Status
}

type MarkAttendanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت | Success message
}

func (x *MarkAttendanceResponse) Reset() {
	*x = MarkAttendanceResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAttendanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAttendanceResponse) ProtoMessage() {}

func (x *MarkAttendanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAttendanceResponse.ProtoReflect.Descriptor instead.
func (*MarkAttendanceResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{37}
}

func (x *MarkAttendanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// دریافت لیست رزروها | List reservations
type ListReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // شناسه کاربر | User ID
	Status *string `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`         // فیلتر بر اساس وضعیت | Filter by status
}

func (x *ListReservationsRequest) Reset() {
	*x = ListReservationsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReservationsRequest) ProtoMessage() {}

func (x *ListReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReservationsRequest.ProtoReflect.Descriptor instead.
func (*ListReservationsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{38}
}

func (x *ListReservationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListReservationsRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type ListReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservations []*Reservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"` // لیست رزروها | List of reservations
}

func (x *ListReservationsResponse) Reset() {
	*x = ListReservationsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReservationsResponse) ProtoMessage() {}

func (x *ListReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReservationsResponse.ProtoReflect.Descriptor instead.
func (*ListReservationsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{39}
}

func (x *ListReservationsResponse) GetReservations() []*Reservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

// دریافت تایم‌اسلات‌های آزاد | List available time slots
type ListAvailableTimeSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderUserId string                 `protobuf:"bytes,1,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه ارائه‌دهنده | Provider ID
	ServiceId      string                 `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`                  // شناسه سرویس | Service ID
	FacilityId     string                 `protobuf:"bytes,3,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`               // شناسه مکان | Facility ID
	From           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`                                             // از تاریخ | From timestamp
	To             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`                                                 // تا تاریخ | To timestamp
}

func (x *ListAvailableTimeSlotsRequest) Reset() {
	*x = ListAvailableTimeSlotsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableTimeSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableTimeSlotsRequest) ProtoMessage() {}

func (x *ListAvailableTimeSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableTimeSlotsRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableTimeSlotsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{40}
}

func (x *ListAvailableTimeSlotsRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *ListAvailableTimeSlotsRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListAvailableTimeSlotsRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *ListAvailableTimeSlotsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListAvailableTimeSlotsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ListAvailableTimeSlotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSlots []*TimeSlot `protobuf:"bytes,1,rep,name=time_slots,json=timeSlots,proto3" json:"time_slots,omitempty"` // لیست تایم‌اسلات‌های آزاد | List of available time slots
}

func (x *ListAvailableTimeSlotsResponse) Reset() {
	*x = ListAvailableTimeSlotsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableTimeSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableTimeSlotsResponse) ProtoMessage() {}

func (x *ListAvailableTimeSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableTimeSlotsResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableTimeSlotsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{41}
}

func (x *ListAvailableTimeSlotsResponse) GetTimeSlots() []*TimeSlot {
	if x != nil {
		return x.TimeSlots
	}
	return nil
}

type UpdateReservationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string            `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`  // شناسه رزرو | Reservation ID
	Status        ReservationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=reservation.ReservationStatus" json:"status,omitempty"` // وضعیت جدید | New status
}

func (x *UpdateReservationStatusRequest) Reset() {
	*x = UpdateReservationStatusRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationStatusRequest) ProtoMessage() {}

func (x *UpdateReservationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateReservationStatusRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateReservationStatusRequest) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *UpdateReservationStatusRequest) GetStatus() ReservationStatus {
	if x != nil {
		return x.Status
	}
	return ReservationStatus_PENDING
}

type UpdateReservationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *UpdateReservationStatusResponse) Reset() {
	*x = UpdateReservationStatusResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationStatusResponse) ProtoMessage() {}

func (x *UpdateReservationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateReservationStatusResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateReservationStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FaclityFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListFacilitiesRequest) Reset() {
	*x = ListFacilitiesRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFacilitiesRequest) ProtoMessage() {}

func (x *ListFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*ListFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{44}
}

func (x *ListFacilitiesRequest) GetFilter() *FaclityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type FaclityFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId *int64         `protobuf:"varint,1,opt,name=facility_id,json=facilityId,proto3,oneof" json:"facility_id,omitempty"`
	Group      *FacilityGroup `protobuf:"varint,2,opt,name=group,proto3,enum=reservation.FacilityGroup,oneof" json:"group,omitempty"`
	Type       *FacilityType  `protobuf:"varint,3,opt,name=type,proto3,enum=reservation.FacilityType,oneof" json:"type,omitempty"`
	Title      *FacilityTitle `protobuf:"varint,4,opt,name=title,proto3,enum=reservation.FacilityTitle,oneof" json:"title,omitempty"`
}

func (x *FaclityFilter) Reset() {
	*x = FaclityFilter{}
	mi := &file_reservations_reservation_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaclityFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaclityFilter) ProtoMessage() {}

func (x *FaclityFilter) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaclityFilter.ProtoReflect.Descriptor instead.
func (*FaclityFilter) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{45}
}

func (x *FaclityFilter) GetFacilityId() int64 {
	if x != nil && x.FacilityId != nil {
		return *x.FacilityId
	}
	return 0
}

func (x *FaclityFilter) GetGroup() FacilityGroup {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return FacilityGroup_UNKNOWN_GROUP
}

func (x *FaclityFilter) GetType() FacilityType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FacilityType_Facility_BOOKABLE
}

func (x *FaclityFilter) GetTitle() FacilityTitle {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return FacilityTitle_UNKNOWN
}

type ListFacilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facilities []*Facility `protobuf:"bytes,1,rep,name=facilities,proto3" json:"facilities,omitempty"` // لیست فسیلیتی‌ها | List of facilities
}

func (x *ListFacilitiesResponse) Reset() {
	*x = ListFacilitiesResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFacilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFacilitiesResponse) ProtoMessage() {}

func (x *ListFacilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFacilitiesResponse.ProtoReflect.Descriptor instead.
func (*ListFacilitiesResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{46}
}

func (x *ListFacilitiesResponse) GetFacilities() []*Facility {
	if x != nil {
		return x.Facilities
	}
	return nil
}

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId string `protobuf:"bytes,1,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه فسیلیتی | Facility ID
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{47}
}

func (x *ListServicesRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

type ListServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"` // لیست سرویس‌ها | List of services
}

func (x *ListServicesResponse) Reset() {
	*x = ListServicesResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResponse) ProtoMessage() {}

func (x *ListServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResponse.ProtoReflect.Descriptor instead.
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{48}
}

func (x *ListServicesResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// ایجاد عدم دسترسی برای ارائه‌دهنده | Create unavailability for a provider
type CreateProviderUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unavailability *ProviderUnavailability `protobuf:"bytes,1,opt,name=unavailability,proto3" json:"unavailability,omitempty"` // اطلاعات بازه‌ی غیبت | Unavailability data
}

func (x *CreateProviderUnavailabilityRequest) Reset() {
	*x = CreateProviderUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProviderUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderUnavailabilityRequest) ProtoMessage() {}

func (x *CreateProviderUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*CreateProviderUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{49}
}

func (x *CreateProviderUnavailabilityRequest) GetUnavailability() *ProviderUnavailability {
	if x != nil {
		return x.Unavailability
	}
	return nil
}

// پاسخ ایجاد عدم دسترسی | Response for creating unavailability
type CreateProviderUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // شناسه غیبت ثبت‌شده | Created unavailability ID
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *CreateProviderUnavailabilityResponse) Reset() {
	*x = CreateProviderUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProviderUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderUnavailabilityResponse) ProtoMessage() {}

func (x *CreateProviderUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*CreateProviderUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{50}
}

func (x *CreateProviderUnavailabilityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateProviderUnavailabilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// دریافت لیست بازه‌های غیبت ارائه‌دهنده | List unavailability periods for a provider
type ListProviderUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderUserId string                 `protobuf:"bytes,1,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه ارائه‌دهنده | Provider ID
	From           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                                       // فیلتر از تاریخ | Optional from date
	To             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                           // فیلتر تا تاریخ | Optional to date
}

func (x *ListProviderUnavailabilityRequest) Reset() {
	*x = ListProviderUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProviderUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderUnavailabilityRequest) ProtoMessage() {}

func (x *ListProviderUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*ListProviderUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{51}
}

func (x *ListProviderUnavailabilityRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *ListProviderUnavailabilityRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListProviderUnavailabilityRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// پاسخ لیست غیبت‌ها | Response with list of unavailability periods
type ListProviderUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ProviderUnavailability `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // لیست بازه‌های غیبت | List of unavailability items
}

func (x *ListProviderUnavailabilityResponse) Reset() {
	*x = ListProviderUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProviderUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderUnavailabilityResponse) ProtoMessage() {}

func (x *ListProviderUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*ListProviderUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{52}
}

func (x *ListProviderUnavailabilityResponse) GetItems() []*ProviderUnavailability {
	if x != nil {
		return x.Items
	}
	return nil
}

// حذف یک بازه‌ی غیبت | Delete an unavailability period
type DeleteProviderUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // شناسه بازه‌ی غیبت | Unavailability ID
}

func (x *DeleteProviderUnavailabilityRequest) Reset() {
	*x = DeleteProviderUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProviderUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderUnavailabilityRequest) ProtoMessage() {}

func (x *DeleteProviderUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*DeleteProviderUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteProviderUnavailabilityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// پاسخ حذف غیبت | Response for delete request
type DeleteProviderUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // پیام موفقیت یا خطا | Success or error message
}

func (x *DeleteProviderUnavailabilityResponse) Reset() {
	*x = DeleteProviderUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProviderUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderUnavailabilityResponse) ProtoMessage() {}

func (x *DeleteProviderUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*DeleteProviderUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteProviderUnavailabilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ================= RoomType =================
type CreateRoomTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType *RoomType `protobuf:"bytes,1,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"` // اطلاعات نوع اتاق | RoomType info
}

func (x *CreateRoomTypeRequest) Reset() {
	*x = CreateRoomTypeRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomTypeRequest) ProtoMessage() {}

func (x *CreateRoomTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomTypeRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{55}
}

func (x *CreateRoomTypeRequest) GetRoomType() *RoomType {
	if x != nil {
		return x.RoomType
	}
	return nil
}

type CreateRoomTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateRoomTypeResponse) Reset() {
	*x = CreateRoomTypeResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomTypeResponse) ProtoMessage() {}

func (x *CreateRoomTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateRoomTypeResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{56}
}

func (x *CreateRoomTypeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateRoomTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListRoomTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId string `protobuf:"bytes,1,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه هتل | Hotel ID
}

func (x *ListRoomTypesRequest) Reset() {
	*x = ListRoomTypesRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomTypesRequest) ProtoMessage() {}

func (x *ListRoomTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomTypesRequest.ProtoReflect.Descriptor instead.
func (*ListRoomTypesRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{57}
}

func (x *ListRoomTypesRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

type ListRoomTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListRoomTypesResponse) Reset() {
	*x = ListRoomTypesResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomTypesResponse) ProtoMessage() {}

func (x *ListRoomTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomTypesResponse.ProtoReflect.Descriptor instead.
func (*ListRoomTypesResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{58}
}

func (x *ListRoomTypesResponse) GetItems() []*RoomType {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteRoomTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // شناسه نوع اتاق | RoomType ID
}

func (x *DeleteRoomTypeRequest) Reset() {
	*x = DeleteRoomTypeRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomTypeRequest) ProtoMessage() {}

func (x *DeleteRoomTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoomTypeRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteRoomTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRoomTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRoomTypeResponse) Reset() {
	*x = DeleteRoomTypeResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomTypeResponse) ProtoMessage() {}

func (x *DeleteRoomTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoomTypeResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteRoomTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ================= Room =================
type CreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"` // اطلاعات اتاق | Room info
}

func (x *CreateRoomRequest) Reset() {
	*x = CreateRoomRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRequest) ProtoMessage() {}

func (x *CreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{61}
}

func (x *CreateRoomRequest) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

type CreateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateRoomResponse) Reset() {
	*x = CreateRoomResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomResponse) ProtoMessage() {}

func (x *CreateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomResponse.ProtoReflect.Descriptor instead.
func (*CreateRoomResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{62}
}

func (x *CreateRoomResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateRoomResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListRoomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacilityId string `protobuf:"bytes,1,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // شناسه هتل | Hotel ID
}

func (x *ListRoomsRequest) Reset() {
	*x = ListRoomsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomsRequest) ProtoMessage() {}

func (x *ListRoomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomsRequest.ProtoReflect.Descriptor instead.
func (*ListRoomsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{63}
}

func (x *ListRoomsRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

type ListRoomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Room `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListRoomsResponse) Reset() {
	*x = ListRoomsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomsResponse) ProtoMessage() {}

func (x *ListRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomsResponse.ProtoReflect.Descriptor instead.
func (*ListRoomsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{64}
}

func (x *ListRoomsResponse) GetItems() []*Room {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // شناسه اتاق | Room ID
}

func (x *DeleteRoomRequest) Reset() {
	*x = DeleteRoomRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomRequest) ProtoMessage() {}

func (x *DeleteRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoomRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteRoomRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRoomResponse) Reset() {
	*x = DeleteRoomResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomResponse) ProtoMessage() {}

func (x *DeleteRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoomResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteRoomResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ================= RoomImage =================
type AddRoomImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *RoomImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"` // اطلاعات تصویر | Image info
}

func (x *AddRoomImageRequest) Reset() {
	*x = AddRoomImageRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRoomImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRoomImageRequest) ProtoMessage() {}

func (x *AddRoomImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRoomImageRequest.ProtoReflect.Descriptor instead.
func (*AddRoomImageRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{67}
}

func (x *AddRoomImageRequest) GetImage() *RoomImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type AddRoomImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddRoomImageResponse) Reset() {
	*x = AddRoomImageResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRoomImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRoomImageResponse) ProtoMessage() {}

func (x *AddRoomImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRoomImageResponse.ProtoReflect.Descriptor instead.
func (*AddRoomImageResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{68}
}

func (x *AddRoomImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddRoomImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRoomImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // شناسه اتاق | Room ID
}

func (x *GetRoomImagesRequest) Reset() {
	*x = GetRoomImagesRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoomImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomImagesRequest) ProtoMessage() {}

func (x *GetRoomImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomImagesRequest.ProtoReflect.Descriptor instead.
func (*GetRoomImagesRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{69}
}

func (x *GetRoomImagesRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type GetRoomImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomImage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetRoomImagesResponse) Reset() {
	*x = GetRoomImagesResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoomImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomImagesResponse) ProtoMessage() {}

func (x *GetRoomImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomImagesResponse.ProtoReflect.Descriptor instead.
func (*GetRoomImagesResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{70}
}

func (x *GetRoomImagesResponse) GetItems() []*RoomImage {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteRoomImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // شناسه تصویر | Image ID
}

func (x *DeleteRoomImageRequest) Reset() {
	*x = DeleteRoomImageRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomImageRequest) ProtoMessage() {}

func (x *DeleteRoomImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoomImageRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteRoomImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRoomImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteRoomImageResponse) Reset() {
	*x = DeleteRoomImageResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoomImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoomImageResponse) ProtoMessage() {}

func (x *DeleteRoomImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoomImageResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoomImageResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteRoomImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ================= RoomAvailability =================
type CheckRoomAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // شناسه سرویس | Service ID (e.g., room)
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *CheckRoomAvailabilityRequest) Reset() {
	*x = CheckRoomAvailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRoomAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRoomAvailabilityRequest) ProtoMessage() {}

func (x *CheckRoomAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRoomAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*CheckRoomAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{73}
}

func (x *CheckRoomAvailabilityRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CheckRoomAvailabilityRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CheckRoomAvailabilityRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type CheckRoomAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomAvailability `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // وضعیت در دسترس بودن | Availability list
}

func (x *CheckRoomAvailabilityResponse) Reset() {
	*x = CheckRoomAvailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRoomAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRoomAvailabilityResponse) ProtoMessage() {}

func (x *CheckRoomAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRoomAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*CheckRoomAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{74}
}

func (x *CheckRoomAvailabilityResponse) GetItems() []*RoomAvailability {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListRoomAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`
}

func (x *ListRoomAvailabilityRequest) Reset() {
	*x = ListRoomAvailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomAvailabilityRequest) ProtoMessage() {}

func (x *ListRoomAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*ListRoomAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{75}
}

func (x *ListRoomAvailabilityRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListRoomAvailabilityRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListRoomAvailabilityRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ListRoomAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomAvailability `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListRoomAvailabilityResponse) Reset() {
	*x = ListRoomAvailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoomAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoomAvailabilityResponse) ProtoMessage() {}

func (x *ListRoomAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoomAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*ListRoomAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{76}
}

func (x *ListRoomAvailabilityResponse) GetItems() []*RoomAvailability {
	if x != nil {
		return x.Items
	}
	return nil
}

// ================= ServiceUnavailability =================
type CreateServiceUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unavailability *ServiceUnavailability `protobuf:"bytes,1,opt,name=unavailability,proto3" json:"unavailability,omitempty"`
}

func (x *CreateServiceUnavailabilityRequest) Reset() {
	*x = CreateServiceUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceUnavailabilityRequest) ProtoMessage() {}

func (x *CreateServiceUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{77}
}

func (x *CreateServiceUnavailabilityRequest) GetUnavailability() *ServiceUnavailability {
	if x != nil {
		return x.Unavailability
	}
	return nil
}

type CreateServiceUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateServiceUnavailabilityResponse) Reset() {
	*x = CreateServiceUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceUnavailabilityResponse) ProtoMessage() {}

func (x *CreateServiceUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{78}
}

func (x *CreateServiceUnavailabilityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateServiceUnavailabilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListServiceUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`
}

func (x *ListServiceUnavailabilityRequest) Reset() {
	*x = ListServiceUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceUnavailabilityRequest) ProtoMessage() {}

func (x *ListServiceUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*ListServiceUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{79}
}

func (x *ListServiceUnavailabilityRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListServiceUnavailabilityRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListServiceUnavailabilityRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type ListServiceUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ServiceUnavailability `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListServiceUnavailabilityResponse) Reset() {
	*x = ListServiceUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceUnavailabilityResponse) ProtoMessage() {}

func (x *ListServiceUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*ListServiceUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{80}
}

func (x *ListServiceUnavailabilityResponse) GetItems() []*ServiceUnavailability {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteServiceUnavailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteServiceUnavailabilityRequest) Reset() {
	*x = DeleteServiceUnavailabilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceUnavailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceUnavailabilityRequest) ProtoMessage() {}

func (x *DeleteServiceUnavailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceUnavailabilityRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceUnavailabilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteServiceUnavailabilityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteServiceUnavailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteServiceUnavailabilityResponse) Reset() {
	*x = DeleteServiceUnavailabilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceUnavailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceUnavailabilityResponse) ProtoMessage() {}

func (x *DeleteServiceUnavailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceUnavailabilityResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceUnavailabilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteServiceUnavailabilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_reservations_reservation_proto protoreflect.FileDescriptor

var file_reservations_reservation_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x66, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x72, 0x22, 0x8c, 0x02,
	0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x03, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x02, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0xf3, 0x01, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0e,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xc8, 0x04, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x12,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x77, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x0a, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x4c, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x66, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x10,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x22, 0xec, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x9f, 0x05, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x68, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x68, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x41, 0x69, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x68, 0x61, 0x73, 0x5f, 0x74, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x61,
	0x73, 0x54, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x57, 0x69, 0x66, 0x69, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53,
	0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x09,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xaa,
	0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x44, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x37,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x41, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x69, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xb4, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x15,
	0x4d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x7f, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x63,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x01, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x4f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x36, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x22, 0x5f,
	0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x35, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x33, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x40,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x45, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x22, 0x53,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f,
	0x22, 0x5d, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x34, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x27, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0x4d, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x65,
	0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54,
	0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49,
	0x44, 0x41, 0x59, 0x10, 0x06, 0x2a, 0x41, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0xa9, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x41, 0x55, 0x54, 0x59, 0x5f, 0x53, 0x41,
	0x4c, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53,
	0x5f, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x4f, 0x44, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x53, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x45, 0x53, 0x10, 0x0c, 0x2a, 0x9e, 0x0a, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x48, 0x59, 0x53, 0x49, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x41, 0x50, 0x59, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x45, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49,
	0x43, 0x49, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x53,
	0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4f, 0x4c, 0x4f, 0x47,
	0x49, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x55, 0x52, 0x4f, 0x4c, 0x4f,
	0x47, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x52, 0x49, 0x43, 0x49, 0x41, 0x4e, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x52, 0x4d,
	0x41, 0x54, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x52, 0x54, 0x48, 0x4f, 0x50, 0x45, 0x44, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x52, 0x47, 0x45, 0x4f,
	0x4e, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x59, 0x4e, 0x45, 0x43, 0x4f, 0x4c, 0x4f, 0x47,
	0x49, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x59, 0x45, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x11, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x53, 0x59, 0x43, 0x48, 0x49, 0x41, 0x54, 0x52, 0x49, 0x53, 0x54, 0x10, 0x12, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x45, 0x54, 0x49, 0x54, 0x49, 0x41, 0x4e, 0x10, 0x13, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x14, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x4e, 0x43, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x15, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x52, 0x47, 0x45, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e,
	0x45, 0x53, 0x54, 0x48, 0x45, 0x53, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x17,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10,
	0x18, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x45, 0x41, 0x55, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x4c, 0x4f,
	0x4e, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x52, 0x42, 0x45, 0x52, 0x53, 0x48, 0x4f,
	0x50, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x50, 0x41, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x53, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x59, 0x47, 0x49, 0x45, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x59, 0x4d, 0x10, 0x1e, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x57, 0x49, 0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x1f,
	0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x4f, 0x47, 0x41, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x42,
	0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x43, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x24,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x25, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x4b, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x26, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x28, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x29,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x10, 0x2b, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2c, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x4c, 0x41, 0x59, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2d, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x2e, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x4f, 0x54, 0x45, 0x4c, 0x10, 0x2f, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x54, 0x45, 0x4c, 0x10,
	0x30, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x4c, 0x10, 0x31, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4d,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x33, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x34, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x35, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41,
	0x46, 0x45, 0x10, 0x36, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0x37, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4b, 0x45, 0x52, 0x59, 0x10,
	0x38, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x39, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x10, 0x3a, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c,
	0x10, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08,
	0x4c, 0x41, 0x57, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x3e, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x10,
	0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4c, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x49, 0x52, 0x4d, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x41, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x42, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x43, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4e, 0x55, 0x46,
	0x41, 0x43, 0x54, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x44,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x45, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x46, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x47, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52, 0x45, 0x45, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x48, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x49, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x4a, 0x2a, 0x70, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x57,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x49, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10, 0x07,
	0x2a, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x32, 0x8d, 0x1b, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1e,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f,
	0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x7a, 0x35, 0x38, 0x37, 0x34, 0x30, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reservations_reservation_proto_rawDescOnce sync.Once
	file_reservations_reservation_proto_rawDescData = file_reservations_reservation_proto_rawDesc
)

func file_reservations_reservation_proto_rawDescGZIP() []byte {
	file_reservations_reservation_proto_rawDescOnce.Do(func() {
		file_reservations_reservation_proto_rawDescData = protoimpl.X.CompressGZIP(file_reservations_reservation_proto_rawDescData)
	})
	return file_reservations_reservation_proto_rawDescData
}

var file_reservations_reservation_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_reservations_reservation_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_reservations_reservation_proto_goTypes = []any{
	(OwnerType)(0),                               // 0: reservation.OwnerType
	(ReservationStatus)(0),                       // 1: reservation.ReservationStatus
	(WeekDay)(0),                                 // 2: reservation.WeekDay
	(AttendanceStatus)(0),                        // 3: reservation.AttendanceStatus
	(FacilityGroup)(0),                           // 4: reservation.FacilityGroup
	(FacilityTitle)(0),                           // 5: reservation.FacilityTitle
	(FacilityType)(0),                            // 6: reservation.FacilityType
	(RoomTypeCode)(0),                            // 7: reservation.RoomTypeCode
	(Status)(0),                                  // 8: reservation.Status
	(TimeSlot_SlotSource)(0),                     // 9: reservation.TimeSlot.SlotSource
	(*LocalizedString)(nil),                      // 10: reservation.LocalizedString
	(*Facility)(nil),                             // 11: reservation.Facility
	(*Service)(nil),                              // 12: reservation.Service
	(*FacilityImage)(nil),                        // 13: reservation.FacilityImage
	(*ProviderService)(nil),                      // 14: reservation.ProviderService
	(*WeeklySchedule)(nil),                       // 15: reservation.WeeklySchedule
	(*TimeSlot)(nil),                             // 16: reservation.TimeSlot
	(*ProviderUnavailability)(nil),               // 17: reservation.ProviderUnavailability
	(*RoomAvailability)(nil),                     // 18: reservation.RoomAvailability
	(*ServiceUnavailability)(nil),                // 19: reservation.ServiceUnavailability
	(*RoomType)(nil),                             // 20: reservation.RoomType
	(*Room)(nil),                                 // 21: reservation.Room
	(*RoomImage)(nil),                            // 22: reservation.RoomImage
	(*Reservation)(nil),                          // 23: reservation.Reservation
	(*CreateFacilityRequest)(nil),                // 24: reservation.CreateFacilityRequest
	(*CreateFacilityResponse)(nil),               // 25: reservation.CreateFacilityResponse
	(*UpdateFacilityRequest)(nil),                // 26: reservation.UpdateFacilityRequest
	(*UpdateFacilityResponse)(nil),               // 27: reservation.UpdateFacilityResponse
	(*AddFacilityImageRequest)(nil),              // 28: reservation.AddFacilityImageRequest
	(*AddFacilityImageResponse)(nil),             // 29: reservation.AddFacilityImageResponse
	(*DeleteFacilityImageRequest)(nil),           // 30: reservation.DeleteFacilityImageRequest
	(*DeleteFacilityImageResponse)(nil),          // 31: reservation.DeleteFacilityImageResponse
	(*GetFacilityImagesRequest)(nil),             // 32: reservation.GetFacilityImagesRequest
	(*GetFacilityImagesResponse)(nil),            // 33: reservation.GetFacilityImagesResponse
	(*CreateServiceRequest)(nil),                 // 34: reservation.CreateServiceRequest
	(*CreateServiceResponse)(nil),                // 35: reservation.CreateServiceResponse
	(*AssignServiceToProviderRequest)(nil),       // 36: reservation.AssignServiceToProviderRequest
	(*AssignServiceToProviderResponse)(nil),      // 37: reservation.AssignServiceToProviderResponse
	(*CreateWeeklyScheduleRequest)(nil),          // 38: reservation.CreateWeeklyScheduleRequest
	(*CreateWeeklyScheduleResponse)(nil),         // 39: reservation.CreateWeeklyScheduleResponse
	(*GenerateTimeSlotsRequest)(nil),             // 40: reservation.GenerateTimeSlotsRequest
	(*GenerateTimeSlotsResponse)(nil),            // 41: reservation.GenerateTimeSlotsResponse
	(*CreateReservationRequest)(nil),             // 42: reservation.CreateReservationRequest
	(*CreateReservationResponse)(nil),            // 43: reservation.CreateReservationResponse
	(*CancelReservationRequest)(nil),             // 44: reservation.CancelReservationRequest
	(*CancelReservationResponse)(nil),            // 45: reservation.CancelReservationResponse
	(*MarkAttendanceRequest)(nil),                // 46: reservation.MarkAttendanceRequest
	(*MarkAttendanceResponse)(nil),               // 47: reservation.MarkAttendanceResponse
	(*ListReservationsRequest)(nil),              // 48: reservation.ListReservationsRequest
	(*ListReservationsResponse)(nil),             // 49: reservation.ListReservationsResponse
	(*ListAvailableTimeSlotsRequest)(nil),        // 50: reservation.ListAvailableTimeSlotsRequest
	(*ListAvailableTimeSlotsResponse)(nil),       // 51: reservation.ListAvailableTimeSlotsResponse
	(*UpdateReservationStatusRequest)(nil),       // 52: reservation.UpdateReservationStatusRequest
	(*UpdateReservationStatusResponse)(nil),      // 53: reservation.UpdateReservationStatusResponse
	(*ListFacilitiesRequest)(nil),                // 54: reservation.ListFacilitiesRequest
	(*FaclityFilter)(nil),                        // 55: reservation.FaclityFilter
	(*ListFacilitiesResponse)(nil),               // 56: reservation.ListFacilitiesResponse
	(*ListServicesRequest)(nil),                  // 57: reservation.ListServicesRequest
	(*ListServicesResponse)(nil),                 // 58: reservation.ListServicesResponse
	(*CreateProviderUnavailabilityRequest)(nil),  // 59: reservation.CreateProviderUnavailabilityRequest
	(*CreateProviderUnavailabilityResponse)(nil), // 60: reservation.CreateProviderUnavailabilityResponse
	(*ListProviderUnavailabilityRequest)(nil),    // 61: reservation.ListProviderUnavailabilityRequest
	(*ListProviderUnavailabilityResponse)(nil),   // 62: reservation.ListProviderUnavailabilityResponse
	(*DeleteProviderUnavailabilityRequest)(nil),  // 63: reservation.DeleteProviderUnavailabilityRequest
	(*DeleteProviderUnavailabilityResponse)(nil), // 64: reservation.DeleteProviderUnavailabilityResponse
	(*CreateRoomTypeRequest)(nil),                // 65: reservation.CreateRoomTypeRequest
	(*CreateRoomTypeResponse)(nil),               // 66: reservation.CreateRoomTypeResponse
	(*ListRoomTypesRequest)(nil),                 // 67: reservation.ListRoomTypesRequest
	(*ListRoomTypesResponse)(nil),                // 68: reservation.ListRoomTypesResponse
	(*DeleteRoomTypeRequest)(nil),                // 69: reservation.DeleteRoomTypeRequest
	(*DeleteRoomTypeResponse)(nil),               // 70: reservation.DeleteRoomTypeResponse
	(*CreateRoomRequest)(nil),                    // 71: reservation.CreateRoomRequest
	(*CreateRoomResponse)(nil),                   // 72: reservation.CreateRoomResponse
	(*ListRoomsRequest)(nil),                     // 73: reservation.ListRoomsRequest
	(*ListRoomsResponse)(nil),                    // 74: reservation.ListRoomsResponse
	(*DeleteRoomRequest)(nil),                    // 75: reservation.DeleteRoomRequest
	(*DeleteRoomResponse)(nil),                   // 76: reservation.DeleteRoomResponse
	(*AddRoomImageRequest)(nil),                  // 77: reservation.AddRoomImageRequest
	(*AddRoomImageResponse)(nil),                 // 78: reservation.AddRoomImageResponse
	(*GetRoomImagesRequest)(nil),                 // 79: reservation.GetRoomImagesRequest
	(*GetRoomImagesResponse)(nil),                // 80: reservation.GetRoomImagesResponse
	(*DeleteRoomImageRequest)(nil),               // 81: reservation.DeleteRoomImageRequest
	(*DeleteRoomImageResponse)(nil),              // 82: reservation.DeleteRoomImageResponse
	(*CheckRoomAvailabilityRequest)(nil),         // 83: reservation.CheckRoomAvailabilityRequest
	(*CheckRoomAvailabilityResponse)(nil),        // 84: reservation.CheckRoomAvailabilityResponse
	(*ListRoomAvailabilityRequest)(nil),          // 85: reservation.ListRoomAvailabilityRequest
	(*ListRoomAvailabilityResponse)(nil),         // 86: reservation.ListRoomAvailabilityResponse
	(*CreateServiceUnavailabilityRequest)(nil),   // 87: reservation.CreateServiceUnavailabilityRequest
	(*CreateServiceUnavailabilityResponse)(nil),  // 88: reservation.CreateServiceUnavailabilityResponse
	(*ListServiceUnavailabilityRequest)(nil),     // 89: reservation.ListServiceUnavailabilityRequest
	(*ListServiceUnavailabilityResponse)(nil),    // 90: reservation.ListServiceUnavailabilityResponse
	(*DeleteServiceUnavailabilityRequest)(nil),   // 91: reservation.DeleteServiceUnavailabilityRequest
	(*DeleteServiceUnavailabilityResponse)(nil),  // 92: reservation.DeleteServiceUnavailabilityResponse
	(*money.Money)(nil),                          // 93: google.type.Money
	(*users.User)(nil),                           // 94: users.User
	(*timestamppb.Timestamp)(nil),                // 95: google.protobuf.Timestamp
}
var file_reservations_reservation_proto_depIdxs = []int32{
	10,  // 0: reservation.Facility.name:type_name -> reservation.LocalizedString
	5,   // 1: reservation.Facility.title:type_name -> reservation.FacilityTitle
	6,   // 2: reservation.Facility.type:type_name -> reservation.FacilityType
	4,   // 3: reservation.Facility.group:type_name -> reservation.FacilityGroup
	8,   // 4: reservation.Facility.status:type_name -> reservation.Status
	10,  // 5: reservation.Service.name:type_name -> reservation.LocalizedString
	10,  // 6: reservation.Service.description:type_name -> reservation.LocalizedString
	93,  // 7: reservation.Service.default_price:type_name -> google.type.Money
	10,  // 8: reservation.FacilityImage.title:type_name -> reservation.LocalizedString
	10,  // 9: reservation.FacilityImage.description:type_name -> reservation.LocalizedString
	8,   // 10: reservation.FacilityImage.status:type_name -> reservation.Status
	94,  // 11: reservation.ProviderService.provider_user:type_name -> users.User
	93,  // 12: reservation.ProviderService.price:type_name -> google.type.Money
	2,   // 13: reservation.WeeklySchedule.day:type_name -> reservation.WeekDay
	8,   // 14: reservation.WeeklySchedule.status:type_name -> reservation.Status
	95,  // 15: reservation.TimeSlot.start_time:type_name -> google.protobuf.Timestamp
	95,  // 16: reservation.TimeSlot.end_time:type_name -> google.protobuf.Timestamp
	0,   // 17: reservation.TimeSlot.owner_type:type_name -> reservation.OwnerType
	9,   // 18: reservation.TimeSlot.source:type_name -> reservation.TimeSlot.SlotSource
	8,   // 19: reservation.TimeSlot.status:type_name -> reservation.Status
	95,  // 20: reservation.ProviderUnavailability.date:type_name -> google.protobuf.Timestamp
	8,   // 21: reservation.ProviderUnavailability.status:type_name -> reservation.Status
	95,  // 22: reservation.RoomAvailability.date:type_name -> google.protobuf.Timestamp
	94,  // 23: reservation.ServiceUnavailability.provider_user:type_name -> users.User
	95,  // 24: reservation.ServiceUnavailability.from:type_name -> google.protobuf.Timestamp
	95,  // 25: reservation.ServiceUnavailability.to:type_name -> google.protobuf.Timestamp
	7,   // 26: reservation.RoomType.type_code:type_name -> reservation.RoomTypeCode
	10,  // 27: reservation.RoomType.custom_name:type_name -> reservation.LocalizedString
	10,  // 28: reservation.RoomType.description:type_name -> reservation.LocalizedString
	93,  // 29: reservation.RoomType.base_price:type_name -> google.type.Money
	8,   // 30: reservation.RoomType.status:type_name -> reservation.Status
	22,  // 31: reservation.Room.images:type_name -> reservation.RoomImage
	8,   // 32: reservation.Room.status:type_name -> reservation.Status
	10,  // 33: reservation.RoomImage.title:type_name -> reservation.LocalizedString
	10,  // 34: reservation.RoomImage.description:type_name -> reservation.LocalizedString
	8,   // 35: reservation.RoomImage.status:type_name -> reservation.Status
	94,  // 36: reservation.Reservation.user:type_name -> users.User
	1,   // 37: reservation.Reservation.status:type_name -> reservation.ReservationStatus
	95,  // 38: reservation.Reservation.created_at:type_name -> google.protobuf.Timestamp
	10,  // 39: reservation.CreateFacilityRequest.name:type_name -> reservation.LocalizedString
	5,   // 40: reservation.CreateFacilityRequest.title:type_name -> reservation.FacilityTitle
	6,   // 41: reservation.CreateFacilityRequest.type:type_name -> reservation.FacilityType
	4,   // 42: reservation.CreateFacilityRequest.group:type_name -> reservation.FacilityGroup
	8,   // 43: reservation.CreateFacilityRequest.status:type_name -> reservation.Status
	11,  // 44: reservation.CreateFacilityResponse.facility:type_name -> reservation.Facility
	10,  // 45: reservation.UpdateFacilityRequest.name:type_name -> reservation.LocalizedString
	5,   // 46: reservation.UpdateFacilityRequest.title:type_name -> reservation.FacilityTitle
	6,   // 47: reservation.UpdateFacilityRequest.type:type_name -> reservation.FacilityType
	4,   // 48: reservation.UpdateFacilityRequest.group:type_name -> reservation.FacilityGroup
	8,   // 49: reservation.UpdateFacilityRequest.status:type_name -> reservation.Status
	11,  // 50: reservation.UpdateFacilityResponse.facility:type_name -> reservation.Facility
	13,  // 51: reservation.AddFacilityImageRequest.image:type_name -> reservation.FacilityImage
	13,  // 52: reservation.GetFacilityImagesResponse.images:type_name -> reservation.FacilityImage
	12,  // 53: reservation.CreateServiceRequest.service:type_name -> reservation.Service
	15,  // 54: reservation.CreateWeeklyScheduleRequest.schedule:type_name -> reservation.WeeklySchedule
	16,  // 55: reservation.GenerateTimeSlotsResponse.time_slots:type_name -> reservation.TimeSlot
	3,   // 56: reservation.MarkAttendanceRequest.status:type_name -> reservation.AttendanceStatus
	23,  // 57: reservation.ListReservationsResponse.reservations:type_name -> reservation.Reservation
	95,  // 58: reservation.ListAvailableTimeSlotsRequest.from:type_name -> google.protobuf.Timestamp
	95,  // 59: reservation.ListAvailableTimeSlotsRequest.to:type_name -> google.protobuf.Timestamp
	16,  // 60: reservation.ListAvailableTimeSlotsResponse.time_slots:type_name -> reservation.TimeSlot
	1,   // 61: reservation.UpdateReservationStatusRequest.status:type_name -> reservation.ReservationStatus
	55,  // 62: reservation.ListFacilitiesRequest.filter:type_name -> reservation.FaclityFilter
	4,   // 63: reservation.FaclityFilter.group:type_name -> reservation.FacilityGroup
	6,   // 64: reservation.FaclityFilter.type:type_name -> reservation.FacilityType
	5,   // 65: reservation.FaclityFilter.title:type_name -> reservation.FacilityTitle
	11,  // 66: reservation.ListFacilitiesResponse.facilities:type_name -> reservation.Facility
	12,  // 67: reservation.ListServicesResponse.services:type_name -> reservation.Service
	17,  // 68: reservation.CreateProviderUnavailabilityRequest.unavailability:type_name -> reservation.ProviderUnavailability
	95,  // 69: reservation.ListProviderUnavailabilityRequest.from:type_name -> google.protobuf.Timestamp
	95,  // 70: reservation.ListProviderUnavailabilityRequest.to:type_name -> google.protobuf.Timestamp
	17,  // 71: reservation.ListProviderUnavailabilityResponse.items:type_name -> reservation.ProviderUnavailability
	20,  // 72: reservation.CreateRoomTypeRequest.room_type:type_name -> reservation.RoomType
	20,  // 73: reservation.ListRoomTypesResponse.items:type_name -> reservation.RoomType
	21,  // 74: reservation.CreateRoomRequest.room:type_name -> reservation.Room
	21,  // 75: reservation.ListRoomsResponse.items:type_name -> reservation.Room
	22,  // 76: reservation.AddRoomImageRequest.image:type_name -> reservation.RoomImage
	22,  // 77: reservation.GetRoomImagesResponse.items:type_name -> reservation.RoomImage
	95,  // 78: reservation.CheckRoomAvailabilityRequest.from:type_name -> google.protobuf.Timestamp
	95,  // 79: reservation.CheckRoomAvailabilityRequest.to:type_name -> google.protobuf.Timestamp
	18,  // 80: reservation.CheckRoomAvailabilityResponse.items:type_name -> reservation.RoomAvailability
	95,  // 81: reservation.ListRoomAvailabilityRequest.from:type_name -> google.protobuf.Timestamp
	95,  // 82: reservation.ListRoomAvailabilityRequest.to:type_name -> google.protobuf.Timestamp
	18,  // 83: reservation.ListRoomAvailabilityResponse.items:type_name -> reservation.RoomAvailability
	19,  // 84: reservation.CreateServiceUnavailabilityRequest.unavailability:type_name -> reservation.ServiceUnavailability
	95,  // 85: reservation.ListServiceUnavailabilityRequest.from:type_name -> google.protobuf.Timestamp
	95,  // 86: reservation.ListServiceUnavailabilityRequest.to:type_name -> google.protobuf.Timestamp
	19,  // 87: reservation.ListServiceUnavailabilityResponse.items:type_name -> reservation.ServiceUnavailability
	24,  // 88: reservation.ReservationService.CreateFacility:input_type -> reservation.CreateFacilityRequest
	26,  // 89: reservation.ReservationService.UpdateFacility:input_type -> reservation.UpdateFacilityRequest
	54,  // 90: reservation.ReservationService.ListFacilities:input_type -> reservation.ListFacilitiesRequest
	13,  // 91: reservation.ReservationService.AddFacilityImage:input_type -> reservation.FacilityImage
	30,  // 92: reservation.ReservationService.DeleteFacilityImage:input_type -> reservation.DeleteFacilityImageRequest
	32,  // 93: reservation.ReservationService.GetFacilityImages:input_type -> reservation.GetFacilityImagesRequest
	34,  // 94: reservation.ReservationService.CreateService:input_type -> reservation.CreateServiceRequest
	36,  // 95: reservation.ReservationService.AssignServiceToProvider:input_type -> reservation.AssignServiceToProviderRequest
	38,  // 96: reservation.ReservationService.CreateWeeklySchedule:input_type -> reservation.CreateWeeklyScheduleRequest
	40,  // 97: reservation.ReservationService.GenerateTimeSlots:input_type -> reservation.GenerateTimeSlotsRequest
	42,  // 98: reservation.ReservationService.CreateReservation:input_type -> reservation.CreateReservationRequest
	44,  // 99: reservation.ReservationService.CancelReservation:input_type -> reservation.CancelReservationRequest
	52,  // 100: reservation.ReservationService.UpdateReservationStatus:input_type -> reservation.UpdateReservationStatusRequest
	46,  // 101: reservation.ReservationService.MarkAttendance:input_type -> reservation.MarkAttendanceRequest
	48,  // 102: reservation.ReservationService.ListReservations:input_type -> reservation.ListReservationsRequest
	50,  // 103: reservation.ReservationService.ListAvailableTimeSlots:input_type -> reservation.ListAvailableTimeSlotsRequest
	57,  // 104: reservation.ReservationService.ListServices:input_type -> reservation.ListServicesRequest
	59,  // 105: reservation.ReservationService.CreateProviderUnavailability:input_type -> reservation.CreateProviderUnavailabilityRequest
	61,  // 106: reservation.ReservationService.ListProviderUnavailability:input_type -> reservation.ListProviderUnavailabilityRequest
	63,  // 107: reservation.ReservationService.DeleteProviderUnavailability:input_type -> reservation.DeleteProviderUnavailabilityRequest
	65,  // 108: reservation.ReservationService.CreateRoomType:input_type -> reservation.CreateRoomTypeRequest
	67,  // 109: reservation.ReservationService.ListRoomTypes:input_type -> reservation.ListRoomTypesRequest
	69,  // 110: reservation.ReservationService.DeleteRoomType:input_type -> reservation.DeleteRoomTypeRequest
	71,  // 111: reservation.ReservationService.CreateRoom:input_type -> reservation.CreateRoomRequest
	73,  // 112: reservation.ReservationService.ListRooms:input_type -> reservation.ListRoomsRequest
	75,  // 113: reservation.ReservationService.DeleteRoom:input_type -> reservation.DeleteRoomRequest
	77,  // 114: reservation.ReservationService.AddRoomImage:input_type -> reservation.AddRoomImageRequest
	79,  // 115: reservation.ReservationService.GetRoomImages:input_type -> reservation.GetRoomImagesRequest
	81,  // 116: reservation.ReservationService.DeleteRoomImage:input_type -> reservation.DeleteRoomImageRequest
	83,  // 117: reservation.ReservationService.CheckRoomAvailability:input_type -> reservation.CheckRoomAvailabilityRequest
	85,  // 118: reservation.ReservationService.ListRoomAvailability:input_type -> reservation.ListRoomAvailabilityRequest
	87,  // 119: reservation.ReservationService.CreateServiceUnavailability:input_type -> reservation.CreateServiceUnavailabilityRequest
	89,  // 120: reservation.ReservationService.ListServiceUnavailability:input_type -> reservation.ListServiceUnavailabilityRequest
	91,  // 121: reservation.ReservationService.DeleteServiceUnavailability:input_type -> reservation.DeleteServiceUnavailabilityRequest
	25,  // 122: reservation.ReservationService.CreateFacility:output_type -> reservation.CreateFacilityResponse
	27,  // 123: reservation.ReservationService.UpdateFacility:output_type -> reservation.UpdateFacilityResponse
	56,  // 124: reservation.ReservationService.ListFacilities:output_type -> reservation.ListFacilitiesResponse
	13,  // 125: reservation.ReservationService.AddFacilityImage:output_type -> reservation.FacilityImage
	31,  // 126: reservation.ReservationService.DeleteFacilityImage:output_type -> reservation.DeleteFacilityImageResponse
	33,  // 127: reservation.ReservationService.GetFacilityImages:output_type -> reservation.GetFacilityImagesResponse
	35,  // 128: reservation.ReservationService.CreateService:output_type -> reservation.CreateServiceResponse
	37,  // 129: reservation.ReservationService.AssignServiceToProvider:output_type -> reservation.AssignServiceToProviderResponse
	39,  // 130: reservation.ReservationService.CreateWeeklySchedule:output_type -> reservation.CreateWeeklyScheduleResponse
	41,  // 131: reservation.ReservationService.GenerateTimeSlots:output_type -> reservation.GenerateTimeSlotsResponse
	43,  // 132: reservation.ReservationService.CreateReservation:output_type -> reservation.CreateReservationResponse
	45,  // 133: reservation.ReservationService.CancelReservation:output_type -> reservation.CancelReservationResponse
	53,  // 134: reservation.ReservationService.UpdateReservationStatus:output_type -> reservation.UpdateReservationStatusResponse
	47,  // 135: reservation.ReservationService.MarkAttendance:output_type -> reservation.MarkAttendanceResponse
	49,  // 136: reservation.ReservationService.ListReservations:output_type -> reservation.ListReservationsResponse
	51,  // 137: reservation.ReservationService.ListAvailableTimeSlots:output_type -> reservation.ListAvailableTimeSlotsResponse
	58,  // 138: reservation.ReservationService.ListServices:output_type -> reservation.ListServicesResponse
	60,  // 139: reservation.ReservationService.CreateProviderUnavailability:output_type -> reservation.CreateProviderUnavailabilityResponse
	62,  // 140: reservation.ReservationService.ListProviderUnavailability:output_type -> reservation.ListProviderUnavailabilityResponse
	64,  // 141: reservation.ReservationService.DeleteProviderUnavailability:output_type -> reservation.DeleteProviderUnavailabilityResponse
	66,  // 142: reservation.ReservationService.CreateRoomType:output_type -> reservation.CreateRoomTypeResponse
	68,  // 143: reservation.ReservationService.ListRoomTypes:output_type -> reservation.ListRoomTypesResponse
	70,  // 144: reservation.ReservationService.DeleteRoomType:output_type -> reservation.DeleteRoomTypeResponse
	72,  // 145: reservation.ReservationService.CreateRoom:output_type -> reservation.CreateRoomResponse
	74,  // 146: reservation.ReservationService.ListRooms:output_type -> reservation.ListRoomsResponse
	76,  // 147: reservation.ReservationService.DeleteRoom:output_type -> reservation.DeleteRoomResponse
	78,  // 148: reservation.ReservationService.AddRoomImage:output_type -> reservation.AddRoomImageResponse
	80,  // 149: reservation.ReservationService.GetRoomImages:output_type -> reservation.GetRoomImagesResponse
	82,  // 150: reservation.ReservationService.DeleteRoomImage:output_type -> reservation.DeleteRoomImageResponse
	84,  // 151: reservation.ReservationService.CheckRoomAvailability:output_type -> reservation.CheckRoomAvailabilityResponse
	86,  // 152: reservation.ReservationService.ListRoomAvailability:output_type -> reservation.ListRoomAvailabilityResponse
	88,  // 153: reservation.ReservationService.CreateServiceUnavailability:output_type -> reservation.CreateServiceUnavailabilityResponse
	90,  // 154: reservation.ReservationService.ListServiceUnavailability:output_type -> reservation.ListServiceUnavailabilityResponse
	92,  // 155: reservation.ReservationService.DeleteServiceUnavailability:output_type -> reservation.DeleteServiceUnavailabilityResponse
	122, // [122:156] is the sub-list for method output_type
	88,  // [88:122] is the sub-list for method input_type
	88,  // [88:88] is the sub-list for extension type_name
	88,  // [88:88] is the sub-list for extension extendee
	0,   // [0:88] is the sub-list for field type_name
}

func init() { file_reservations_reservation_proto_init() }
func file_reservations_reservation_proto_init() {
	if File_reservations_reservation_proto != nil {
		return
	}
	file_reservations_reservation_proto_msgTypes[2].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[4].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[5].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[6].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[7].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[10].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[38].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[45].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[51].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[75].OneofWrappers = []any{}
	file_reservations_reservation_proto_msgTypes[79].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reservations_reservation_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reservations_reservation_proto_goTypes,
		DependencyIndexes: file_reservations_reservation_proto_depIdxs,
		EnumInfos:         file_reservations_reservation_proto_enumTypes,
		MessageInfos:      file_reservations_reservation_proto_msgTypes,
	}.Build()
	File_reservations_reservation_proto = out.File
	file_reservations_reservation_proto_rawDesc = nil
	file_reservations_reservation_proto_goTypes = nil
	file_reservations_reservation_proto_depIdxs = nil
}
