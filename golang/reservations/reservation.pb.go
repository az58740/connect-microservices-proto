// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: reservations/reservation.proto

package reservation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// نوع مالک تایم‌اسلات — تعیین می‌کند که تایم‌اسلات متعلق به فرد است یا فضای مشترک
// TimeSlot owner type — defines whether it's owned by an individual (e.g., doctor) or shared (e.g., room)
type OwnerType int32

const (
	OwnerType_INDIVIDUAL OwnerType = 0 // شخصی (مانند پزشک یا آرایشگر)
	OwnerType_SHARED     OwnerType = 1 // اشتراکی (مانند میز یا سالن)
)

// Enum value maps for OwnerType.
var (
	OwnerType_name = map[int32]string{
		0: "INDIVIDUAL",
		1: "SHARED",
	}
	OwnerType_value = map[string]int32{
		"INDIVIDUAL": 0,
		"SHARED":     1,
	}
)

func (x OwnerType) Enum() *OwnerType {
	p := new(OwnerType)
	*p = x
	return p
}

func (x OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[0].Descriptor()
}

func (OwnerType) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[0]
}

func (x OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerType.Descriptor instead.
func (OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{0}
}

// وضعیت رزرو
// Reservation status
type ReservationStatus int32

const (
	ReservationStatus_PENDING   ReservationStatus = 0 // در انتظار تأیید
	ReservationStatus_CONFIRMED ReservationStatus = 1 // تأیید شده
	ReservationStatus_CANCELLED ReservationStatus = 2 // لغو شده
	ReservationStatus_COMPLETED ReservationStatus = 3 // انجام شده
)

// Enum value maps for ReservationStatus.
var (
	ReservationStatus_name = map[int32]string{
		0: "PENDING",
		1: "CONFIRMED",
		2: "CANCELLED",
		3: "COMPLETED",
	}
	ReservationStatus_value = map[string]int32{
		"PENDING":   0,
		"CONFIRMED": 1,
		"CANCELLED": 2,
		"COMPLETED": 3,
	}
)

func (x ReservationStatus) Enum() *ReservationStatus {
	p := new(ReservationStatus)
	*p = x
	return p
}

func (x ReservationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[1].Descriptor()
}

func (ReservationStatus) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[1]
}

func (x ReservationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationStatus.Descriptor instead.
func (ReservationStatus) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{1}
}

// روزهای هفته
// Days of the week
type WeekDay int32

const (
	WeekDay_SATURDAY  WeekDay = 0
	WeekDay_SUNDAY    WeekDay = 1
	WeekDay_MONDAY    WeekDay = 2
	WeekDay_TUESDAY   WeekDay = 3
	WeekDay_WEDNESDAY WeekDay = 4
	WeekDay_THURSDAY  WeekDay = 5
	WeekDay_FRIDAY    WeekDay = 6
)

// Enum value maps for WeekDay.
var (
	WeekDay_name = map[int32]string{
		0: "SATURDAY",
		1: "SUNDAY",
		2: "MONDAY",
		3: "TUESDAY",
		4: "WEDNESDAY",
		5: "THURSDAY",
		6: "FRIDAY",
	}
	WeekDay_value = map[string]int32{
		"SATURDAY":  0,
		"SUNDAY":    1,
		"MONDAY":    2,
		"TUESDAY":   3,
		"WEDNESDAY": 4,
		"THURSDAY":  5,
		"FRIDAY":    6,
	}
)

func (x WeekDay) Enum() *WeekDay {
	p := new(WeekDay)
	*p = x
	return p
}

func (x WeekDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeekDay) Descriptor() protoreflect.EnumDescriptor {
	return file_reservations_reservation_proto_enumTypes[2].Descriptor()
}

func (WeekDay) Type() protoreflect.EnumType {
	return &file_reservations_reservation_proto_enumTypes[2]
}

func (x WeekDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeekDay.Descriptor instead.
func (WeekDay) EnumDescriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{2}
}

// فسیلیتی یا مکان — مانند مطب، آرایشگاه، هتل، باشگاه
// Facility such as a clinic, salon, hotel, or gym
type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                        // شناسه یکتا | Unique facility ID
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                    // نام مکان | Name of the facility
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                      // توضیحات | Description
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                    // نوع فسیلیتی مانند "SALON", "HOTEL", "CLINIC" | Type of the facility
	OwnerUserId string `protobuf:"bytes,5,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"` // شناسه کاربر صاحب فسیلیتی | User ID of the facility owner
}

func (x *Facility) Reset() {
	*x = Facility{}
	mi := &file_reservations_reservation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{0}
}

func (x *Facility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Facility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Facility) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Facility) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Facility) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

// سرویس یا خدمت قابل ارائه در فسیلیتی
// Service offered in a facility
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                   // شناسه یکتا | Unique service ID
	FacilityId      string  `protobuf:"bytes,2,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`                 // شناسه فسیلیتی | Associated facility ID
	Name            string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                               // نام سرویس مانند "کوتاهی مو" یا "ویزیت عمومی" | Service name
	Description     string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                 // توضیحات | Description
	DurationMinutes int32   `protobuf:"varint,5,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"` // مدت زمان سرویس به دقیقه | Duration in minutes
	Price           float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                                           // قیمت سرویس | Service price
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_reservations_reservation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Service) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Service) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// نگاشت بین سرویس و ارائه‌دهنده خاص
// Mapping of service to a specific provider
type ProviderService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceId      string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProviderUserId string `protobuf:"bytes,3,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // شناسه کاربر ارائه‌دهنده (مثل پزشک یا آرایشگر)
	IsAvailable    bool   `protobuf:"varint,4,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`           // آیا ارائه می‌شود یا نه
}

func (x *ProviderService) Reset() {
	*x = ProviderService{}
	mi := &file_reservations_reservation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderService) ProtoMessage() {}

func (x *ProviderService) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderService.ProtoReflect.Descriptor instead.
func (*ProviderService) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{2}
}

func (x *ProviderService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProviderService) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ProviderService) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *ProviderService) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

// برنامه‌ زمانی تکرارشونده‌ی سرویس‌دهنده در یک روز خاص
// Weekly repeating schedule for a provider
type WeeklySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderUserId string  `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	Day            WeekDay `protobuf:"varint,3,opt,name=day,proto3,enum=reservation.WeekDay" json:"day,omitempty"`       // روز هفته
	StartTime      string  `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`    // ساعت شروع (مانند "09:00")
	EndTime        string  `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`          // ساعت پایان (مانند "17:00")
	FacilityId     string  `protobuf:"bytes,6,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"` // مکان مرتبط
	ServiceId      string  `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`    // سرویس مرتبط (اختیاری)
}

func (x *WeeklySchedule) Reset() {
	*x = WeeklySchedule{}
	mi := &file_reservations_reservation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklySchedule) ProtoMessage() {}

func (x *WeeklySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklySchedule.ProtoReflect.Descriptor instead.
func (*WeeklySchedule) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{3}
}

func (x *WeeklySchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WeeklySchedule) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *WeeklySchedule) GetDay() WeekDay {
	if x != nil {
		return x.Day
	}
	return WeekDay_SATURDAY
}

func (x *WeeklySchedule) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *WeeklySchedule) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *WeeklySchedule) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *WeeklySchedule) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// تایم‌اسلات — بازه‌ زمانی دقیق رزرو
// TimeSlot — precise slot available for reservation
type TimeSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderUserId   string                 `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OwnerType        OwnerType              `protobuf:"varint,5,opt,name=owner_type,json=ownerType,proto3,enum=reservation.OwnerType" json:"owner_type,omitempty"`
	IsReserved       bool                   `protobuf:"varint,6,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`
	WeeklyScheduleId string                 `protobuf:"bytes,7,opt,name=weekly_schedule_id,json=weeklyScheduleId,proto3" json:"weekly_schedule_id,omitempty"`
	FacilityId       string                 `protobuf:"bytes,8,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	ServiceId        string                 `protobuf:"bytes,9,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *TimeSlot) Reset() {
	*x = TimeSlot{}
	mi := &file_reservations_reservation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSlot) ProtoMessage() {}

func (x *TimeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSlot.ProtoReflect.Descriptor instead.
func (*TimeSlot) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{4}
}

func (x *TimeSlot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimeSlot) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *TimeSlot) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeSlot) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeSlot) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_INDIVIDUAL
}

func (x *TimeSlot) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

func (x *TimeSlot) GetWeeklyScheduleId() string {
	if x != nil {
		return x.WeeklyScheduleId
	}
	return ""
}

func (x *TimeSlot) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *TimeSlot) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// رزرو ثبت‌شده توسط کاربر
// Reservation made by user
type Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // کاربر رزروکننده
	ProviderUserId string                 `protobuf:"bytes,3,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"` // سرویس‌دهنده
	ServiceId      string                 `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	FacilityId     string                 `protobuf:"bytes,5,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	TimeSlotId     string                 `protobuf:"bytes,6,opt,name=time_slot_id,json=timeSlotId,proto3" json:"time_slot_id,omitempty"`
	Status         ReservationStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=reservation.ReservationStatus" json:"status,omitempty"`
	Notes          string                 `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	mi := &file_reservations_reservation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{5}
}

func (x *Reservation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reservation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reservation) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *Reservation) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Reservation) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

func (x *Reservation) GetTimeSlotId() string {
	if x != nil {
		return x.TimeSlotId
	}
	return ""
}

func (x *Reservation) GetStatus() ReservationStatus {
	if x != nil {
		return x.Status
	}
	return ReservationStatus_PENDING
}

func (x *Reservation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Reservation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CreateFacilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facility *Facility `protobuf:"bytes,1,opt,name=facility,proto3" json:"facility,omitempty"`
}

func (x *CreateFacilityRequest) Reset() {
	*x = CreateFacilityRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFacilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFacilityRequest) ProtoMessage() {}

func (x *CreateFacilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFacilityRequest.ProtoReflect.Descriptor instead.
func (*CreateFacilityRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFacilityRequest) GetFacility() *Facility {
	if x != nil {
		return x.Facility
	}
	return nil
}

type CreateFacilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateFacilityResponse) Reset() {
	*x = CreateFacilityResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFacilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFacilityResponse) ProtoMessage() {}

func (x *CreateFacilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFacilityResponse.ProtoReflect.Descriptor instead.
func (*CreateFacilityResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFacilityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateFacilityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *CreateServiceRequest) Reset() {
	*x = CreateServiceRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceRequest) ProtoMessage() {}

func (x *CreateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{8}
}

func (x *CreateServiceRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type CreateServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateServiceResponse) Reset() {
	*x = CreateServiceResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceResponse) ProtoMessage() {}

func (x *CreateServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{9}
}

func (x *CreateServiceResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateServiceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AssignServiceToProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId      string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProviderUserId string `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
}

func (x *AssignServiceToProviderRequest) Reset() {
	*x = AssignServiceToProviderRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignServiceToProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignServiceToProviderRequest) ProtoMessage() {}

func (x *AssignServiceToProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignServiceToProviderRequest.ProtoReflect.Descriptor instead.
func (*AssignServiceToProviderRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{10}
}

func (x *AssignServiceToProviderRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *AssignServiceToProviderRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

type AssignServiceToProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AssignServiceToProviderResponse) Reset() {
	*x = AssignServiceToProviderResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignServiceToProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignServiceToProviderResponse) ProtoMessage() {}

func (x *AssignServiceToProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignServiceToProviderResponse.ProtoReflect.Descriptor instead.
func (*AssignServiceToProviderResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{11}
}

func (x *AssignServiceToProviderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateWeeklyScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule *WeeklySchedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *CreateWeeklyScheduleRequest) Reset() {
	*x = CreateWeeklyScheduleRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWeeklyScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWeeklyScheduleRequest) ProtoMessage() {}

func (x *CreateWeeklyScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWeeklyScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateWeeklyScheduleRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{12}
}

func (x *CreateWeeklyScheduleRequest) GetSchedule() *WeeklySchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type CreateWeeklyScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateWeeklyScheduleResponse) Reset() {
	*x = CreateWeeklyScheduleResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWeeklyScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWeeklyScheduleResponse) ProtoMessage() {}

func (x *CreateWeeklyScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWeeklyScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateWeeklyScheduleResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{13}
}

func (x *CreateWeeklyScheduleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GenerateTimeSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeeklyScheduleId string `protobuf:"bytes,1,opt,name=weekly_schedule_id,json=weeklyScheduleId,proto3" json:"weekly_schedule_id,omitempty"`
}

func (x *GenerateTimeSlotsRequest) Reset() {
	*x = GenerateTimeSlotsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTimeSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTimeSlotsRequest) ProtoMessage() {}

func (x *GenerateTimeSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTimeSlotsRequest.ProtoReflect.Descriptor instead.
func (*GenerateTimeSlotsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateTimeSlotsRequest) GetWeeklyScheduleId() string {
	if x != nil {
		return x.WeeklyScheduleId
	}
	return ""
}

type GenerateTimeSlotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSlots []*TimeSlot `protobuf:"bytes,1,rep,name=time_slots,json=timeSlots,proto3" json:"time_slots,omitempty"`
}

func (x *GenerateTimeSlotsResponse) Reset() {
	*x = GenerateTimeSlotsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTimeSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTimeSlotsResponse) ProtoMessage() {}

func (x *GenerateTimeSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTimeSlotsResponse.ProtoReflect.Descriptor instead.
func (*GenerateTimeSlotsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateTimeSlotsResponse) GetTimeSlots() []*TimeSlot {
	if x != nil {
		return x.TimeSlots
	}
	return nil
}

type CreateReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProviderUserId string `protobuf:"bytes,2,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	ServiceId      string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TimeSlotId     string `protobuf:"bytes,4,opt,name=time_slot_id,json=timeSlotId,proto3" json:"time_slot_id,omitempty"`
	Notes          string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *CreateReservationRequest) Reset() {
	*x = CreateReservationRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationRequest) ProtoMessage() {}

func (x *CreateReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{16}
}

func (x *CreateReservationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReservationRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *CreateReservationRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateReservationRequest) GetTimeSlotId() string {
	if x != nil {
		return x.TimeSlotId
	}
	return ""
}

func (x *CreateReservationRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type CreateReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateReservationResponse) Reset() {
	*x = CreateReservationResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationResponse) ProtoMessage() {}

func (x *CreateReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationResponse.ProtoReflect.Descriptor instead.
func (*CreateReservationResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{17}
}

func (x *CreateReservationResponse) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *CreateReservationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId string `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
}

func (x *CancelReservationRequest) Reset() {
	*x = CancelReservationRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationRequest) ProtoMessage() {}

func (x *CancelReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationRequest.ProtoReflect.Descriptor instead.
func (*CancelReservationRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{18}
}

func (x *CancelReservationRequest) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

type CancelReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelReservationResponse) Reset() {
	*x = CancelReservationResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationResponse) ProtoMessage() {}

func (x *CancelReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationResponse.ProtoReflect.Descriptor instead.
func (*CancelReservationResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{19}
}

func (x *CancelReservationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status *string `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *ListReservationsRequest) Reset() {
	*x = ListReservationsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReservationsRequest) ProtoMessage() {}

func (x *ListReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReservationsRequest.ProtoReflect.Descriptor instead.
func (*ListReservationsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{20}
}

func (x *ListReservationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListReservationsRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type ListReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservations []*Reservation `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *ListReservationsResponse) Reset() {
	*x = ListReservationsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReservationsResponse) ProtoMessage() {}

func (x *ListReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReservationsResponse.ProtoReflect.Descriptor instead.
func (*ListReservationsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{21}
}

func (x *ListReservationsResponse) GetReservations() []*Reservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type ListAvailableTimeSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderUserId string `protobuf:"bytes,1,opt,name=provider_user_id,json=providerUserId,proto3" json:"provider_user_id,omitempty"`
	ServiceId      string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	FacilityId     string `protobuf:"bytes,3,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
}

func (x *ListAvailableTimeSlotsRequest) Reset() {
	*x = ListAvailableTimeSlotsRequest{}
	mi := &file_reservations_reservation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableTimeSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableTimeSlotsRequest) ProtoMessage() {}

func (x *ListAvailableTimeSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableTimeSlotsRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableTimeSlotsRequest) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{22}
}

func (x *ListAvailableTimeSlotsRequest) GetProviderUserId() string {
	if x != nil {
		return x.ProviderUserId
	}
	return ""
}

func (x *ListAvailableTimeSlotsRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ListAvailableTimeSlotsRequest) GetFacilityId() string {
	if x != nil {
		return x.FacilityId
	}
	return ""
}

type ListAvailableTimeSlotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSlots []*TimeSlot `protobuf:"bytes,1,rep,name=time_slots,json=timeSlots,proto3" json:"time_slots,omitempty"`
}

func (x *ListAvailableTimeSlotsResponse) Reset() {
	*x = ListAvailableTimeSlotsResponse{}
	mi := &file_reservations_reservation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableTimeSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableTimeSlotsResponse) ProtoMessage() {}

func (x *ListAvailableTimeSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reservations_reservation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableTimeSlotsResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableTimeSlotsResponse) Descriptor() ([]byte, []int) {
	return file_reservations_reservation_proto_rawDescGZIP(), []int{23}
}

func (x *ListAvailableTimeSlotsResponse) GetTimeSlots() []*TimeSlot {
	if x != nil {
		return x.TimeSlots
	}
	return nil
}

var File_reservations_reservation_proto protoreflect.FileDescriptor

var file_reservations_reservation_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88,
	0x01, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xec, 0x01,
	0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xcb, 0x02, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4a, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3b, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x5a, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2a, 0x27, 0x0a, 0x09, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56,
	0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x65, 0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x06, 0x32, 0xaa, 0x07, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x7a, 0x35, 0x38, 0x37, 0x34, 0x30, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reservations_reservation_proto_rawDescOnce sync.Once
	file_reservations_reservation_proto_rawDescData = file_reservations_reservation_proto_rawDesc
)

func file_reservations_reservation_proto_rawDescGZIP() []byte {
	file_reservations_reservation_proto_rawDescOnce.Do(func() {
		file_reservations_reservation_proto_rawDescData = protoimpl.X.CompressGZIP(file_reservations_reservation_proto_rawDescData)
	})
	return file_reservations_reservation_proto_rawDescData
}

var file_reservations_reservation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_reservations_reservation_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_reservations_reservation_proto_goTypes = []any{
	(OwnerType)(0),                          // 0: reservation.OwnerType
	(ReservationStatus)(0),                  // 1: reservation.ReservationStatus
	(WeekDay)(0),                            // 2: reservation.WeekDay
	(*Facility)(nil),                        // 3: reservation.Facility
	(*Service)(nil),                         // 4: reservation.Service
	(*ProviderService)(nil),                 // 5: reservation.ProviderService
	(*WeeklySchedule)(nil),                  // 6: reservation.WeeklySchedule
	(*TimeSlot)(nil),                        // 7: reservation.TimeSlot
	(*Reservation)(nil),                     // 8: reservation.Reservation
	(*CreateFacilityRequest)(nil),           // 9: reservation.CreateFacilityRequest
	(*CreateFacilityResponse)(nil),          // 10: reservation.CreateFacilityResponse
	(*CreateServiceRequest)(nil),            // 11: reservation.CreateServiceRequest
	(*CreateServiceResponse)(nil),           // 12: reservation.CreateServiceResponse
	(*AssignServiceToProviderRequest)(nil),  // 13: reservation.AssignServiceToProviderRequest
	(*AssignServiceToProviderResponse)(nil), // 14: reservation.AssignServiceToProviderResponse
	(*CreateWeeklyScheduleRequest)(nil),     // 15: reservation.CreateWeeklyScheduleRequest
	(*CreateWeeklyScheduleResponse)(nil),    // 16: reservation.CreateWeeklyScheduleResponse
	(*GenerateTimeSlotsRequest)(nil),        // 17: reservation.GenerateTimeSlotsRequest
	(*GenerateTimeSlotsResponse)(nil),       // 18: reservation.GenerateTimeSlotsResponse
	(*CreateReservationRequest)(nil),        // 19: reservation.CreateReservationRequest
	(*CreateReservationResponse)(nil),       // 20: reservation.CreateReservationResponse
	(*CancelReservationRequest)(nil),        // 21: reservation.CancelReservationRequest
	(*CancelReservationResponse)(nil),       // 22: reservation.CancelReservationResponse
	(*ListReservationsRequest)(nil),         // 23: reservation.ListReservationsRequest
	(*ListReservationsResponse)(nil),        // 24: reservation.ListReservationsResponse
	(*ListAvailableTimeSlotsRequest)(nil),   // 25: reservation.ListAvailableTimeSlotsRequest
	(*ListAvailableTimeSlotsResponse)(nil),  // 26: reservation.ListAvailableTimeSlotsResponse
	(*timestamppb.Timestamp)(nil),           // 27: google.protobuf.Timestamp
}
var file_reservations_reservation_proto_depIdxs = []int32{
	2,  // 0: reservation.WeeklySchedule.day:type_name -> reservation.WeekDay
	27, // 1: reservation.TimeSlot.start_time:type_name -> google.protobuf.Timestamp
	27, // 2: reservation.TimeSlot.end_time:type_name -> google.protobuf.Timestamp
	0,  // 3: reservation.TimeSlot.owner_type:type_name -> reservation.OwnerType
	1,  // 4: reservation.Reservation.status:type_name -> reservation.ReservationStatus
	27, // 5: reservation.Reservation.created_at:type_name -> google.protobuf.Timestamp
	3,  // 6: reservation.CreateFacilityRequest.facility:type_name -> reservation.Facility
	4,  // 7: reservation.CreateServiceRequest.service:type_name -> reservation.Service
	6,  // 8: reservation.CreateWeeklyScheduleRequest.schedule:type_name -> reservation.WeeklySchedule
	7,  // 9: reservation.GenerateTimeSlotsResponse.time_slots:type_name -> reservation.TimeSlot
	8,  // 10: reservation.ListReservationsResponse.reservations:type_name -> reservation.Reservation
	7,  // 11: reservation.ListAvailableTimeSlotsResponse.time_slots:type_name -> reservation.TimeSlot
	9,  // 12: reservation.ReservationService.CreateFacility:input_type -> reservation.CreateFacilityRequest
	11, // 13: reservation.ReservationService.CreateService:input_type -> reservation.CreateServiceRequest
	13, // 14: reservation.ReservationService.AssignServiceToProvider:input_type -> reservation.AssignServiceToProviderRequest
	15, // 15: reservation.ReservationService.CreateWeeklySchedule:input_type -> reservation.CreateWeeklyScheduleRequest
	17, // 16: reservation.ReservationService.GenerateTimeSlots:input_type -> reservation.GenerateTimeSlotsRequest
	19, // 17: reservation.ReservationService.CreateReservation:input_type -> reservation.CreateReservationRequest
	21, // 18: reservation.ReservationService.CancelReservation:input_type -> reservation.CancelReservationRequest
	23, // 19: reservation.ReservationService.ListReservations:input_type -> reservation.ListReservationsRequest
	25, // 20: reservation.ReservationService.ListAvailableTimeSlots:input_type -> reservation.ListAvailableTimeSlotsRequest
	10, // 21: reservation.ReservationService.CreateFacility:output_type -> reservation.CreateFacilityResponse
	12, // 22: reservation.ReservationService.CreateService:output_type -> reservation.CreateServiceResponse
	14, // 23: reservation.ReservationService.AssignServiceToProvider:output_type -> reservation.AssignServiceToProviderResponse
	16, // 24: reservation.ReservationService.CreateWeeklySchedule:output_type -> reservation.CreateWeeklyScheduleResponse
	18, // 25: reservation.ReservationService.GenerateTimeSlots:output_type -> reservation.GenerateTimeSlotsResponse
	20, // 26: reservation.ReservationService.CreateReservation:output_type -> reservation.CreateReservationResponse
	22, // 27: reservation.ReservationService.CancelReservation:output_type -> reservation.CancelReservationResponse
	24, // 28: reservation.ReservationService.ListReservations:output_type -> reservation.ListReservationsResponse
	26, // 29: reservation.ReservationService.ListAvailableTimeSlots:output_type -> reservation.ListAvailableTimeSlotsResponse
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_reservations_reservation_proto_init() }
func file_reservations_reservation_proto_init() {
	if File_reservations_reservation_proto != nil {
		return
	}
	file_reservations_reservation_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reservations_reservation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reservations_reservation_proto_goTypes,
		DependencyIndexes: file_reservations_reservation_proto_depIdxs,
		EnumInfos:         file_reservations_reservation_proto_enumTypes,
		MessageInfos:      file_reservations_reservation_proto_msgTypes,
	}.Build()
	File_reservations_reservation_proto = out.File
	file_reservations_reservation_proto_rawDesc = nil
	file_reservations_reservation_proto_goTypes = nil
	file_reservations_reservation_proto_depIdxs = nil
}
