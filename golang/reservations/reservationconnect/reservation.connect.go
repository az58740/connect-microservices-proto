// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reservations/reservation.proto

package reservationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	reservation "github.com/az58740/connect-microservices-proto/golang/reservation"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReservationServiceName is the fully-qualified name of the ReservationService service.
	ReservationServiceName = "reservation.ReservationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReservationServiceCreateFacilityProcedure is the fully-qualified name of the ReservationService's
	// CreateFacility RPC.
	ReservationServiceCreateFacilityProcedure = "/reservation.ReservationService/CreateFacility"
	// ReservationServiceCreateServiceProcedure is the fully-qualified name of the ReservationService's
	// CreateService RPC.
	ReservationServiceCreateServiceProcedure = "/reservation.ReservationService/CreateService"
	// ReservationServiceAssignServiceToProviderProcedure is the fully-qualified name of the
	// ReservationService's AssignServiceToProvider RPC.
	ReservationServiceAssignServiceToProviderProcedure = "/reservation.ReservationService/AssignServiceToProvider"
	// ReservationServiceCreateWeeklyScheduleProcedure is the fully-qualified name of the
	// ReservationService's CreateWeeklySchedule RPC.
	ReservationServiceCreateWeeklyScheduleProcedure = "/reservation.ReservationService/CreateWeeklySchedule"
	// ReservationServiceGenerateTimeSlotsProcedure is the fully-qualified name of the
	// ReservationService's GenerateTimeSlots RPC.
	ReservationServiceGenerateTimeSlotsProcedure = "/reservation.ReservationService/GenerateTimeSlots"
	// ReservationServiceCreateReservationProcedure is the fully-qualified name of the
	// ReservationService's CreateReservation RPC.
	ReservationServiceCreateReservationProcedure = "/reservation.ReservationService/CreateReservation"
	// ReservationServiceCancelReservationProcedure is the fully-qualified name of the
	// ReservationService's CancelReservation RPC.
	ReservationServiceCancelReservationProcedure = "/reservation.ReservationService/CancelReservation"
	// ReservationServiceListReservationsProcedure is the fully-qualified name of the
	// ReservationService's ListReservations RPC.
	ReservationServiceListReservationsProcedure = "/reservation.ReservationService/ListReservations"
	// ReservationServiceListAvailableTimeSlotsProcedure is the fully-qualified name of the
	// ReservationService's ListAvailableTimeSlots RPC.
	ReservationServiceListAvailableTimeSlotsProcedure = "/reservation.ReservationService/ListAvailableTimeSlots"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	reservationServiceServiceDescriptor                       = reservation.File_reservations_reservation_proto.Services().ByName("ReservationService")
	reservationServiceCreateFacilityMethodDescriptor          = reservationServiceServiceDescriptor.Methods().ByName("CreateFacility")
	reservationServiceCreateServiceMethodDescriptor           = reservationServiceServiceDescriptor.Methods().ByName("CreateService")
	reservationServiceAssignServiceToProviderMethodDescriptor = reservationServiceServiceDescriptor.Methods().ByName("AssignServiceToProvider")
	reservationServiceCreateWeeklyScheduleMethodDescriptor    = reservationServiceServiceDescriptor.Methods().ByName("CreateWeeklySchedule")
	reservationServiceGenerateTimeSlotsMethodDescriptor       = reservationServiceServiceDescriptor.Methods().ByName("GenerateTimeSlots")
	reservationServiceCreateReservationMethodDescriptor       = reservationServiceServiceDescriptor.Methods().ByName("CreateReservation")
	reservationServiceCancelReservationMethodDescriptor       = reservationServiceServiceDescriptor.Methods().ByName("CancelReservation")
	reservationServiceListReservationsMethodDescriptor        = reservationServiceServiceDescriptor.Methods().ByName("ListReservations")
	reservationServiceListAvailableTimeSlotsMethodDescriptor  = reservationServiceServiceDescriptor.Methods().ByName("ListAvailableTimeSlots")
)

// ReservationServiceClient is a client for the reservation.ReservationService service.
type ReservationServiceClient interface {
	CreateFacility(context.Context, *connect.Request[reservation.CreateFacilityRequest]) (*connect.Response[reservation.CreateFacilityResponse], error)
	CreateService(context.Context, *connect.Request[reservation.CreateServiceRequest]) (*connect.Response[reservation.CreateServiceResponse], error)
	AssignServiceToProvider(context.Context, *connect.Request[reservation.AssignServiceToProviderRequest]) (*connect.Response[reservation.AssignServiceToProviderResponse], error)
	CreateWeeklySchedule(context.Context, *connect.Request[reservation.CreateWeeklyScheduleRequest]) (*connect.Response[reservation.CreateWeeklyScheduleResponse], error)
	GenerateTimeSlots(context.Context, *connect.Request[reservation.GenerateTimeSlotsRequest]) (*connect.Response[reservation.GenerateTimeSlotsResponse], error)
	CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error)
	CancelReservation(context.Context, *connect.Request[reservation.CancelReservationRequest]) (*connect.Response[reservation.CancelReservationResponse], error)
	ListReservations(context.Context, *connect.Request[reservation.ListReservationsRequest]) (*connect.Response[reservation.ListReservationsResponse], error)
	ListAvailableTimeSlots(context.Context, *connect.Request[reservation.ListAvailableTimeSlotsRequest]) (*connect.Response[reservation.ListAvailableTimeSlotsResponse], error)
}

// NewReservationServiceClient constructs a client for the reservation.ReservationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReservationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReservationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reservationServiceClient{
		createFacility: connect.NewClient[reservation.CreateFacilityRequest, reservation.CreateFacilityResponse](
			httpClient,
			baseURL+ReservationServiceCreateFacilityProcedure,
			connect.WithSchema(reservationServiceCreateFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createService: connect.NewClient[reservation.CreateServiceRequest, reservation.CreateServiceResponse](
			httpClient,
			baseURL+ReservationServiceCreateServiceProcedure,
			connect.WithSchema(reservationServiceCreateServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assignServiceToProvider: connect.NewClient[reservation.AssignServiceToProviderRequest, reservation.AssignServiceToProviderResponse](
			httpClient,
			baseURL+ReservationServiceAssignServiceToProviderProcedure,
			connect.WithSchema(reservationServiceAssignServiceToProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWeeklySchedule: connect.NewClient[reservation.CreateWeeklyScheduleRequest, reservation.CreateWeeklyScheduleResponse](
			httpClient,
			baseURL+ReservationServiceCreateWeeklyScheduleProcedure,
			connect.WithSchema(reservationServiceCreateWeeklyScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateTimeSlots: connect.NewClient[reservation.GenerateTimeSlotsRequest, reservation.GenerateTimeSlotsResponse](
			httpClient,
			baseURL+ReservationServiceGenerateTimeSlotsProcedure,
			connect.WithSchema(reservationServiceGenerateTimeSlotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createReservation: connect.NewClient[reservation.CreateReservationRequest, reservation.CreateReservationResponse](
			httpClient,
			baseURL+ReservationServiceCreateReservationProcedure,
			connect.WithSchema(reservationServiceCreateReservationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelReservation: connect.NewClient[reservation.CancelReservationRequest, reservation.CancelReservationResponse](
			httpClient,
			baseURL+ReservationServiceCancelReservationProcedure,
			connect.WithSchema(reservationServiceCancelReservationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listReservations: connect.NewClient[reservation.ListReservationsRequest, reservation.ListReservationsResponse](
			httpClient,
			baseURL+ReservationServiceListReservationsProcedure,
			connect.WithSchema(reservationServiceListReservationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAvailableTimeSlots: connect.NewClient[reservation.ListAvailableTimeSlotsRequest, reservation.ListAvailableTimeSlotsResponse](
			httpClient,
			baseURL+ReservationServiceListAvailableTimeSlotsProcedure,
			connect.WithSchema(reservationServiceListAvailableTimeSlotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// reservationServiceClient implements ReservationServiceClient.
type reservationServiceClient struct {
	createFacility          *connect.Client[reservation.CreateFacilityRequest, reservation.CreateFacilityResponse]
	createService           *connect.Client[reservation.CreateServiceRequest, reservation.CreateServiceResponse]
	assignServiceToProvider *connect.Client[reservation.AssignServiceToProviderRequest, reservation.AssignServiceToProviderResponse]
	createWeeklySchedule    *connect.Client[reservation.CreateWeeklyScheduleRequest, reservation.CreateWeeklyScheduleResponse]
	generateTimeSlots       *connect.Client[reservation.GenerateTimeSlotsRequest, reservation.GenerateTimeSlotsResponse]
	createReservation       *connect.Client[reservation.CreateReservationRequest, reservation.CreateReservationResponse]
	cancelReservation       *connect.Client[reservation.CancelReservationRequest, reservation.CancelReservationResponse]
	listReservations        *connect.Client[reservation.ListReservationsRequest, reservation.ListReservationsResponse]
	listAvailableTimeSlots  *connect.Client[reservation.ListAvailableTimeSlotsRequest, reservation.ListAvailableTimeSlotsResponse]
}

// CreateFacility calls reservation.ReservationService.CreateFacility.
func (c *reservationServiceClient) CreateFacility(ctx context.Context, req *connect.Request[reservation.CreateFacilityRequest]) (*connect.Response[reservation.CreateFacilityResponse], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// CreateService calls reservation.ReservationService.CreateService.
func (c *reservationServiceClient) CreateService(ctx context.Context, req *connect.Request[reservation.CreateServiceRequest]) (*connect.Response[reservation.CreateServiceResponse], error) {
	return c.createService.CallUnary(ctx, req)
}

// AssignServiceToProvider calls reservation.ReservationService.AssignServiceToProvider.
func (c *reservationServiceClient) AssignServiceToProvider(ctx context.Context, req *connect.Request[reservation.AssignServiceToProviderRequest]) (*connect.Response[reservation.AssignServiceToProviderResponse], error) {
	return c.assignServiceToProvider.CallUnary(ctx, req)
}

// CreateWeeklySchedule calls reservation.ReservationService.CreateWeeklySchedule.
func (c *reservationServiceClient) CreateWeeklySchedule(ctx context.Context, req *connect.Request[reservation.CreateWeeklyScheduleRequest]) (*connect.Response[reservation.CreateWeeklyScheduleResponse], error) {
	return c.createWeeklySchedule.CallUnary(ctx, req)
}

// GenerateTimeSlots calls reservation.ReservationService.GenerateTimeSlots.
func (c *reservationServiceClient) GenerateTimeSlots(ctx context.Context, req *connect.Request[reservation.GenerateTimeSlotsRequest]) (*connect.Response[reservation.GenerateTimeSlotsResponse], error) {
	return c.generateTimeSlots.CallUnary(ctx, req)
}

// CreateReservation calls reservation.ReservationService.CreateReservation.
func (c *reservationServiceClient) CreateReservation(ctx context.Context, req *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error) {
	return c.createReservation.CallUnary(ctx, req)
}

// CancelReservation calls reservation.ReservationService.CancelReservation.
func (c *reservationServiceClient) CancelReservation(ctx context.Context, req *connect.Request[reservation.CancelReservationRequest]) (*connect.Response[reservation.CancelReservationResponse], error) {
	return c.cancelReservation.CallUnary(ctx, req)
}

// ListReservations calls reservation.ReservationService.ListReservations.
func (c *reservationServiceClient) ListReservations(ctx context.Context, req *connect.Request[reservation.ListReservationsRequest]) (*connect.Response[reservation.ListReservationsResponse], error) {
	return c.listReservations.CallUnary(ctx, req)
}

// ListAvailableTimeSlots calls reservation.ReservationService.ListAvailableTimeSlots.
func (c *reservationServiceClient) ListAvailableTimeSlots(ctx context.Context, req *connect.Request[reservation.ListAvailableTimeSlotsRequest]) (*connect.Response[reservation.ListAvailableTimeSlotsResponse], error) {
	return c.listAvailableTimeSlots.CallUnary(ctx, req)
}

// ReservationServiceHandler is an implementation of the reservation.ReservationService service.
type ReservationServiceHandler interface {
	CreateFacility(context.Context, *connect.Request[reservation.CreateFacilityRequest]) (*connect.Response[reservation.CreateFacilityResponse], error)
	CreateService(context.Context, *connect.Request[reservation.CreateServiceRequest]) (*connect.Response[reservation.CreateServiceResponse], error)
	AssignServiceToProvider(context.Context, *connect.Request[reservation.AssignServiceToProviderRequest]) (*connect.Response[reservation.AssignServiceToProviderResponse], error)
	CreateWeeklySchedule(context.Context, *connect.Request[reservation.CreateWeeklyScheduleRequest]) (*connect.Response[reservation.CreateWeeklyScheduleResponse], error)
	GenerateTimeSlots(context.Context, *connect.Request[reservation.GenerateTimeSlotsRequest]) (*connect.Response[reservation.GenerateTimeSlotsResponse], error)
	CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error)
	CancelReservation(context.Context, *connect.Request[reservation.CancelReservationRequest]) (*connect.Response[reservation.CancelReservationResponse], error)
	ListReservations(context.Context, *connect.Request[reservation.ListReservationsRequest]) (*connect.Response[reservation.ListReservationsResponse], error)
	ListAvailableTimeSlots(context.Context, *connect.Request[reservation.ListAvailableTimeSlotsRequest]) (*connect.Response[reservation.ListAvailableTimeSlotsResponse], error)
}

// NewReservationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReservationServiceHandler(svc ReservationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reservationServiceCreateFacilityHandler := connect.NewUnaryHandler(
		ReservationServiceCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(reservationServiceCreateFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateServiceHandler := connect.NewUnaryHandler(
		ReservationServiceCreateServiceProcedure,
		svc.CreateService,
		connect.WithSchema(reservationServiceCreateServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceAssignServiceToProviderHandler := connect.NewUnaryHandler(
		ReservationServiceAssignServiceToProviderProcedure,
		svc.AssignServiceToProvider,
		connect.WithSchema(reservationServiceAssignServiceToProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateWeeklyScheduleHandler := connect.NewUnaryHandler(
		ReservationServiceCreateWeeklyScheduleProcedure,
		svc.CreateWeeklySchedule,
		connect.WithSchema(reservationServiceCreateWeeklyScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGenerateTimeSlotsHandler := connect.NewUnaryHandler(
		ReservationServiceGenerateTimeSlotsProcedure,
		svc.GenerateTimeSlots,
		connect.WithSchema(reservationServiceGenerateTimeSlotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateReservationHandler := connect.NewUnaryHandler(
		ReservationServiceCreateReservationProcedure,
		svc.CreateReservation,
		connect.WithSchema(reservationServiceCreateReservationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCancelReservationHandler := connect.NewUnaryHandler(
		ReservationServiceCancelReservationProcedure,
		svc.CancelReservation,
		connect.WithSchema(reservationServiceCancelReservationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListReservationsHandler := connect.NewUnaryHandler(
		ReservationServiceListReservationsProcedure,
		svc.ListReservations,
		connect.WithSchema(reservationServiceListReservationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListAvailableTimeSlotsHandler := connect.NewUnaryHandler(
		ReservationServiceListAvailableTimeSlotsProcedure,
		svc.ListAvailableTimeSlots,
		connect.WithSchema(reservationServiceListAvailableTimeSlotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/reservation.ReservationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReservationServiceCreateFacilityProcedure:
			reservationServiceCreateFacilityHandler.ServeHTTP(w, r)
		case ReservationServiceCreateServiceProcedure:
			reservationServiceCreateServiceHandler.ServeHTTP(w, r)
		case ReservationServiceAssignServiceToProviderProcedure:
			reservationServiceAssignServiceToProviderHandler.ServeHTTP(w, r)
		case ReservationServiceCreateWeeklyScheduleProcedure:
			reservationServiceCreateWeeklyScheduleHandler.ServeHTTP(w, r)
		case ReservationServiceGenerateTimeSlotsProcedure:
			reservationServiceGenerateTimeSlotsHandler.ServeHTTP(w, r)
		case ReservationServiceCreateReservationProcedure:
			reservationServiceCreateReservationHandler.ServeHTTP(w, r)
		case ReservationServiceCancelReservationProcedure:
			reservationServiceCancelReservationHandler.ServeHTTP(w, r)
		case ReservationServiceListReservationsProcedure:
			reservationServiceListReservationsHandler.ServeHTTP(w, r)
		case ReservationServiceListAvailableTimeSlotsProcedure:
			reservationServiceListAvailableTimeSlotsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReservationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReservationServiceHandler struct{}

func (UnimplementedReservationServiceHandler) CreateFacility(context.Context, *connect.Request[reservation.CreateFacilityRequest]) (*connect.Response[reservation.CreateFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateFacility is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateService(context.Context, *connect.Request[reservation.CreateServiceRequest]) (*connect.Response[reservation.CreateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateService is not implemented"))
}

func (UnimplementedReservationServiceHandler) AssignServiceToProvider(context.Context, *connect.Request[reservation.AssignServiceToProviderRequest]) (*connect.Response[reservation.AssignServiceToProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.AssignServiceToProvider is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateWeeklySchedule(context.Context, *connect.Request[reservation.CreateWeeklyScheduleRequest]) (*connect.Response[reservation.CreateWeeklyScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateWeeklySchedule is not implemented"))
}

func (UnimplementedReservationServiceHandler) GenerateTimeSlots(context.Context, *connect.Request[reservation.GenerateTimeSlotsRequest]) (*connect.Response[reservation.GenerateTimeSlotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GenerateTimeSlots is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) CancelReservation(context.Context, *connect.Request[reservation.CancelReservationRequest]) (*connect.Response[reservation.CancelReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CancelReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListReservations(context.Context, *connect.Request[reservation.ListReservationsRequest]) (*connect.Response[reservation.ListReservationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListReservations is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListAvailableTimeSlots(context.Context, *connect.Request[reservation.ListAvailableTimeSlotsRequest]) (*connect.Response[reservation.ListAvailableTimeSlotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListAvailableTimeSlots is not implemented"))
}
