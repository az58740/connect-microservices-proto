// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reservations/reservation.proto

package reservationsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	reservations "github.com/az58740/connect-microservices-proto/golang/reservations"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReservationServiceName is the fully-qualified name of the ReservationService service.
	ReservationServiceName = "reservation.ReservationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReservationServiceCreateFacilityProcedure is the fully-qualified name of the ReservationService's
	// CreateFacility RPC.
	ReservationServiceCreateFacilityProcedure = "/reservation.ReservationService/CreateFacility"
	// ReservationServiceUpdateFacilityProcedure is the fully-qualified name of the ReservationService's
	// UpdateFacility RPC.
	ReservationServiceUpdateFacilityProcedure = "/reservation.ReservationService/UpdateFacility"
	// ReservationServiceListFacilitiesProcedure is the fully-qualified name of the ReservationService's
	// ListFacilities RPC.
	ReservationServiceListFacilitiesProcedure = "/reservation.ReservationService/ListFacilities"
	// ReservationServiceCreateServiceProcedure is the fully-qualified name of the ReservationService's
	// CreateService RPC.
	ReservationServiceCreateServiceProcedure = "/reservation.ReservationService/CreateService"
	// ReservationServiceUpdateServiceProcedure is the fully-qualified name of the ReservationService's
	// UpdateService RPC.
	ReservationServiceUpdateServiceProcedure = "/reservation.ReservationService/UpdateService"
	// ReservationServiceListServicesProcedure is the fully-qualified name of the ReservationService's
	// ListServices RPC.
	ReservationServiceListServicesProcedure = "/reservation.ReservationService/ListServices"
	// ReservationServiceAssignServiceToProviderProcedure is the fully-qualified name of the
	// ReservationService's AssignServiceToProvider RPC.
	ReservationServiceAssignServiceToProviderProcedure = "/reservation.ReservationService/AssignServiceToProvider"
	// ReservationServiceRemoveServiceFromProviderProcedure is the fully-qualified name of the
	// ReservationService's RemoveServiceFromProvider RPC.
	ReservationServiceRemoveServiceFromProviderProcedure = "/reservation.ReservationService/RemoveServiceFromProvider"
	// ReservationServiceGetProviderServicesListProcedure is the fully-qualified name of the
	// ReservationService's GetProviderServicesList RPC.
	ReservationServiceGetProviderServicesListProcedure = "/reservation.ReservationService/GetProviderServicesList"
	// ReservationServiceUpdateProviderServiceProcedure is the fully-qualified name of the
	// ReservationService's UpdateProviderService RPC.
	ReservationServiceUpdateProviderServiceProcedure = "/reservation.ReservationService/UpdateProviderService"
	// ReservationServiceCreateWeeklyScheduleProcedure is the fully-qualified name of the
	// ReservationService's CreateWeeklySchedule RPC.
	ReservationServiceCreateWeeklyScheduleProcedure = "/reservation.ReservationService/CreateWeeklySchedule"
	// ReservationServiceGetWeeklyScheduleListProcedure is the fully-qualified name of the
	// ReservationService's GetWeeklyScheduleList RPC.
	ReservationServiceGetWeeklyScheduleListProcedure = "/reservation.ReservationService/GetWeeklyScheduleList"
	// ReservationServiceUpdateWeeklyScheduleProcedure is the fully-qualified name of the
	// ReservationService's UpdateWeeklySchedule RPC.
	ReservationServiceUpdateWeeklyScheduleProcedure = "/reservation.ReservationService/UpdateWeeklySchedule"
	// ReservationServiceGenerateTimeSlotsProcedure is the fully-qualified name of the
	// ReservationService's GenerateTimeSlots RPC.
	ReservationServiceGenerateTimeSlotsProcedure = "/reservation.ReservationService/GenerateTimeSlots"
	// ReservationServiceGetTimeSlotsListProcedure is the fully-qualified name of the
	// ReservationService's GetTimeSlotsList RPC.
	ReservationServiceGetTimeSlotsListProcedure = "/reservation.ReservationService/GetTimeSlotsList"
	// ReservationServiceUpdateTimeSlotProcedure is the fully-qualified name of the ReservationService's
	// UpdateTimeSlot RPC.
	ReservationServiceUpdateTimeSlotProcedure = "/reservation.ReservationService/UpdateTimeSlot"
	// ReservationServiceRemoveTimeSlotsProcedure is the fully-qualified name of the
	// ReservationService's RemoveTimeSlots RPC.
	ReservationServiceRemoveTimeSlotsProcedure = "/reservation.ReservationService/RemoveTimeSlots"
	// ReservationServiceGetProviderServicesWithUsersProcedure is the fully-qualified name of the
	// ReservationService's GetProviderServicesWithUsers RPC.
	ReservationServiceGetProviderServicesWithUsersProcedure = "/reservation.ReservationService/GetProviderServicesWithUsers"
	// ReservationServiceAddFacilityImageProcedure is the fully-qualified name of the
	// ReservationService's AddFacilityImage RPC.
	ReservationServiceAddFacilityImageProcedure = "/reservation.ReservationService/AddFacilityImage"
	// ReservationServiceDeleteFacilityImageProcedure is the fully-qualified name of the
	// ReservationService's DeleteFacilityImage RPC.
	ReservationServiceDeleteFacilityImageProcedure = "/reservation.ReservationService/DeleteFacilityImage"
	// ReservationServiceGetFacilityImagesProcedure is the fully-qualified name of the
	// ReservationService's GetFacilityImages RPC.
	ReservationServiceGetFacilityImagesProcedure = "/reservation.ReservationService/GetFacilityImages"
	// ReservationServiceCreateReservationProcedure is the fully-qualified name of the
	// ReservationService's CreateReservation RPC.
	ReservationServiceCreateReservationProcedure = "/reservation.ReservationService/CreateReservation"
	// ReservationServiceCancelReservationProcedure is the fully-qualified name of the
	// ReservationService's CancelReservation RPC.
	ReservationServiceCancelReservationProcedure = "/reservation.ReservationService/CancelReservation"
	// ReservationServiceUpdateReservationStatusProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservationStatus RPC.
	ReservationServiceUpdateReservationStatusProcedure = "/reservation.ReservationService/UpdateReservationStatus"
	// ReservationServiceMarkAttendanceProcedure is the fully-qualified name of the ReservationService's
	// MarkAttendance RPC.
	ReservationServiceMarkAttendanceProcedure = "/reservation.ReservationService/MarkAttendance"
	// ReservationServiceListReservationsProcedure is the fully-qualified name of the
	// ReservationService's ListReservations RPC.
	ReservationServiceListReservationsProcedure = "/reservation.ReservationService/ListReservations"
	// ReservationServiceListAvailableTimeSlotsProcedure is the fully-qualified name of the
	// ReservationService's ListAvailableTimeSlots RPC.
	ReservationServiceListAvailableTimeSlotsProcedure = "/reservation.ReservationService/ListAvailableTimeSlots"
	// ReservationServiceCreateProviderUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's CreateProviderUnavailability RPC.
	ReservationServiceCreateProviderUnavailabilityProcedure = "/reservation.ReservationService/CreateProviderUnavailability"
	// ReservationServiceListProviderUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's ListProviderUnavailability RPC.
	ReservationServiceListProviderUnavailabilityProcedure = "/reservation.ReservationService/ListProviderUnavailability"
	// ReservationServiceDeleteProviderUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's DeleteProviderUnavailability RPC.
	ReservationServiceDeleteProviderUnavailabilityProcedure = "/reservation.ReservationService/DeleteProviderUnavailability"
	// ReservationServiceCreateRoomTypeProcedure is the fully-qualified name of the ReservationService's
	// CreateRoomType RPC.
	ReservationServiceCreateRoomTypeProcedure = "/reservation.ReservationService/CreateRoomType"
	// ReservationServiceListRoomTypesProcedure is the fully-qualified name of the ReservationService's
	// ListRoomTypes RPC.
	ReservationServiceListRoomTypesProcedure = "/reservation.ReservationService/ListRoomTypes"
	// ReservationServiceDeleteRoomTypeProcedure is the fully-qualified name of the ReservationService's
	// DeleteRoomType RPC.
	ReservationServiceDeleteRoomTypeProcedure = "/reservation.ReservationService/DeleteRoomType"
	// ReservationServiceCreateRoomProcedure is the fully-qualified name of the ReservationService's
	// CreateRoom RPC.
	ReservationServiceCreateRoomProcedure = "/reservation.ReservationService/CreateRoom"
	// ReservationServiceListRoomsProcedure is the fully-qualified name of the ReservationService's
	// ListRooms RPC.
	ReservationServiceListRoomsProcedure = "/reservation.ReservationService/ListRooms"
	// ReservationServiceDeleteRoomProcedure is the fully-qualified name of the ReservationService's
	// DeleteRoom RPC.
	ReservationServiceDeleteRoomProcedure = "/reservation.ReservationService/DeleteRoom"
	// ReservationServiceAddRoomImageProcedure is the fully-qualified name of the ReservationService's
	// AddRoomImage RPC.
	ReservationServiceAddRoomImageProcedure = "/reservation.ReservationService/AddRoomImage"
	// ReservationServiceGetRoomImagesProcedure is the fully-qualified name of the ReservationService's
	// GetRoomImages RPC.
	ReservationServiceGetRoomImagesProcedure = "/reservation.ReservationService/GetRoomImages"
	// ReservationServiceDeleteRoomImageProcedure is the fully-qualified name of the
	// ReservationService's DeleteRoomImage RPC.
	ReservationServiceDeleteRoomImageProcedure = "/reservation.ReservationService/DeleteRoomImage"
	// ReservationServiceCheckRoomAvailabilityProcedure is the fully-qualified name of the
	// ReservationService's CheckRoomAvailability RPC.
	ReservationServiceCheckRoomAvailabilityProcedure = "/reservation.ReservationService/CheckRoomAvailability"
	// ReservationServiceListRoomAvailabilityProcedure is the fully-qualified name of the
	// ReservationService's ListRoomAvailability RPC.
	ReservationServiceListRoomAvailabilityProcedure = "/reservation.ReservationService/ListRoomAvailability"
	// ReservationServiceCreateServiceUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's CreateServiceUnavailability RPC.
	ReservationServiceCreateServiceUnavailabilityProcedure = "/reservation.ReservationService/CreateServiceUnavailability"
	// ReservationServiceListServiceUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's ListServiceUnavailability RPC.
	ReservationServiceListServiceUnavailabilityProcedure = "/reservation.ReservationService/ListServiceUnavailability"
	// ReservationServiceDeleteServiceUnavailabilityProcedure is the fully-qualified name of the
	// ReservationService's DeleteServiceUnavailability RPC.
	ReservationServiceDeleteServiceUnavailabilityProcedure = "/reservation.ReservationService/DeleteServiceUnavailability"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	reservationServiceServiceDescriptor                            = reservations.File_reservations_reservation_proto.Services().ByName("ReservationService")
	reservationServiceCreateFacilityMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("CreateFacility")
	reservationServiceUpdateFacilityMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("UpdateFacility")
	reservationServiceListFacilitiesMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("ListFacilities")
	reservationServiceCreateServiceMethodDescriptor                = reservationServiceServiceDescriptor.Methods().ByName("CreateService")
	reservationServiceUpdateServiceMethodDescriptor                = reservationServiceServiceDescriptor.Methods().ByName("UpdateService")
	reservationServiceListServicesMethodDescriptor                 = reservationServiceServiceDescriptor.Methods().ByName("ListServices")
	reservationServiceAssignServiceToProviderMethodDescriptor      = reservationServiceServiceDescriptor.Methods().ByName("AssignServiceToProvider")
	reservationServiceRemoveServiceFromProviderMethodDescriptor    = reservationServiceServiceDescriptor.Methods().ByName("RemoveServiceFromProvider")
	reservationServiceGetProviderServicesListMethodDescriptor      = reservationServiceServiceDescriptor.Methods().ByName("GetProviderServicesList")
	reservationServiceUpdateProviderServiceMethodDescriptor        = reservationServiceServiceDescriptor.Methods().ByName("UpdateProviderService")
	reservationServiceCreateWeeklyScheduleMethodDescriptor         = reservationServiceServiceDescriptor.Methods().ByName("CreateWeeklySchedule")
	reservationServiceGetWeeklyScheduleListMethodDescriptor        = reservationServiceServiceDescriptor.Methods().ByName("GetWeeklyScheduleList")
	reservationServiceUpdateWeeklyScheduleMethodDescriptor         = reservationServiceServiceDescriptor.Methods().ByName("UpdateWeeklySchedule")
	reservationServiceGenerateTimeSlotsMethodDescriptor            = reservationServiceServiceDescriptor.Methods().ByName("GenerateTimeSlots")
	reservationServiceGetTimeSlotsListMethodDescriptor             = reservationServiceServiceDescriptor.Methods().ByName("GetTimeSlotsList")
	reservationServiceUpdateTimeSlotMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("UpdateTimeSlot")
	reservationServiceRemoveTimeSlotsMethodDescriptor              = reservationServiceServiceDescriptor.Methods().ByName("RemoveTimeSlots")
	reservationServiceGetProviderServicesWithUsersMethodDescriptor = reservationServiceServiceDescriptor.Methods().ByName("GetProviderServicesWithUsers")
	reservationServiceAddFacilityImageMethodDescriptor             = reservationServiceServiceDescriptor.Methods().ByName("AddFacilityImage")
	reservationServiceDeleteFacilityImageMethodDescriptor          = reservationServiceServiceDescriptor.Methods().ByName("DeleteFacilityImage")
	reservationServiceGetFacilityImagesMethodDescriptor            = reservationServiceServiceDescriptor.Methods().ByName("GetFacilityImages")
	reservationServiceCreateReservationMethodDescriptor            = reservationServiceServiceDescriptor.Methods().ByName("CreateReservation")
	reservationServiceCancelReservationMethodDescriptor            = reservationServiceServiceDescriptor.Methods().ByName("CancelReservation")
	reservationServiceUpdateReservationStatusMethodDescriptor      = reservationServiceServiceDescriptor.Methods().ByName("UpdateReservationStatus")
	reservationServiceMarkAttendanceMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("MarkAttendance")
	reservationServiceListReservationsMethodDescriptor             = reservationServiceServiceDescriptor.Methods().ByName("ListReservations")
	reservationServiceListAvailableTimeSlotsMethodDescriptor       = reservationServiceServiceDescriptor.Methods().ByName("ListAvailableTimeSlots")
	reservationServiceCreateProviderUnavailabilityMethodDescriptor = reservationServiceServiceDescriptor.Methods().ByName("CreateProviderUnavailability")
	reservationServiceListProviderUnavailabilityMethodDescriptor   = reservationServiceServiceDescriptor.Methods().ByName("ListProviderUnavailability")
	reservationServiceDeleteProviderUnavailabilityMethodDescriptor = reservationServiceServiceDescriptor.Methods().ByName("DeleteProviderUnavailability")
	reservationServiceCreateRoomTypeMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("CreateRoomType")
	reservationServiceListRoomTypesMethodDescriptor                = reservationServiceServiceDescriptor.Methods().ByName("ListRoomTypes")
	reservationServiceDeleteRoomTypeMethodDescriptor               = reservationServiceServiceDescriptor.Methods().ByName("DeleteRoomType")
	reservationServiceCreateRoomMethodDescriptor                   = reservationServiceServiceDescriptor.Methods().ByName("CreateRoom")
	reservationServiceListRoomsMethodDescriptor                    = reservationServiceServiceDescriptor.Methods().ByName("ListRooms")
	reservationServiceDeleteRoomMethodDescriptor                   = reservationServiceServiceDescriptor.Methods().ByName("DeleteRoom")
	reservationServiceAddRoomImageMethodDescriptor                 = reservationServiceServiceDescriptor.Methods().ByName("AddRoomImage")
	reservationServiceGetRoomImagesMethodDescriptor                = reservationServiceServiceDescriptor.Methods().ByName("GetRoomImages")
	reservationServiceDeleteRoomImageMethodDescriptor              = reservationServiceServiceDescriptor.Methods().ByName("DeleteRoomImage")
	reservationServiceCheckRoomAvailabilityMethodDescriptor        = reservationServiceServiceDescriptor.Methods().ByName("CheckRoomAvailability")
	reservationServiceListRoomAvailabilityMethodDescriptor         = reservationServiceServiceDescriptor.Methods().ByName("ListRoomAvailability")
	reservationServiceCreateServiceUnavailabilityMethodDescriptor  = reservationServiceServiceDescriptor.Methods().ByName("CreateServiceUnavailability")
	reservationServiceListServiceUnavailabilityMethodDescriptor    = reservationServiceServiceDescriptor.Methods().ByName("ListServiceUnavailability")
	reservationServiceDeleteServiceUnavailabilityMethodDescriptor  = reservationServiceServiceDescriptor.Methods().ByName("DeleteServiceUnavailability")
)

// ReservationServiceClient is a client for the reservation.ReservationService service.
type ReservationServiceClient interface {
	// facility related methods
	// ایجاد یک فسیلیتی جدید | Create a new facility
	CreateFacility(context.Context, *connect.Request[reservations.CreateFacilityRequest]) (*connect.Response[reservations.CreateFacilityResponse], error)
	// ویرایش یم فسیلیتی| update a  facility
	UpdateFacility(context.Context, *connect.Request[reservations.UpdateFacilityRequest]) (*connect.Response[reservations.UpdateFacilityResponse], error)
	// دریافت لیست مکان‌ها | List all facilities
	ListFacilities(context.Context, *connect.Request[reservations.ListFacilitiesRequest]) (*connect.Response[reservations.ListFacilitiesResponse], error)
	// Service related methods
	// ایجاد سرویس جدید برای یک فسیلیتی | Create a new service for a facility
	CreateService(context.Context, *connect.Request[reservations.CreateServiceRequest]) (*connect.Response[reservations.CreateServiceResponse], error)
	// ویرایش سرویس  | Update a service for a facility
	UpdateService(context.Context, *connect.Request[reservations.UpdateServiceRequest]) (*connect.Response[reservations.UpdateServiceResponse], error)
	// دریافت لیست سرویس‌های یک فسیلیتی | List services of a facility
	ListServices(context.Context, *connect.Request[reservations.ListServicesRequest]) (*connect.Response[reservations.ListServicesResponse], error)
	// ُProvider Service  related methods
	// تخصیص یک سرویس به ارائه‌دهنده | Assign a service to a provider
	AssignServiceToProvider(context.Context, *connect.Request[reservations.AssignServiceToProviderRequest]) (*connect.Response[reservations.AssignServiceToProviderResponse], error)
	// خذف یک سرویس از ارائه‌دهنده | Remove a service from a provider
	RemoveServiceFromProvider(context.Context, *connect.Request[reservations.RemoveServiceFromProviderRequest]) (*connect.Response[reservations.RemoveServiceFromProviderResponse], error)
	// دریافت لیست سرویس‌های یک ارائه‌دهنده| Get provider services
	GetProviderServicesList(context.Context, *connect.Request[reservations.GetProviderServicesListRequest]) (*connect.Response[reservations.GetProviderServicesListResponse], error)
	// ویرایش سرویس  | Update a service for a provider
	UpdateProviderService(context.Context, *connect.Request[reservations.UpdateProviderServiceRequest]) (*connect.Response[reservations.UpdateProviderServiceResponse], error)
	// WeeklySchedule and TimeSlot releated methods
	// ایجاد برنامه‌ زمانی هفتگی برای ارائه‌دهنده | Create weekly schedule for provider
	CreateWeeklySchedule(context.Context, *connect.Request[reservations.CreateWeeklyScheduleRequest]) (*connect.Response[reservations.CreateWeeklyScheduleResponse], error)
	GetWeeklyScheduleList(context.Context, *connect.Request[reservations.GetWeeklyScheduleListRequest]) (*connect.Response[reservations.GetWeeklyScheduleListResponse], error)
	UpdateWeeklySchedule(context.Context, *connect.Request[reservations.UpdateWeeklyScheduleRequest]) (*connect.Response[reservations.UpdateWeeklyScheduleResponse], error)
	// تولید تایم‌اسلات‌ها بر اساس برنامه‌ هفتگی | Generate time slots from weekly schedule
	GenerateTimeSlots(context.Context, *connect.Request[reservations.GenerateTimeSlotsRequest]) (*connect.Response[reservations.GenerateTimeSlotsResponse], error)
	GetTimeSlotsList(context.Context, *connect.Request[reservations.GetTimeSlotsListRequest]) (*connect.Response[reservations.GetTimeSlotsListResponse], error)
	UpdateTimeSlot(context.Context, *connect.Request[reservations.UpdateTimeSlotRequest]) (*connect.Response[reservations.UpdateTimeSlotResponse], error)
	RemoveTimeSlots(context.Context, *connect.Request[reservations.RemoveTimeSlotsRequest]) (*connect.Response[reservations.RemoveTimeSlotsResponse], error)
	GetProviderServicesWithUsers(context.Context, *connect.Request[reservations.GetProviderServicesWithUsersRequest]) (*connect.Response[reservations.GetProviderServicesWithUsersResponse], error)
	// افزودن تصویر به فسیلیتی | Add an image to a facility
	AddFacilityImage(context.Context, *connect.Request[reservations.FacilityImage]) (*connect.Response[reservations.FacilityImage], error)
	// حذف تصویر از فسیلیتی | Delete an image from a facility
	DeleteFacilityImage(context.Context, *connect.Request[reservations.DeleteFacilityImageRequest]) (*connect.Response[reservations.DeleteFacilityImageResponse], error)
	// دریافت تصاویر فسیلیتی | Get images of a facility
	GetFacilityImages(context.Context, *connect.Request[reservations.GetFacilityImagesRequest]) (*connect.Response[reservations.GetFacilityImagesResponse], error)
	// ثبت یک رزرو جدید | Create a new reservation
	CreateReservation(context.Context, *connect.Request[reservations.CreateReservationRequest]) (*connect.Response[reservations.CreateReservationResponse], error)
	// لغو رزرو ثبت‌شده | Cancel an existing reservation
	CancelReservation(context.Context, *connect.Request[reservations.CancelReservationRequest]) (*connect.Response[reservations.CancelReservationResponse], error)
	// بروزرسانی وضعیت رزرو (تأیید، لغو، انجام‌شده) | Update reservation status
	UpdateReservationStatus(context.Context, *connect.Request[reservations.UpdateReservationStatusRequest]) (*connect.Response[reservations.UpdateReservationStatusResponse], error)
	// ثبت وضعیت حضور یا عدم حضور کاربر | Mark attendance status for reservation
	MarkAttendance(context.Context, *connect.Request[reservations.MarkAttendanceRequest]) (*connect.Response[reservations.MarkAttendanceResponse], error)
	// دریافت لیست رزروهای کاربر | List user reservations
	ListReservations(context.Context, *connect.Request[reservations.ListReservationsRequest]) (*connect.Response[reservations.ListReservationsResponse], error)
	// دریافت تایم‌اسلات‌های آزاد برای رزرو | List available time slots
	ListAvailableTimeSlots(context.Context, *connect.Request[reservations.ListAvailableTimeSlotsRequest]) (*connect.Response[reservations.ListAvailableTimeSlotsResponse], error)
	// ایجاد بازه‌ی غیبت برای ارائه‌دهنده | Create unavailability period for a provider
	CreateProviderUnavailability(context.Context, *connect.Request[reservations.CreateProviderUnavailabilityRequest]) (*connect.Response[reservations.CreateProviderUnavailabilityResponse], error)
	// دریافت لیست بازه‌های غیبت ارائه‌دهنده | List unavailability periods of a provider
	ListProviderUnavailability(context.Context, *connect.Request[reservations.ListProviderUnavailabilityRequest]) (*connect.Response[reservations.ListProviderUnavailabilityResponse], error)
	// حذف بازه‌ی غیبت ارائه‌دهنده | Delete an unavailability period of a provider
	DeleteProviderUnavailability(context.Context, *connect.Request[reservations.DeleteProviderUnavailabilityRequest]) (*connect.Response[reservations.DeleteProviderUnavailabilityResponse], error)
	// ایجاد نوع اتاق | Create room type
	CreateRoomType(context.Context, *connect.Request[reservations.CreateRoomTypeRequest]) (*connect.Response[reservations.CreateRoomTypeResponse], error)
	// لیست نوع اتاق‌های یک هتل | List room types for a hotel
	ListRoomTypes(context.Context, *connect.Request[reservations.ListRoomTypesRequest]) (*connect.Response[reservations.ListRoomTypesResponse], error)
	// حذف نوع اتاق | Delete room type
	DeleteRoomType(context.Context, *connect.Request[reservations.DeleteRoomTypeRequest]) (*connect.Response[reservations.DeleteRoomTypeResponse], error)
	// ایجاد اتاق جدید | Create a room
	CreateRoom(context.Context, *connect.Request[reservations.CreateRoomRequest]) (*connect.Response[reservations.CreateRoomResponse], error)
	// لیست اتاق‌های یک هتل | List rooms of a hotel
	ListRooms(context.Context, *connect.Request[reservations.ListRoomsRequest]) (*connect.Response[reservations.ListRoomsResponse], error)
	// حذف اتاق | Delete a room
	DeleteRoom(context.Context, *connect.Request[reservations.DeleteRoomRequest]) (*connect.Response[reservations.DeleteRoomResponse], error)
	// افزودن تصویر به اتاق | Add image to room
	AddRoomImage(context.Context, *connect.Request[reservations.AddRoomImageRequest]) (*connect.Response[reservations.AddRoomImageResponse], error)
	// دریافت تصاویر یک اتاق | Get images of a room
	GetRoomImages(context.Context, *connect.Request[reservations.GetRoomImagesRequest]) (*connect.Response[reservations.GetRoomImagesResponse], error)
	// حذف تصویر از اتاق | Delete room image
	DeleteRoomImage(context.Context, *connect.Request[reservations.DeleteRoomImageRequest]) (*connect.Response[reservations.DeleteRoomImageResponse], error)
	// بررسی در دسترس بودن اتاق‌ها | Check room availability
	CheckRoomAvailability(context.Context, *connect.Request[reservations.CheckRoomAvailabilityRequest]) (*connect.Response[reservations.CheckRoomAvailabilityResponse], error)
	// لیست شب‌هایی که رزرو شده‌اند | List reserved nights for room/service
	ListRoomAvailability(context.Context, *connect.Request[reservations.ListRoomAvailabilityRequest]) (*connect.Response[reservations.ListRoomAvailabilityResponse], error)
	// تعریف زمان‌های عدم دسترسی اتاق | Define room/service unavailability
	CreateServiceUnavailability(context.Context, *connect.Request[reservations.CreateServiceUnavailabilityRequest]) (*connect.Response[reservations.CreateServiceUnavailabilityResponse], error)
	// دریافت لیست زمان‌های عدم دسترسی اتاق | List service unavailability periods
	ListServiceUnavailability(context.Context, *connect.Request[reservations.ListServiceUnavailabilityRequest]) (*connect.Response[reservations.ListServiceUnavailabilityResponse], error)
	// حذف زمان عدم دسترسی | Delete service unavailability
	DeleteServiceUnavailability(context.Context, *connect.Request[reservations.DeleteServiceUnavailabilityRequest]) (*connect.Response[reservations.DeleteServiceUnavailabilityResponse], error)
}

// NewReservationServiceClient constructs a client for the reservation.ReservationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReservationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReservationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reservationServiceClient{
		createFacility: connect.NewClient[reservations.CreateFacilityRequest, reservations.CreateFacilityResponse](
			httpClient,
			baseURL+ReservationServiceCreateFacilityProcedure,
			connect.WithSchema(reservationServiceCreateFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFacility: connect.NewClient[reservations.UpdateFacilityRequest, reservations.UpdateFacilityResponse](
			httpClient,
			baseURL+ReservationServiceUpdateFacilityProcedure,
			connect.WithSchema(reservationServiceUpdateFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFacilities: connect.NewClient[reservations.ListFacilitiesRequest, reservations.ListFacilitiesResponse](
			httpClient,
			baseURL+ReservationServiceListFacilitiesProcedure,
			connect.WithSchema(reservationServiceListFacilitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createService: connect.NewClient[reservations.CreateServiceRequest, reservations.CreateServiceResponse](
			httpClient,
			baseURL+ReservationServiceCreateServiceProcedure,
			connect.WithSchema(reservationServiceCreateServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateService: connect.NewClient[reservations.UpdateServiceRequest, reservations.UpdateServiceResponse](
			httpClient,
			baseURL+ReservationServiceUpdateServiceProcedure,
			connect.WithSchema(reservationServiceUpdateServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[reservations.ListServicesRequest, reservations.ListServicesResponse](
			httpClient,
			baseURL+ReservationServiceListServicesProcedure,
			connect.WithSchema(reservationServiceListServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assignServiceToProvider: connect.NewClient[reservations.AssignServiceToProviderRequest, reservations.AssignServiceToProviderResponse](
			httpClient,
			baseURL+ReservationServiceAssignServiceToProviderProcedure,
			connect.WithSchema(reservationServiceAssignServiceToProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeServiceFromProvider: connect.NewClient[reservations.RemoveServiceFromProviderRequest, reservations.RemoveServiceFromProviderResponse](
			httpClient,
			baseURL+ReservationServiceRemoveServiceFromProviderProcedure,
			connect.WithSchema(reservationServiceRemoveServiceFromProviderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProviderServicesList: connect.NewClient[reservations.GetProviderServicesListRequest, reservations.GetProviderServicesListResponse](
			httpClient,
			baseURL+ReservationServiceGetProviderServicesListProcedure,
			connect.WithSchema(reservationServiceGetProviderServicesListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProviderService: connect.NewClient[reservations.UpdateProviderServiceRequest, reservations.UpdateProviderServiceResponse](
			httpClient,
			baseURL+ReservationServiceUpdateProviderServiceProcedure,
			connect.WithSchema(reservationServiceUpdateProviderServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWeeklySchedule: connect.NewClient[reservations.CreateWeeklyScheduleRequest, reservations.CreateWeeklyScheduleResponse](
			httpClient,
			baseURL+ReservationServiceCreateWeeklyScheduleProcedure,
			connect.WithSchema(reservationServiceCreateWeeklyScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWeeklyScheduleList: connect.NewClient[reservations.GetWeeklyScheduleListRequest, reservations.GetWeeklyScheduleListResponse](
			httpClient,
			baseURL+ReservationServiceGetWeeklyScheduleListProcedure,
			connect.WithSchema(reservationServiceGetWeeklyScheduleListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateWeeklySchedule: connect.NewClient[reservations.UpdateWeeklyScheduleRequest, reservations.UpdateWeeklyScheduleResponse](
			httpClient,
			baseURL+ReservationServiceUpdateWeeklyScheduleProcedure,
			connect.WithSchema(reservationServiceUpdateWeeklyScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateTimeSlots: connect.NewClient[reservations.GenerateTimeSlotsRequest, reservations.GenerateTimeSlotsResponse](
			httpClient,
			baseURL+ReservationServiceGenerateTimeSlotsProcedure,
			connect.WithSchema(reservationServiceGenerateTimeSlotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTimeSlotsList: connect.NewClient[reservations.GetTimeSlotsListRequest, reservations.GetTimeSlotsListResponse](
			httpClient,
			baseURL+ReservationServiceGetTimeSlotsListProcedure,
			connect.WithSchema(reservationServiceGetTimeSlotsListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTimeSlot: connect.NewClient[reservations.UpdateTimeSlotRequest, reservations.UpdateTimeSlotResponse](
			httpClient,
			baseURL+ReservationServiceUpdateTimeSlotProcedure,
			connect.WithSchema(reservationServiceUpdateTimeSlotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeTimeSlots: connect.NewClient[reservations.RemoveTimeSlotsRequest, reservations.RemoveTimeSlotsResponse](
			httpClient,
			baseURL+ReservationServiceRemoveTimeSlotsProcedure,
			connect.WithSchema(reservationServiceRemoveTimeSlotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProviderServicesWithUsers: connect.NewClient[reservations.GetProviderServicesWithUsersRequest, reservations.GetProviderServicesWithUsersResponse](
			httpClient,
			baseURL+ReservationServiceGetProviderServicesWithUsersProcedure,
			connect.WithSchema(reservationServiceGetProviderServicesWithUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addFacilityImage: connect.NewClient[reservations.FacilityImage, reservations.FacilityImage](
			httpClient,
			baseURL+ReservationServiceAddFacilityImageProcedure,
			connect.WithSchema(reservationServiceAddFacilityImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFacilityImage: connect.NewClient[reservations.DeleteFacilityImageRequest, reservations.DeleteFacilityImageResponse](
			httpClient,
			baseURL+ReservationServiceDeleteFacilityImageProcedure,
			connect.WithSchema(reservationServiceDeleteFacilityImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFacilityImages: connect.NewClient[reservations.GetFacilityImagesRequest, reservations.GetFacilityImagesResponse](
			httpClient,
			baseURL+ReservationServiceGetFacilityImagesProcedure,
			connect.WithSchema(reservationServiceGetFacilityImagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createReservation: connect.NewClient[reservations.CreateReservationRequest, reservations.CreateReservationResponse](
			httpClient,
			baseURL+ReservationServiceCreateReservationProcedure,
			connect.WithSchema(reservationServiceCreateReservationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelReservation: connect.NewClient[reservations.CancelReservationRequest, reservations.CancelReservationResponse](
			httpClient,
			baseURL+ReservationServiceCancelReservationProcedure,
			connect.WithSchema(reservationServiceCancelReservationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateReservationStatus: connect.NewClient[reservations.UpdateReservationStatusRequest, reservations.UpdateReservationStatusResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationStatusProcedure,
			connect.WithSchema(reservationServiceUpdateReservationStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		markAttendance: connect.NewClient[reservations.MarkAttendanceRequest, reservations.MarkAttendanceResponse](
			httpClient,
			baseURL+ReservationServiceMarkAttendanceProcedure,
			connect.WithSchema(reservationServiceMarkAttendanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listReservations: connect.NewClient[reservations.ListReservationsRequest, reservations.ListReservationsResponse](
			httpClient,
			baseURL+ReservationServiceListReservationsProcedure,
			connect.WithSchema(reservationServiceListReservationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAvailableTimeSlots: connect.NewClient[reservations.ListAvailableTimeSlotsRequest, reservations.ListAvailableTimeSlotsResponse](
			httpClient,
			baseURL+ReservationServiceListAvailableTimeSlotsProcedure,
			connect.WithSchema(reservationServiceListAvailableTimeSlotsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProviderUnavailability: connect.NewClient[reservations.CreateProviderUnavailabilityRequest, reservations.CreateProviderUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceCreateProviderUnavailabilityProcedure,
			connect.WithSchema(reservationServiceCreateProviderUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProviderUnavailability: connect.NewClient[reservations.ListProviderUnavailabilityRequest, reservations.ListProviderUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceListProviderUnavailabilityProcedure,
			connect.WithSchema(reservationServiceListProviderUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProviderUnavailability: connect.NewClient[reservations.DeleteProviderUnavailabilityRequest, reservations.DeleteProviderUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceDeleteProviderUnavailabilityProcedure,
			connect.WithSchema(reservationServiceDeleteProviderUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoomType: connect.NewClient[reservations.CreateRoomTypeRequest, reservations.CreateRoomTypeResponse](
			httpClient,
			baseURL+ReservationServiceCreateRoomTypeProcedure,
			connect.WithSchema(reservationServiceCreateRoomTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoomTypes: connect.NewClient[reservations.ListRoomTypesRequest, reservations.ListRoomTypesResponse](
			httpClient,
			baseURL+ReservationServiceListRoomTypesProcedure,
			connect.WithSchema(reservationServiceListRoomTypesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoomType: connect.NewClient[reservations.DeleteRoomTypeRequest, reservations.DeleteRoomTypeResponse](
			httpClient,
			baseURL+ReservationServiceDeleteRoomTypeProcedure,
			connect.WithSchema(reservationServiceDeleteRoomTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRoom: connect.NewClient[reservations.CreateRoomRequest, reservations.CreateRoomResponse](
			httpClient,
			baseURL+ReservationServiceCreateRoomProcedure,
			connect.WithSchema(reservationServiceCreateRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRooms: connect.NewClient[reservations.ListRoomsRequest, reservations.ListRoomsResponse](
			httpClient,
			baseURL+ReservationServiceListRoomsProcedure,
			connect.WithSchema(reservationServiceListRoomsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoom: connect.NewClient[reservations.DeleteRoomRequest, reservations.DeleteRoomResponse](
			httpClient,
			baseURL+ReservationServiceDeleteRoomProcedure,
			connect.WithSchema(reservationServiceDeleteRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addRoomImage: connect.NewClient[reservations.AddRoomImageRequest, reservations.AddRoomImageResponse](
			httpClient,
			baseURL+ReservationServiceAddRoomImageProcedure,
			connect.WithSchema(reservationServiceAddRoomImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoomImages: connect.NewClient[reservations.GetRoomImagesRequest, reservations.GetRoomImagesResponse](
			httpClient,
			baseURL+ReservationServiceGetRoomImagesProcedure,
			connect.WithSchema(reservationServiceGetRoomImagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRoomImage: connect.NewClient[reservations.DeleteRoomImageRequest, reservations.DeleteRoomImageResponse](
			httpClient,
			baseURL+ReservationServiceDeleteRoomImageProcedure,
			connect.WithSchema(reservationServiceDeleteRoomImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkRoomAvailability: connect.NewClient[reservations.CheckRoomAvailabilityRequest, reservations.CheckRoomAvailabilityResponse](
			httpClient,
			baseURL+ReservationServiceCheckRoomAvailabilityProcedure,
			connect.WithSchema(reservationServiceCheckRoomAvailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoomAvailability: connect.NewClient[reservations.ListRoomAvailabilityRequest, reservations.ListRoomAvailabilityResponse](
			httpClient,
			baseURL+ReservationServiceListRoomAvailabilityProcedure,
			connect.WithSchema(reservationServiceListRoomAvailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createServiceUnavailability: connect.NewClient[reservations.CreateServiceUnavailabilityRequest, reservations.CreateServiceUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceCreateServiceUnavailabilityProcedure,
			connect.WithSchema(reservationServiceCreateServiceUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listServiceUnavailability: connect.NewClient[reservations.ListServiceUnavailabilityRequest, reservations.ListServiceUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceListServiceUnavailabilityProcedure,
			connect.WithSchema(reservationServiceListServiceUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteServiceUnavailability: connect.NewClient[reservations.DeleteServiceUnavailabilityRequest, reservations.DeleteServiceUnavailabilityResponse](
			httpClient,
			baseURL+ReservationServiceDeleteServiceUnavailabilityProcedure,
			connect.WithSchema(reservationServiceDeleteServiceUnavailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// reservationServiceClient implements ReservationServiceClient.
type reservationServiceClient struct {
	createFacility               *connect.Client[reservations.CreateFacilityRequest, reservations.CreateFacilityResponse]
	updateFacility               *connect.Client[reservations.UpdateFacilityRequest, reservations.UpdateFacilityResponse]
	listFacilities               *connect.Client[reservations.ListFacilitiesRequest, reservations.ListFacilitiesResponse]
	createService                *connect.Client[reservations.CreateServiceRequest, reservations.CreateServiceResponse]
	updateService                *connect.Client[reservations.UpdateServiceRequest, reservations.UpdateServiceResponse]
	listServices                 *connect.Client[reservations.ListServicesRequest, reservations.ListServicesResponse]
	assignServiceToProvider      *connect.Client[reservations.AssignServiceToProviderRequest, reservations.AssignServiceToProviderResponse]
	removeServiceFromProvider    *connect.Client[reservations.RemoveServiceFromProviderRequest, reservations.RemoveServiceFromProviderResponse]
	getProviderServicesList      *connect.Client[reservations.GetProviderServicesListRequest, reservations.GetProviderServicesListResponse]
	updateProviderService        *connect.Client[reservations.UpdateProviderServiceRequest, reservations.UpdateProviderServiceResponse]
	createWeeklySchedule         *connect.Client[reservations.CreateWeeklyScheduleRequest, reservations.CreateWeeklyScheduleResponse]
	getWeeklyScheduleList        *connect.Client[reservations.GetWeeklyScheduleListRequest, reservations.GetWeeklyScheduleListResponse]
	updateWeeklySchedule         *connect.Client[reservations.UpdateWeeklyScheduleRequest, reservations.UpdateWeeklyScheduleResponse]
	generateTimeSlots            *connect.Client[reservations.GenerateTimeSlotsRequest, reservations.GenerateTimeSlotsResponse]
	getTimeSlotsList             *connect.Client[reservations.GetTimeSlotsListRequest, reservations.GetTimeSlotsListResponse]
	updateTimeSlot               *connect.Client[reservations.UpdateTimeSlotRequest, reservations.UpdateTimeSlotResponse]
	removeTimeSlots              *connect.Client[reservations.RemoveTimeSlotsRequest, reservations.RemoveTimeSlotsResponse]
	getProviderServicesWithUsers *connect.Client[reservations.GetProviderServicesWithUsersRequest, reservations.GetProviderServicesWithUsersResponse]
	addFacilityImage             *connect.Client[reservations.FacilityImage, reservations.FacilityImage]
	deleteFacilityImage          *connect.Client[reservations.DeleteFacilityImageRequest, reservations.DeleteFacilityImageResponse]
	getFacilityImages            *connect.Client[reservations.GetFacilityImagesRequest, reservations.GetFacilityImagesResponse]
	createReservation            *connect.Client[reservations.CreateReservationRequest, reservations.CreateReservationResponse]
	cancelReservation            *connect.Client[reservations.CancelReservationRequest, reservations.CancelReservationResponse]
	updateReservationStatus      *connect.Client[reservations.UpdateReservationStatusRequest, reservations.UpdateReservationStatusResponse]
	markAttendance               *connect.Client[reservations.MarkAttendanceRequest, reservations.MarkAttendanceResponse]
	listReservations             *connect.Client[reservations.ListReservationsRequest, reservations.ListReservationsResponse]
	listAvailableTimeSlots       *connect.Client[reservations.ListAvailableTimeSlotsRequest, reservations.ListAvailableTimeSlotsResponse]
	createProviderUnavailability *connect.Client[reservations.CreateProviderUnavailabilityRequest, reservations.CreateProviderUnavailabilityResponse]
	listProviderUnavailability   *connect.Client[reservations.ListProviderUnavailabilityRequest, reservations.ListProviderUnavailabilityResponse]
	deleteProviderUnavailability *connect.Client[reservations.DeleteProviderUnavailabilityRequest, reservations.DeleteProviderUnavailabilityResponse]
	createRoomType               *connect.Client[reservations.CreateRoomTypeRequest, reservations.CreateRoomTypeResponse]
	listRoomTypes                *connect.Client[reservations.ListRoomTypesRequest, reservations.ListRoomTypesResponse]
	deleteRoomType               *connect.Client[reservations.DeleteRoomTypeRequest, reservations.DeleteRoomTypeResponse]
	createRoom                   *connect.Client[reservations.CreateRoomRequest, reservations.CreateRoomResponse]
	listRooms                    *connect.Client[reservations.ListRoomsRequest, reservations.ListRoomsResponse]
	deleteRoom                   *connect.Client[reservations.DeleteRoomRequest, reservations.DeleteRoomResponse]
	addRoomImage                 *connect.Client[reservations.AddRoomImageRequest, reservations.AddRoomImageResponse]
	getRoomImages                *connect.Client[reservations.GetRoomImagesRequest, reservations.GetRoomImagesResponse]
	deleteRoomImage              *connect.Client[reservations.DeleteRoomImageRequest, reservations.DeleteRoomImageResponse]
	checkRoomAvailability        *connect.Client[reservations.CheckRoomAvailabilityRequest, reservations.CheckRoomAvailabilityResponse]
	listRoomAvailability         *connect.Client[reservations.ListRoomAvailabilityRequest, reservations.ListRoomAvailabilityResponse]
	createServiceUnavailability  *connect.Client[reservations.CreateServiceUnavailabilityRequest, reservations.CreateServiceUnavailabilityResponse]
	listServiceUnavailability    *connect.Client[reservations.ListServiceUnavailabilityRequest, reservations.ListServiceUnavailabilityResponse]
	deleteServiceUnavailability  *connect.Client[reservations.DeleteServiceUnavailabilityRequest, reservations.DeleteServiceUnavailabilityResponse]
}

// CreateFacility calls reservation.ReservationService.CreateFacility.
func (c *reservationServiceClient) CreateFacility(ctx context.Context, req *connect.Request[reservations.CreateFacilityRequest]) (*connect.Response[reservations.CreateFacilityResponse], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// UpdateFacility calls reservation.ReservationService.UpdateFacility.
func (c *reservationServiceClient) UpdateFacility(ctx context.Context, req *connect.Request[reservations.UpdateFacilityRequest]) (*connect.Response[reservations.UpdateFacilityResponse], error) {
	return c.updateFacility.CallUnary(ctx, req)
}

// ListFacilities calls reservation.ReservationService.ListFacilities.
func (c *reservationServiceClient) ListFacilities(ctx context.Context, req *connect.Request[reservations.ListFacilitiesRequest]) (*connect.Response[reservations.ListFacilitiesResponse], error) {
	return c.listFacilities.CallUnary(ctx, req)
}

// CreateService calls reservation.ReservationService.CreateService.
func (c *reservationServiceClient) CreateService(ctx context.Context, req *connect.Request[reservations.CreateServiceRequest]) (*connect.Response[reservations.CreateServiceResponse], error) {
	return c.createService.CallUnary(ctx, req)
}

// UpdateService calls reservation.ReservationService.UpdateService.
func (c *reservationServiceClient) UpdateService(ctx context.Context, req *connect.Request[reservations.UpdateServiceRequest]) (*connect.Response[reservations.UpdateServiceResponse], error) {
	return c.updateService.CallUnary(ctx, req)
}

// ListServices calls reservation.ReservationService.ListServices.
func (c *reservationServiceClient) ListServices(ctx context.Context, req *connect.Request[reservations.ListServicesRequest]) (*connect.Response[reservations.ListServicesResponse], error) {
	return c.listServices.CallUnary(ctx, req)
}

// AssignServiceToProvider calls reservation.ReservationService.AssignServiceToProvider.
func (c *reservationServiceClient) AssignServiceToProvider(ctx context.Context, req *connect.Request[reservations.AssignServiceToProviderRequest]) (*connect.Response[reservations.AssignServiceToProviderResponse], error) {
	return c.assignServiceToProvider.CallUnary(ctx, req)
}

// RemoveServiceFromProvider calls reservation.ReservationService.RemoveServiceFromProvider.
func (c *reservationServiceClient) RemoveServiceFromProvider(ctx context.Context, req *connect.Request[reservations.RemoveServiceFromProviderRequest]) (*connect.Response[reservations.RemoveServiceFromProviderResponse], error) {
	return c.removeServiceFromProvider.CallUnary(ctx, req)
}

// GetProviderServicesList calls reservation.ReservationService.GetProviderServicesList.
func (c *reservationServiceClient) GetProviderServicesList(ctx context.Context, req *connect.Request[reservations.GetProviderServicesListRequest]) (*connect.Response[reservations.GetProviderServicesListResponse], error) {
	return c.getProviderServicesList.CallUnary(ctx, req)
}

// UpdateProviderService calls reservation.ReservationService.UpdateProviderService.
func (c *reservationServiceClient) UpdateProviderService(ctx context.Context, req *connect.Request[reservations.UpdateProviderServiceRequest]) (*connect.Response[reservations.UpdateProviderServiceResponse], error) {
	return c.updateProviderService.CallUnary(ctx, req)
}

// CreateWeeklySchedule calls reservation.ReservationService.CreateWeeklySchedule.
func (c *reservationServiceClient) CreateWeeklySchedule(ctx context.Context, req *connect.Request[reservations.CreateWeeklyScheduleRequest]) (*connect.Response[reservations.CreateWeeklyScheduleResponse], error) {
	return c.createWeeklySchedule.CallUnary(ctx, req)
}

// GetWeeklyScheduleList calls reservation.ReservationService.GetWeeklyScheduleList.
func (c *reservationServiceClient) GetWeeklyScheduleList(ctx context.Context, req *connect.Request[reservations.GetWeeklyScheduleListRequest]) (*connect.Response[reservations.GetWeeklyScheduleListResponse], error) {
	return c.getWeeklyScheduleList.CallUnary(ctx, req)
}

// UpdateWeeklySchedule calls reservation.ReservationService.UpdateWeeklySchedule.
func (c *reservationServiceClient) UpdateWeeklySchedule(ctx context.Context, req *connect.Request[reservations.UpdateWeeklyScheduleRequest]) (*connect.Response[reservations.UpdateWeeklyScheduleResponse], error) {
	return c.updateWeeklySchedule.CallUnary(ctx, req)
}

// GenerateTimeSlots calls reservation.ReservationService.GenerateTimeSlots.
func (c *reservationServiceClient) GenerateTimeSlots(ctx context.Context, req *connect.Request[reservations.GenerateTimeSlotsRequest]) (*connect.Response[reservations.GenerateTimeSlotsResponse], error) {
	return c.generateTimeSlots.CallUnary(ctx, req)
}

// GetTimeSlotsList calls reservation.ReservationService.GetTimeSlotsList.
func (c *reservationServiceClient) GetTimeSlotsList(ctx context.Context, req *connect.Request[reservations.GetTimeSlotsListRequest]) (*connect.Response[reservations.GetTimeSlotsListResponse], error) {
	return c.getTimeSlotsList.CallUnary(ctx, req)
}

// UpdateTimeSlot calls reservation.ReservationService.UpdateTimeSlot.
func (c *reservationServiceClient) UpdateTimeSlot(ctx context.Context, req *connect.Request[reservations.UpdateTimeSlotRequest]) (*connect.Response[reservations.UpdateTimeSlotResponse], error) {
	return c.updateTimeSlot.CallUnary(ctx, req)
}

// RemoveTimeSlots calls reservation.ReservationService.RemoveTimeSlots.
func (c *reservationServiceClient) RemoveTimeSlots(ctx context.Context, req *connect.Request[reservations.RemoveTimeSlotsRequest]) (*connect.Response[reservations.RemoveTimeSlotsResponse], error) {
	return c.removeTimeSlots.CallUnary(ctx, req)
}

// GetProviderServicesWithUsers calls reservation.ReservationService.GetProviderServicesWithUsers.
func (c *reservationServiceClient) GetProviderServicesWithUsers(ctx context.Context, req *connect.Request[reservations.GetProviderServicesWithUsersRequest]) (*connect.Response[reservations.GetProviderServicesWithUsersResponse], error) {
	return c.getProviderServicesWithUsers.CallUnary(ctx, req)
}

// AddFacilityImage calls reservation.ReservationService.AddFacilityImage.
func (c *reservationServiceClient) AddFacilityImage(ctx context.Context, req *connect.Request[reservations.FacilityImage]) (*connect.Response[reservations.FacilityImage], error) {
	return c.addFacilityImage.CallUnary(ctx, req)
}

// DeleteFacilityImage calls reservation.ReservationService.DeleteFacilityImage.
func (c *reservationServiceClient) DeleteFacilityImage(ctx context.Context, req *connect.Request[reservations.DeleteFacilityImageRequest]) (*connect.Response[reservations.DeleteFacilityImageResponse], error) {
	return c.deleteFacilityImage.CallUnary(ctx, req)
}

// GetFacilityImages calls reservation.ReservationService.GetFacilityImages.
func (c *reservationServiceClient) GetFacilityImages(ctx context.Context, req *connect.Request[reservations.GetFacilityImagesRequest]) (*connect.Response[reservations.GetFacilityImagesResponse], error) {
	return c.getFacilityImages.CallUnary(ctx, req)
}

// CreateReservation calls reservation.ReservationService.CreateReservation.
func (c *reservationServiceClient) CreateReservation(ctx context.Context, req *connect.Request[reservations.CreateReservationRequest]) (*connect.Response[reservations.CreateReservationResponse], error) {
	return c.createReservation.CallUnary(ctx, req)
}

// CancelReservation calls reservation.ReservationService.CancelReservation.
func (c *reservationServiceClient) CancelReservation(ctx context.Context, req *connect.Request[reservations.CancelReservationRequest]) (*connect.Response[reservations.CancelReservationResponse], error) {
	return c.cancelReservation.CallUnary(ctx, req)
}

// UpdateReservationStatus calls reservation.ReservationService.UpdateReservationStatus.
func (c *reservationServiceClient) UpdateReservationStatus(ctx context.Context, req *connect.Request[reservations.UpdateReservationStatusRequest]) (*connect.Response[reservations.UpdateReservationStatusResponse], error) {
	return c.updateReservationStatus.CallUnary(ctx, req)
}

// MarkAttendance calls reservation.ReservationService.MarkAttendance.
func (c *reservationServiceClient) MarkAttendance(ctx context.Context, req *connect.Request[reservations.MarkAttendanceRequest]) (*connect.Response[reservations.MarkAttendanceResponse], error) {
	return c.markAttendance.CallUnary(ctx, req)
}

// ListReservations calls reservation.ReservationService.ListReservations.
func (c *reservationServiceClient) ListReservations(ctx context.Context, req *connect.Request[reservations.ListReservationsRequest]) (*connect.Response[reservations.ListReservationsResponse], error) {
	return c.listReservations.CallUnary(ctx, req)
}

// ListAvailableTimeSlots calls reservation.ReservationService.ListAvailableTimeSlots.
func (c *reservationServiceClient) ListAvailableTimeSlots(ctx context.Context, req *connect.Request[reservations.ListAvailableTimeSlotsRequest]) (*connect.Response[reservations.ListAvailableTimeSlotsResponse], error) {
	return c.listAvailableTimeSlots.CallUnary(ctx, req)
}

// CreateProviderUnavailability calls reservation.ReservationService.CreateProviderUnavailability.
func (c *reservationServiceClient) CreateProviderUnavailability(ctx context.Context, req *connect.Request[reservations.CreateProviderUnavailabilityRequest]) (*connect.Response[reservations.CreateProviderUnavailabilityResponse], error) {
	return c.createProviderUnavailability.CallUnary(ctx, req)
}

// ListProviderUnavailability calls reservation.ReservationService.ListProviderUnavailability.
func (c *reservationServiceClient) ListProviderUnavailability(ctx context.Context, req *connect.Request[reservations.ListProviderUnavailabilityRequest]) (*connect.Response[reservations.ListProviderUnavailabilityResponse], error) {
	return c.listProviderUnavailability.CallUnary(ctx, req)
}

// DeleteProviderUnavailability calls reservation.ReservationService.DeleteProviderUnavailability.
func (c *reservationServiceClient) DeleteProviderUnavailability(ctx context.Context, req *connect.Request[reservations.DeleteProviderUnavailabilityRequest]) (*connect.Response[reservations.DeleteProviderUnavailabilityResponse], error) {
	return c.deleteProviderUnavailability.CallUnary(ctx, req)
}

// CreateRoomType calls reservation.ReservationService.CreateRoomType.
func (c *reservationServiceClient) CreateRoomType(ctx context.Context, req *connect.Request[reservations.CreateRoomTypeRequest]) (*connect.Response[reservations.CreateRoomTypeResponse], error) {
	return c.createRoomType.CallUnary(ctx, req)
}

// ListRoomTypes calls reservation.ReservationService.ListRoomTypes.
func (c *reservationServiceClient) ListRoomTypes(ctx context.Context, req *connect.Request[reservations.ListRoomTypesRequest]) (*connect.Response[reservations.ListRoomTypesResponse], error) {
	return c.listRoomTypes.CallUnary(ctx, req)
}

// DeleteRoomType calls reservation.ReservationService.DeleteRoomType.
func (c *reservationServiceClient) DeleteRoomType(ctx context.Context, req *connect.Request[reservations.DeleteRoomTypeRequest]) (*connect.Response[reservations.DeleteRoomTypeResponse], error) {
	return c.deleteRoomType.CallUnary(ctx, req)
}

// CreateRoom calls reservation.ReservationService.CreateRoom.
func (c *reservationServiceClient) CreateRoom(ctx context.Context, req *connect.Request[reservations.CreateRoomRequest]) (*connect.Response[reservations.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// ListRooms calls reservation.ReservationService.ListRooms.
func (c *reservationServiceClient) ListRooms(ctx context.Context, req *connect.Request[reservations.ListRoomsRequest]) (*connect.Response[reservations.ListRoomsResponse], error) {
	return c.listRooms.CallUnary(ctx, req)
}

// DeleteRoom calls reservation.ReservationService.DeleteRoom.
func (c *reservationServiceClient) DeleteRoom(ctx context.Context, req *connect.Request[reservations.DeleteRoomRequest]) (*connect.Response[reservations.DeleteRoomResponse], error) {
	return c.deleteRoom.CallUnary(ctx, req)
}

// AddRoomImage calls reservation.ReservationService.AddRoomImage.
func (c *reservationServiceClient) AddRoomImage(ctx context.Context, req *connect.Request[reservations.AddRoomImageRequest]) (*connect.Response[reservations.AddRoomImageResponse], error) {
	return c.addRoomImage.CallUnary(ctx, req)
}

// GetRoomImages calls reservation.ReservationService.GetRoomImages.
func (c *reservationServiceClient) GetRoomImages(ctx context.Context, req *connect.Request[reservations.GetRoomImagesRequest]) (*connect.Response[reservations.GetRoomImagesResponse], error) {
	return c.getRoomImages.CallUnary(ctx, req)
}

// DeleteRoomImage calls reservation.ReservationService.DeleteRoomImage.
func (c *reservationServiceClient) DeleteRoomImage(ctx context.Context, req *connect.Request[reservations.DeleteRoomImageRequest]) (*connect.Response[reservations.DeleteRoomImageResponse], error) {
	return c.deleteRoomImage.CallUnary(ctx, req)
}

// CheckRoomAvailability calls reservation.ReservationService.CheckRoomAvailability.
func (c *reservationServiceClient) CheckRoomAvailability(ctx context.Context, req *connect.Request[reservations.CheckRoomAvailabilityRequest]) (*connect.Response[reservations.CheckRoomAvailabilityResponse], error) {
	return c.checkRoomAvailability.CallUnary(ctx, req)
}

// ListRoomAvailability calls reservation.ReservationService.ListRoomAvailability.
func (c *reservationServiceClient) ListRoomAvailability(ctx context.Context, req *connect.Request[reservations.ListRoomAvailabilityRequest]) (*connect.Response[reservations.ListRoomAvailabilityResponse], error) {
	return c.listRoomAvailability.CallUnary(ctx, req)
}

// CreateServiceUnavailability calls reservation.ReservationService.CreateServiceUnavailability.
func (c *reservationServiceClient) CreateServiceUnavailability(ctx context.Context, req *connect.Request[reservations.CreateServiceUnavailabilityRequest]) (*connect.Response[reservations.CreateServiceUnavailabilityResponse], error) {
	return c.createServiceUnavailability.CallUnary(ctx, req)
}

// ListServiceUnavailability calls reservation.ReservationService.ListServiceUnavailability.
func (c *reservationServiceClient) ListServiceUnavailability(ctx context.Context, req *connect.Request[reservations.ListServiceUnavailabilityRequest]) (*connect.Response[reservations.ListServiceUnavailabilityResponse], error) {
	return c.listServiceUnavailability.CallUnary(ctx, req)
}

// DeleteServiceUnavailability calls reservation.ReservationService.DeleteServiceUnavailability.
func (c *reservationServiceClient) DeleteServiceUnavailability(ctx context.Context, req *connect.Request[reservations.DeleteServiceUnavailabilityRequest]) (*connect.Response[reservations.DeleteServiceUnavailabilityResponse], error) {
	return c.deleteServiceUnavailability.CallUnary(ctx, req)
}

// ReservationServiceHandler is an implementation of the reservation.ReservationService service.
type ReservationServiceHandler interface {
	// facility related methods
	// ایجاد یک فسیلیتی جدید | Create a new facility
	CreateFacility(context.Context, *connect.Request[reservations.CreateFacilityRequest]) (*connect.Response[reservations.CreateFacilityResponse], error)
	// ویرایش یم فسیلیتی| update a  facility
	UpdateFacility(context.Context, *connect.Request[reservations.UpdateFacilityRequest]) (*connect.Response[reservations.UpdateFacilityResponse], error)
	// دریافت لیست مکان‌ها | List all facilities
	ListFacilities(context.Context, *connect.Request[reservations.ListFacilitiesRequest]) (*connect.Response[reservations.ListFacilitiesResponse], error)
	// Service related methods
	// ایجاد سرویس جدید برای یک فسیلیتی | Create a new service for a facility
	CreateService(context.Context, *connect.Request[reservations.CreateServiceRequest]) (*connect.Response[reservations.CreateServiceResponse], error)
	// ویرایش سرویس  | Update a service for a facility
	UpdateService(context.Context, *connect.Request[reservations.UpdateServiceRequest]) (*connect.Response[reservations.UpdateServiceResponse], error)
	// دریافت لیست سرویس‌های یک فسیلیتی | List services of a facility
	ListServices(context.Context, *connect.Request[reservations.ListServicesRequest]) (*connect.Response[reservations.ListServicesResponse], error)
	// ُProvider Service  related methods
	// تخصیص یک سرویس به ارائه‌دهنده | Assign a service to a provider
	AssignServiceToProvider(context.Context, *connect.Request[reservations.AssignServiceToProviderRequest]) (*connect.Response[reservations.AssignServiceToProviderResponse], error)
	// خذف یک سرویس از ارائه‌دهنده | Remove a service from a provider
	RemoveServiceFromProvider(context.Context, *connect.Request[reservations.RemoveServiceFromProviderRequest]) (*connect.Response[reservations.RemoveServiceFromProviderResponse], error)
	// دریافت لیست سرویس‌های یک ارائه‌دهنده| Get provider services
	GetProviderServicesList(context.Context, *connect.Request[reservations.GetProviderServicesListRequest]) (*connect.Response[reservations.GetProviderServicesListResponse], error)
	// ویرایش سرویس  | Update a service for a provider
	UpdateProviderService(context.Context, *connect.Request[reservations.UpdateProviderServiceRequest]) (*connect.Response[reservations.UpdateProviderServiceResponse], error)
	// WeeklySchedule and TimeSlot releated methods
	// ایجاد برنامه‌ زمانی هفتگی برای ارائه‌دهنده | Create weekly schedule for provider
	CreateWeeklySchedule(context.Context, *connect.Request[reservations.CreateWeeklyScheduleRequest]) (*connect.Response[reservations.CreateWeeklyScheduleResponse], error)
	GetWeeklyScheduleList(context.Context, *connect.Request[reservations.GetWeeklyScheduleListRequest]) (*connect.Response[reservations.GetWeeklyScheduleListResponse], error)
	UpdateWeeklySchedule(context.Context, *connect.Request[reservations.UpdateWeeklyScheduleRequest]) (*connect.Response[reservations.UpdateWeeklyScheduleResponse], error)
	// تولید تایم‌اسلات‌ها بر اساس برنامه‌ هفتگی | Generate time slots from weekly schedule
	GenerateTimeSlots(context.Context, *connect.Request[reservations.GenerateTimeSlotsRequest]) (*connect.Response[reservations.GenerateTimeSlotsResponse], error)
	GetTimeSlotsList(context.Context, *connect.Request[reservations.GetTimeSlotsListRequest]) (*connect.Response[reservations.GetTimeSlotsListResponse], error)
	UpdateTimeSlot(context.Context, *connect.Request[reservations.UpdateTimeSlotRequest]) (*connect.Response[reservations.UpdateTimeSlotResponse], error)
	RemoveTimeSlots(context.Context, *connect.Request[reservations.RemoveTimeSlotsRequest]) (*connect.Response[reservations.RemoveTimeSlotsResponse], error)
	GetProviderServicesWithUsers(context.Context, *connect.Request[reservations.GetProviderServicesWithUsersRequest]) (*connect.Response[reservations.GetProviderServicesWithUsersResponse], error)
	// افزودن تصویر به فسیلیتی | Add an image to a facility
	AddFacilityImage(context.Context, *connect.Request[reservations.FacilityImage]) (*connect.Response[reservations.FacilityImage], error)
	// حذف تصویر از فسیلیتی | Delete an image from a facility
	DeleteFacilityImage(context.Context, *connect.Request[reservations.DeleteFacilityImageRequest]) (*connect.Response[reservations.DeleteFacilityImageResponse], error)
	// دریافت تصاویر فسیلیتی | Get images of a facility
	GetFacilityImages(context.Context, *connect.Request[reservations.GetFacilityImagesRequest]) (*connect.Response[reservations.GetFacilityImagesResponse], error)
	// ثبت یک رزرو جدید | Create a new reservation
	CreateReservation(context.Context, *connect.Request[reservations.CreateReservationRequest]) (*connect.Response[reservations.CreateReservationResponse], error)
	// لغو رزرو ثبت‌شده | Cancel an existing reservation
	CancelReservation(context.Context, *connect.Request[reservations.CancelReservationRequest]) (*connect.Response[reservations.CancelReservationResponse], error)
	// بروزرسانی وضعیت رزرو (تأیید، لغو، انجام‌شده) | Update reservation status
	UpdateReservationStatus(context.Context, *connect.Request[reservations.UpdateReservationStatusRequest]) (*connect.Response[reservations.UpdateReservationStatusResponse], error)
	// ثبت وضعیت حضور یا عدم حضور کاربر | Mark attendance status for reservation
	MarkAttendance(context.Context, *connect.Request[reservations.MarkAttendanceRequest]) (*connect.Response[reservations.MarkAttendanceResponse], error)
	// دریافت لیست رزروهای کاربر | List user reservations
	ListReservations(context.Context, *connect.Request[reservations.ListReservationsRequest]) (*connect.Response[reservations.ListReservationsResponse], error)
	// دریافت تایم‌اسلات‌های آزاد برای رزرو | List available time slots
	ListAvailableTimeSlots(context.Context, *connect.Request[reservations.ListAvailableTimeSlotsRequest]) (*connect.Response[reservations.ListAvailableTimeSlotsResponse], error)
	// ایجاد بازه‌ی غیبت برای ارائه‌دهنده | Create unavailability period for a provider
	CreateProviderUnavailability(context.Context, *connect.Request[reservations.CreateProviderUnavailabilityRequest]) (*connect.Response[reservations.CreateProviderUnavailabilityResponse], error)
	// دریافت لیست بازه‌های غیبت ارائه‌دهنده | List unavailability periods of a provider
	ListProviderUnavailability(context.Context, *connect.Request[reservations.ListProviderUnavailabilityRequest]) (*connect.Response[reservations.ListProviderUnavailabilityResponse], error)
	// حذف بازه‌ی غیبت ارائه‌دهنده | Delete an unavailability period of a provider
	DeleteProviderUnavailability(context.Context, *connect.Request[reservations.DeleteProviderUnavailabilityRequest]) (*connect.Response[reservations.DeleteProviderUnavailabilityResponse], error)
	// ایجاد نوع اتاق | Create room type
	CreateRoomType(context.Context, *connect.Request[reservations.CreateRoomTypeRequest]) (*connect.Response[reservations.CreateRoomTypeResponse], error)
	// لیست نوع اتاق‌های یک هتل | List room types for a hotel
	ListRoomTypes(context.Context, *connect.Request[reservations.ListRoomTypesRequest]) (*connect.Response[reservations.ListRoomTypesResponse], error)
	// حذف نوع اتاق | Delete room type
	DeleteRoomType(context.Context, *connect.Request[reservations.DeleteRoomTypeRequest]) (*connect.Response[reservations.DeleteRoomTypeResponse], error)
	// ایجاد اتاق جدید | Create a room
	CreateRoom(context.Context, *connect.Request[reservations.CreateRoomRequest]) (*connect.Response[reservations.CreateRoomResponse], error)
	// لیست اتاق‌های یک هتل | List rooms of a hotel
	ListRooms(context.Context, *connect.Request[reservations.ListRoomsRequest]) (*connect.Response[reservations.ListRoomsResponse], error)
	// حذف اتاق | Delete a room
	DeleteRoom(context.Context, *connect.Request[reservations.DeleteRoomRequest]) (*connect.Response[reservations.DeleteRoomResponse], error)
	// افزودن تصویر به اتاق | Add image to room
	AddRoomImage(context.Context, *connect.Request[reservations.AddRoomImageRequest]) (*connect.Response[reservations.AddRoomImageResponse], error)
	// دریافت تصاویر یک اتاق | Get images of a room
	GetRoomImages(context.Context, *connect.Request[reservations.GetRoomImagesRequest]) (*connect.Response[reservations.GetRoomImagesResponse], error)
	// حذف تصویر از اتاق | Delete room image
	DeleteRoomImage(context.Context, *connect.Request[reservations.DeleteRoomImageRequest]) (*connect.Response[reservations.DeleteRoomImageResponse], error)
	// بررسی در دسترس بودن اتاق‌ها | Check room availability
	CheckRoomAvailability(context.Context, *connect.Request[reservations.CheckRoomAvailabilityRequest]) (*connect.Response[reservations.CheckRoomAvailabilityResponse], error)
	// لیست شب‌هایی که رزرو شده‌اند | List reserved nights for room/service
	ListRoomAvailability(context.Context, *connect.Request[reservations.ListRoomAvailabilityRequest]) (*connect.Response[reservations.ListRoomAvailabilityResponse], error)
	// تعریف زمان‌های عدم دسترسی اتاق | Define room/service unavailability
	CreateServiceUnavailability(context.Context, *connect.Request[reservations.CreateServiceUnavailabilityRequest]) (*connect.Response[reservations.CreateServiceUnavailabilityResponse], error)
	// دریافت لیست زمان‌های عدم دسترسی اتاق | List service unavailability periods
	ListServiceUnavailability(context.Context, *connect.Request[reservations.ListServiceUnavailabilityRequest]) (*connect.Response[reservations.ListServiceUnavailabilityResponse], error)
	// حذف زمان عدم دسترسی | Delete service unavailability
	DeleteServiceUnavailability(context.Context, *connect.Request[reservations.DeleteServiceUnavailabilityRequest]) (*connect.Response[reservations.DeleteServiceUnavailabilityResponse], error)
}

// NewReservationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReservationServiceHandler(svc ReservationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reservationServiceCreateFacilityHandler := connect.NewUnaryHandler(
		ReservationServiceCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(reservationServiceCreateFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateFacilityHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateFacilityProcedure,
		svc.UpdateFacility,
		connect.WithSchema(reservationServiceUpdateFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListFacilitiesHandler := connect.NewUnaryHandler(
		ReservationServiceListFacilitiesProcedure,
		svc.ListFacilities,
		connect.WithSchema(reservationServiceListFacilitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateServiceHandler := connect.NewUnaryHandler(
		ReservationServiceCreateServiceProcedure,
		svc.CreateService,
		connect.WithSchema(reservationServiceCreateServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateServiceHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateServiceProcedure,
		svc.UpdateService,
		connect.WithSchema(reservationServiceUpdateServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListServicesHandler := connect.NewUnaryHandler(
		ReservationServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(reservationServiceListServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceAssignServiceToProviderHandler := connect.NewUnaryHandler(
		ReservationServiceAssignServiceToProviderProcedure,
		svc.AssignServiceToProvider,
		connect.WithSchema(reservationServiceAssignServiceToProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceRemoveServiceFromProviderHandler := connect.NewUnaryHandler(
		ReservationServiceRemoveServiceFromProviderProcedure,
		svc.RemoveServiceFromProvider,
		connect.WithSchema(reservationServiceRemoveServiceFromProviderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetProviderServicesListHandler := connect.NewUnaryHandler(
		ReservationServiceGetProviderServicesListProcedure,
		svc.GetProviderServicesList,
		connect.WithSchema(reservationServiceGetProviderServicesListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateProviderServiceHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateProviderServiceProcedure,
		svc.UpdateProviderService,
		connect.WithSchema(reservationServiceUpdateProviderServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateWeeklyScheduleHandler := connect.NewUnaryHandler(
		ReservationServiceCreateWeeklyScheduleProcedure,
		svc.CreateWeeklySchedule,
		connect.WithSchema(reservationServiceCreateWeeklyScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetWeeklyScheduleListHandler := connect.NewUnaryHandler(
		ReservationServiceGetWeeklyScheduleListProcedure,
		svc.GetWeeklyScheduleList,
		connect.WithSchema(reservationServiceGetWeeklyScheduleListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateWeeklyScheduleHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateWeeklyScheduleProcedure,
		svc.UpdateWeeklySchedule,
		connect.WithSchema(reservationServiceUpdateWeeklyScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGenerateTimeSlotsHandler := connect.NewUnaryHandler(
		ReservationServiceGenerateTimeSlotsProcedure,
		svc.GenerateTimeSlots,
		connect.WithSchema(reservationServiceGenerateTimeSlotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetTimeSlotsListHandler := connect.NewUnaryHandler(
		ReservationServiceGetTimeSlotsListProcedure,
		svc.GetTimeSlotsList,
		connect.WithSchema(reservationServiceGetTimeSlotsListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateTimeSlotHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateTimeSlotProcedure,
		svc.UpdateTimeSlot,
		connect.WithSchema(reservationServiceUpdateTimeSlotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceRemoveTimeSlotsHandler := connect.NewUnaryHandler(
		ReservationServiceRemoveTimeSlotsProcedure,
		svc.RemoveTimeSlots,
		connect.WithSchema(reservationServiceRemoveTimeSlotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetProviderServicesWithUsersHandler := connect.NewUnaryHandler(
		ReservationServiceGetProviderServicesWithUsersProcedure,
		svc.GetProviderServicesWithUsers,
		connect.WithSchema(reservationServiceGetProviderServicesWithUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceAddFacilityImageHandler := connect.NewUnaryHandler(
		ReservationServiceAddFacilityImageProcedure,
		svc.AddFacilityImage,
		connect.WithSchema(reservationServiceAddFacilityImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteFacilityImageHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteFacilityImageProcedure,
		svc.DeleteFacilityImage,
		connect.WithSchema(reservationServiceDeleteFacilityImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetFacilityImagesHandler := connect.NewUnaryHandler(
		ReservationServiceGetFacilityImagesProcedure,
		svc.GetFacilityImages,
		connect.WithSchema(reservationServiceGetFacilityImagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateReservationHandler := connect.NewUnaryHandler(
		ReservationServiceCreateReservationProcedure,
		svc.CreateReservation,
		connect.WithSchema(reservationServiceCreateReservationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCancelReservationHandler := connect.NewUnaryHandler(
		ReservationServiceCancelReservationProcedure,
		svc.CancelReservation,
		connect.WithSchema(reservationServiceCancelReservationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationStatusHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationStatusProcedure,
		svc.UpdateReservationStatus,
		connect.WithSchema(reservationServiceUpdateReservationStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceMarkAttendanceHandler := connect.NewUnaryHandler(
		ReservationServiceMarkAttendanceProcedure,
		svc.MarkAttendance,
		connect.WithSchema(reservationServiceMarkAttendanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListReservationsHandler := connect.NewUnaryHandler(
		ReservationServiceListReservationsProcedure,
		svc.ListReservations,
		connect.WithSchema(reservationServiceListReservationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListAvailableTimeSlotsHandler := connect.NewUnaryHandler(
		ReservationServiceListAvailableTimeSlotsProcedure,
		svc.ListAvailableTimeSlots,
		connect.WithSchema(reservationServiceListAvailableTimeSlotsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateProviderUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceCreateProviderUnavailabilityProcedure,
		svc.CreateProviderUnavailability,
		connect.WithSchema(reservationServiceCreateProviderUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListProviderUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceListProviderUnavailabilityProcedure,
		svc.ListProviderUnavailability,
		connect.WithSchema(reservationServiceListProviderUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteProviderUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteProviderUnavailabilityProcedure,
		svc.DeleteProviderUnavailability,
		connect.WithSchema(reservationServiceDeleteProviderUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateRoomTypeHandler := connect.NewUnaryHandler(
		ReservationServiceCreateRoomTypeProcedure,
		svc.CreateRoomType,
		connect.WithSchema(reservationServiceCreateRoomTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListRoomTypesHandler := connect.NewUnaryHandler(
		ReservationServiceListRoomTypesProcedure,
		svc.ListRoomTypes,
		connect.WithSchema(reservationServiceListRoomTypesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteRoomTypeHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteRoomTypeProcedure,
		svc.DeleteRoomType,
		connect.WithSchema(reservationServiceDeleteRoomTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateRoomHandler := connect.NewUnaryHandler(
		ReservationServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(reservationServiceCreateRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListRoomsHandler := connect.NewUnaryHandler(
		ReservationServiceListRoomsProcedure,
		svc.ListRooms,
		connect.WithSchema(reservationServiceListRoomsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteRoomHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteRoomProcedure,
		svc.DeleteRoom,
		connect.WithSchema(reservationServiceDeleteRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceAddRoomImageHandler := connect.NewUnaryHandler(
		ReservationServiceAddRoomImageProcedure,
		svc.AddRoomImage,
		connect.WithSchema(reservationServiceAddRoomImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetRoomImagesHandler := connect.NewUnaryHandler(
		ReservationServiceGetRoomImagesProcedure,
		svc.GetRoomImages,
		connect.WithSchema(reservationServiceGetRoomImagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteRoomImageHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteRoomImageProcedure,
		svc.DeleteRoomImage,
		connect.WithSchema(reservationServiceDeleteRoomImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCheckRoomAvailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceCheckRoomAvailabilityProcedure,
		svc.CheckRoomAvailability,
		connect.WithSchema(reservationServiceCheckRoomAvailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListRoomAvailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceListRoomAvailabilityProcedure,
		svc.ListRoomAvailability,
		connect.WithSchema(reservationServiceListRoomAvailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateServiceUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceCreateServiceUnavailabilityProcedure,
		svc.CreateServiceUnavailability,
		connect.WithSchema(reservationServiceCreateServiceUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceListServiceUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceListServiceUnavailabilityProcedure,
		svc.ListServiceUnavailability,
		connect.WithSchema(reservationServiceListServiceUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteServiceUnavailabilityHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteServiceUnavailabilityProcedure,
		svc.DeleteServiceUnavailability,
		connect.WithSchema(reservationServiceDeleteServiceUnavailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/reservation.ReservationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReservationServiceCreateFacilityProcedure:
			reservationServiceCreateFacilityHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateFacilityProcedure:
			reservationServiceUpdateFacilityHandler.ServeHTTP(w, r)
		case ReservationServiceListFacilitiesProcedure:
			reservationServiceListFacilitiesHandler.ServeHTTP(w, r)
		case ReservationServiceCreateServiceProcedure:
			reservationServiceCreateServiceHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateServiceProcedure:
			reservationServiceUpdateServiceHandler.ServeHTTP(w, r)
		case ReservationServiceListServicesProcedure:
			reservationServiceListServicesHandler.ServeHTTP(w, r)
		case ReservationServiceAssignServiceToProviderProcedure:
			reservationServiceAssignServiceToProviderHandler.ServeHTTP(w, r)
		case ReservationServiceRemoveServiceFromProviderProcedure:
			reservationServiceRemoveServiceFromProviderHandler.ServeHTTP(w, r)
		case ReservationServiceGetProviderServicesListProcedure:
			reservationServiceGetProviderServicesListHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateProviderServiceProcedure:
			reservationServiceUpdateProviderServiceHandler.ServeHTTP(w, r)
		case ReservationServiceCreateWeeklyScheduleProcedure:
			reservationServiceCreateWeeklyScheduleHandler.ServeHTTP(w, r)
		case ReservationServiceGetWeeklyScheduleListProcedure:
			reservationServiceGetWeeklyScheduleListHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateWeeklyScheduleProcedure:
			reservationServiceUpdateWeeklyScheduleHandler.ServeHTTP(w, r)
		case ReservationServiceGenerateTimeSlotsProcedure:
			reservationServiceGenerateTimeSlotsHandler.ServeHTTP(w, r)
		case ReservationServiceGetTimeSlotsListProcedure:
			reservationServiceGetTimeSlotsListHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateTimeSlotProcedure:
			reservationServiceUpdateTimeSlotHandler.ServeHTTP(w, r)
		case ReservationServiceRemoveTimeSlotsProcedure:
			reservationServiceRemoveTimeSlotsHandler.ServeHTTP(w, r)
		case ReservationServiceGetProviderServicesWithUsersProcedure:
			reservationServiceGetProviderServicesWithUsersHandler.ServeHTTP(w, r)
		case ReservationServiceAddFacilityImageProcedure:
			reservationServiceAddFacilityImageHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteFacilityImageProcedure:
			reservationServiceDeleteFacilityImageHandler.ServeHTTP(w, r)
		case ReservationServiceGetFacilityImagesProcedure:
			reservationServiceGetFacilityImagesHandler.ServeHTTP(w, r)
		case ReservationServiceCreateReservationProcedure:
			reservationServiceCreateReservationHandler.ServeHTTP(w, r)
		case ReservationServiceCancelReservationProcedure:
			reservationServiceCancelReservationHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationStatusProcedure:
			reservationServiceUpdateReservationStatusHandler.ServeHTTP(w, r)
		case ReservationServiceMarkAttendanceProcedure:
			reservationServiceMarkAttendanceHandler.ServeHTTP(w, r)
		case ReservationServiceListReservationsProcedure:
			reservationServiceListReservationsHandler.ServeHTTP(w, r)
		case ReservationServiceListAvailableTimeSlotsProcedure:
			reservationServiceListAvailableTimeSlotsHandler.ServeHTTP(w, r)
		case ReservationServiceCreateProviderUnavailabilityProcedure:
			reservationServiceCreateProviderUnavailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceListProviderUnavailabilityProcedure:
			reservationServiceListProviderUnavailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteProviderUnavailabilityProcedure:
			reservationServiceDeleteProviderUnavailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceCreateRoomTypeProcedure:
			reservationServiceCreateRoomTypeHandler.ServeHTTP(w, r)
		case ReservationServiceListRoomTypesProcedure:
			reservationServiceListRoomTypesHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteRoomTypeProcedure:
			reservationServiceDeleteRoomTypeHandler.ServeHTTP(w, r)
		case ReservationServiceCreateRoomProcedure:
			reservationServiceCreateRoomHandler.ServeHTTP(w, r)
		case ReservationServiceListRoomsProcedure:
			reservationServiceListRoomsHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteRoomProcedure:
			reservationServiceDeleteRoomHandler.ServeHTTP(w, r)
		case ReservationServiceAddRoomImageProcedure:
			reservationServiceAddRoomImageHandler.ServeHTTP(w, r)
		case ReservationServiceGetRoomImagesProcedure:
			reservationServiceGetRoomImagesHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteRoomImageProcedure:
			reservationServiceDeleteRoomImageHandler.ServeHTTP(w, r)
		case ReservationServiceCheckRoomAvailabilityProcedure:
			reservationServiceCheckRoomAvailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceListRoomAvailabilityProcedure:
			reservationServiceListRoomAvailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceCreateServiceUnavailabilityProcedure:
			reservationServiceCreateServiceUnavailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceListServiceUnavailabilityProcedure:
			reservationServiceListServiceUnavailabilityHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteServiceUnavailabilityProcedure:
			reservationServiceDeleteServiceUnavailabilityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReservationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReservationServiceHandler struct{}

func (UnimplementedReservationServiceHandler) CreateFacility(context.Context, *connect.Request[reservations.CreateFacilityRequest]) (*connect.Response[reservations.CreateFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateFacility is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateFacility(context.Context, *connect.Request[reservations.UpdateFacilityRequest]) (*connect.Response[reservations.UpdateFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateFacility is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListFacilities(context.Context, *connect.Request[reservations.ListFacilitiesRequest]) (*connect.Response[reservations.ListFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListFacilities is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateService(context.Context, *connect.Request[reservations.CreateServiceRequest]) (*connect.Response[reservations.CreateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateService is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateService(context.Context, *connect.Request[reservations.UpdateServiceRequest]) (*connect.Response[reservations.UpdateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateService is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListServices(context.Context, *connect.Request[reservations.ListServicesRequest]) (*connect.Response[reservations.ListServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListServices is not implemented"))
}

func (UnimplementedReservationServiceHandler) AssignServiceToProvider(context.Context, *connect.Request[reservations.AssignServiceToProviderRequest]) (*connect.Response[reservations.AssignServiceToProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.AssignServiceToProvider is not implemented"))
}

func (UnimplementedReservationServiceHandler) RemoveServiceFromProvider(context.Context, *connect.Request[reservations.RemoveServiceFromProviderRequest]) (*connect.Response[reservations.RemoveServiceFromProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.RemoveServiceFromProvider is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetProviderServicesList(context.Context, *connect.Request[reservations.GetProviderServicesListRequest]) (*connect.Response[reservations.GetProviderServicesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetProviderServicesList is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateProviderService(context.Context, *connect.Request[reservations.UpdateProviderServiceRequest]) (*connect.Response[reservations.UpdateProviderServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateProviderService is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateWeeklySchedule(context.Context, *connect.Request[reservations.CreateWeeklyScheduleRequest]) (*connect.Response[reservations.CreateWeeklyScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateWeeklySchedule is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetWeeklyScheduleList(context.Context, *connect.Request[reservations.GetWeeklyScheduleListRequest]) (*connect.Response[reservations.GetWeeklyScheduleListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetWeeklyScheduleList is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateWeeklySchedule(context.Context, *connect.Request[reservations.UpdateWeeklyScheduleRequest]) (*connect.Response[reservations.UpdateWeeklyScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateWeeklySchedule is not implemented"))
}

func (UnimplementedReservationServiceHandler) GenerateTimeSlots(context.Context, *connect.Request[reservations.GenerateTimeSlotsRequest]) (*connect.Response[reservations.GenerateTimeSlotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GenerateTimeSlots is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetTimeSlotsList(context.Context, *connect.Request[reservations.GetTimeSlotsListRequest]) (*connect.Response[reservations.GetTimeSlotsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetTimeSlotsList is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateTimeSlot(context.Context, *connect.Request[reservations.UpdateTimeSlotRequest]) (*connect.Response[reservations.UpdateTimeSlotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateTimeSlot is not implemented"))
}

func (UnimplementedReservationServiceHandler) RemoveTimeSlots(context.Context, *connect.Request[reservations.RemoveTimeSlotsRequest]) (*connect.Response[reservations.RemoveTimeSlotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.RemoveTimeSlots is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetProviderServicesWithUsers(context.Context, *connect.Request[reservations.GetProviderServicesWithUsersRequest]) (*connect.Response[reservations.GetProviderServicesWithUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetProviderServicesWithUsers is not implemented"))
}

func (UnimplementedReservationServiceHandler) AddFacilityImage(context.Context, *connect.Request[reservations.FacilityImage]) (*connect.Response[reservations.FacilityImage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.AddFacilityImage is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteFacilityImage(context.Context, *connect.Request[reservations.DeleteFacilityImageRequest]) (*connect.Response[reservations.DeleteFacilityImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteFacilityImage is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetFacilityImages(context.Context, *connect.Request[reservations.GetFacilityImagesRequest]) (*connect.Response[reservations.GetFacilityImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetFacilityImages is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateReservation(context.Context, *connect.Request[reservations.CreateReservationRequest]) (*connect.Response[reservations.CreateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) CancelReservation(context.Context, *connect.Request[reservations.CancelReservationRequest]) (*connect.Response[reservations.CancelReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CancelReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservationStatus(context.Context, *connect.Request[reservations.UpdateReservationStatusRequest]) (*connect.Response[reservations.UpdateReservationStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.UpdateReservationStatus is not implemented"))
}

func (UnimplementedReservationServiceHandler) MarkAttendance(context.Context, *connect.Request[reservations.MarkAttendanceRequest]) (*connect.Response[reservations.MarkAttendanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.MarkAttendance is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListReservations(context.Context, *connect.Request[reservations.ListReservationsRequest]) (*connect.Response[reservations.ListReservationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListReservations is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListAvailableTimeSlots(context.Context, *connect.Request[reservations.ListAvailableTimeSlotsRequest]) (*connect.Response[reservations.ListAvailableTimeSlotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListAvailableTimeSlots is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateProviderUnavailability(context.Context, *connect.Request[reservations.CreateProviderUnavailabilityRequest]) (*connect.Response[reservations.CreateProviderUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateProviderUnavailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListProviderUnavailability(context.Context, *connect.Request[reservations.ListProviderUnavailabilityRequest]) (*connect.Response[reservations.ListProviderUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListProviderUnavailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteProviderUnavailability(context.Context, *connect.Request[reservations.DeleteProviderUnavailabilityRequest]) (*connect.Response[reservations.DeleteProviderUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteProviderUnavailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateRoomType(context.Context, *connect.Request[reservations.CreateRoomTypeRequest]) (*connect.Response[reservations.CreateRoomTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateRoomType is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListRoomTypes(context.Context, *connect.Request[reservations.ListRoomTypesRequest]) (*connect.Response[reservations.ListRoomTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListRoomTypes is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteRoomType(context.Context, *connect.Request[reservations.DeleteRoomTypeRequest]) (*connect.Response[reservations.DeleteRoomTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteRoomType is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateRoom(context.Context, *connect.Request[reservations.CreateRoomRequest]) (*connect.Response[reservations.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateRoom is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListRooms(context.Context, *connect.Request[reservations.ListRoomsRequest]) (*connect.Response[reservations.ListRoomsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListRooms is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteRoom(context.Context, *connect.Request[reservations.DeleteRoomRequest]) (*connect.Response[reservations.DeleteRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteRoom is not implemented"))
}

func (UnimplementedReservationServiceHandler) AddRoomImage(context.Context, *connect.Request[reservations.AddRoomImageRequest]) (*connect.Response[reservations.AddRoomImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.AddRoomImage is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetRoomImages(context.Context, *connect.Request[reservations.GetRoomImagesRequest]) (*connect.Response[reservations.GetRoomImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.GetRoomImages is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteRoomImage(context.Context, *connect.Request[reservations.DeleteRoomImageRequest]) (*connect.Response[reservations.DeleteRoomImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteRoomImage is not implemented"))
}

func (UnimplementedReservationServiceHandler) CheckRoomAvailability(context.Context, *connect.Request[reservations.CheckRoomAvailabilityRequest]) (*connect.Response[reservations.CheckRoomAvailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CheckRoomAvailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListRoomAvailability(context.Context, *connect.Request[reservations.ListRoomAvailabilityRequest]) (*connect.Response[reservations.ListRoomAvailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListRoomAvailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateServiceUnavailability(context.Context, *connect.Request[reservations.CreateServiceUnavailabilityRequest]) (*connect.Response[reservations.CreateServiceUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.CreateServiceUnavailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) ListServiceUnavailability(context.Context, *connect.Request[reservations.ListServiceUnavailabilityRequest]) (*connect.Response[reservations.ListServiceUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.ListServiceUnavailability is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteServiceUnavailability(context.Context, *connect.Request[reservations.DeleteServiceUnavailabilityRequest]) (*connect.Response[reservations.DeleteServiceUnavailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("reservation.ReservationService.DeleteServiceUnavailability is not implemented"))
}
