// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/users.proto

package usersconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	users "github.com/az58740/connect-microservices-proto/golang/users"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "users.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceRegisterUserProcedure is the fully-qualified name of the UsersService's RegisterUser
	// RPC.
	UsersServiceRegisterUserProcedure = "/users.UsersService/RegisterUser"
	// UsersServiceLoginUserProcedure is the fully-qualified name of the UsersService's LoginUser RPC.
	UsersServiceLoginUserProcedure = "/users.UsersService/LoginUser"
	// UsersServiceListUsersProcedure is the fully-qualified name of the UsersService's ListUsers RPC.
	UsersServiceListUsersProcedure = "/users.UsersService/ListUsers"
	// UsersServiceUpdateUserProcedure is the fully-qualified name of the UsersService's UpdateUser RPC.
	UsersServiceUpdateUserProcedure = "/users.UsersService/UpdateUser"
	// UsersServiceCreateOrganizationGroupProcedure is the fully-qualified name of the UsersService's
	// CreateOrganizationGroup RPC.
	UsersServiceCreateOrganizationGroupProcedure = "/users.UsersService/CreateOrganizationGroup"
	// UsersServiceUpdateOrganizationGroupProcedure is the fully-qualified name of the UsersService's
	// UpdateOrganizationGroup RPC.
	UsersServiceUpdateOrganizationGroupProcedure = "/users.UsersService/UpdateOrganizationGroup"
	// UsersServiceDeleteOrganizationGroupProcedure is the fully-qualified name of the UsersService's
	// DeleteOrganizationGroup RPC.
	UsersServiceDeleteOrganizationGroupProcedure = "/users.UsersService/DeleteOrganizationGroup"
	// UsersServiceListOrganizationGroupProcedure is the fully-qualified name of the UsersService's
	// ListOrganizationGroup RPC.
	UsersServiceListOrganizationGroupProcedure = "/users.UsersService/ListOrganizationGroup"
	// UsersServiceCreateOrganizationProcedure is the fully-qualified name of the UsersService's
	// CreateOrganization RPC.
	UsersServiceCreateOrganizationProcedure = "/users.UsersService/CreateOrganization"
	// UsersServiceUpdateOrganizationProcedure is the fully-qualified name of the UsersService's
	// UpdateOrganization RPC.
	UsersServiceUpdateOrganizationProcedure = "/users.UsersService/UpdateOrganization"
	// UsersServiceDeleteOrganizationProcedure is the fully-qualified name of the UsersService's
	// DeleteOrganization RPC.
	UsersServiceDeleteOrganizationProcedure = "/users.UsersService/DeleteOrganization"
	// UsersServiceListOrganizationProcedure is the fully-qualified name of the UsersService's
	// ListOrganization RPC.
	UsersServiceListOrganizationProcedure = "/users.UsersService/ListOrganization"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	usersServiceServiceDescriptor                       = users.File_users_users_proto.Services().ByName("UsersService")
	usersServiceRegisterUserMethodDescriptor            = usersServiceServiceDescriptor.Methods().ByName("RegisterUser")
	usersServiceLoginUserMethodDescriptor               = usersServiceServiceDescriptor.Methods().ByName("LoginUser")
	usersServiceListUsersMethodDescriptor               = usersServiceServiceDescriptor.Methods().ByName("ListUsers")
	usersServiceUpdateUserMethodDescriptor              = usersServiceServiceDescriptor.Methods().ByName("UpdateUser")
	usersServiceCreateOrganizationGroupMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("CreateOrganizationGroup")
	usersServiceUpdateOrganizationGroupMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("UpdateOrganizationGroup")
	usersServiceDeleteOrganizationGroupMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("DeleteOrganizationGroup")
	usersServiceListOrganizationGroupMethodDescriptor   = usersServiceServiceDescriptor.Methods().ByName("ListOrganizationGroup")
	usersServiceCreateOrganizationMethodDescriptor      = usersServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	usersServiceUpdateOrganizationMethodDescriptor      = usersServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	usersServiceDeleteOrganizationMethodDescriptor      = usersServiceServiceDescriptor.Methods().ByName("DeleteOrganization")
	usersServiceListOrganizationMethodDescriptor        = usersServiceServiceDescriptor.Methods().ByName("ListOrganization")
)

// UsersServiceClient is a client for the users.UsersService service.
type UsersServiceClient interface {
	// User-related methods
	RegisterUser(context.Context, *connect.Request[users.RegisterRequest]) (*connect.Response[users.RegisterResponse], error)
	LoginUser(context.Context, *connect.Request[users.LoginRequest]) (*connect.Response[users.LoginResponse], error)
	ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error)
	// Organization Group related methods
	CreateOrganizationGroup(context.Context, *connect.Request[users.CreateOrganizationGroupRequest]) (*connect.Response[users.CreateOrganizationGroupResponse], error)
	UpdateOrganizationGroup(context.Context, *connect.Request[users.UpdateOrganizationGroupRequest]) (*connect.Response[users.UpdateOrganizationGroupResponse], error)
	DeleteOrganizationGroup(context.Context, *connect.Request[users.DeleteOrganizationGroupRequest]) (*connect.Response[users.DeleteOrganizationGroupResponse], error)
	ListOrganizationGroup(context.Context, *connect.Request[users.ListOrganizationGroupRequest]) (*connect.Response[users.ListOrganizationGroupResponse], error)
	// Organization  related methods
	CreateOrganization(context.Context, *connect.Request[users.CreateOrganizationRequest]) (*connect.Response[users.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[users.UpdateOrganizationRequest]) (*connect.Response[users.UpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[users.DeleteOrganizationRequest]) (*connect.Response[users.DeleteOrganizationResponse], error)
	ListOrganization(context.Context, *connect.Request[users.ListOrganizationRequest]) (*connect.Response[users.ListOrganizationResponse], error)
}

// NewUsersServiceClient constructs a client for the users.UsersService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		registerUser: connect.NewClient[users.RegisterRequest, users.RegisterResponse](
			httpClient,
			baseURL+UsersServiceRegisterUserProcedure,
			connect.WithSchema(usersServiceRegisterUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		loginUser: connect.NewClient[users.LoginRequest, users.LoginResponse](
			httpClient,
			baseURL+UsersServiceLoginUserProcedure,
			connect.WithSchema(usersServiceLoginUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[users.ListUsersRequest, users.ListUsersResponse](
			httpClient,
			baseURL+UsersServiceListUsersProcedure,
			connect.WithSchema(usersServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[users.UpdateUserRequest, users.UpdateUserResponse](
			httpClient,
			baseURL+UsersServiceUpdateUserProcedure,
			connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganizationGroup: connect.NewClient[users.CreateOrganizationGroupRequest, users.CreateOrganizationGroupResponse](
			httpClient,
			baseURL+UsersServiceCreateOrganizationGroupProcedure,
			connect.WithSchema(usersServiceCreateOrganizationGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationGroup: connect.NewClient[users.UpdateOrganizationGroupRequest, users.UpdateOrganizationGroupResponse](
			httpClient,
			baseURL+UsersServiceUpdateOrganizationGroupProcedure,
			connect.WithSchema(usersServiceUpdateOrganizationGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationGroup: connect.NewClient[users.DeleteOrganizationGroupRequest, users.DeleteOrganizationGroupResponse](
			httpClient,
			baseURL+UsersServiceDeleteOrganizationGroupProcedure,
			connect.WithSchema(usersServiceDeleteOrganizationGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizationGroup: connect.NewClient[users.ListOrganizationGroupRequest, users.ListOrganizationGroupResponse](
			httpClient,
			baseURL+UsersServiceListOrganizationGroupProcedure,
			connect.WithSchema(usersServiceListOrganizationGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[users.CreateOrganizationRequest, users.CreateOrganizationResponse](
			httpClient,
			baseURL+UsersServiceCreateOrganizationProcedure,
			connect.WithSchema(usersServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[users.UpdateOrganizationRequest, users.UpdateOrganizationResponse](
			httpClient,
			baseURL+UsersServiceUpdateOrganizationProcedure,
			connect.WithSchema(usersServiceUpdateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[users.DeleteOrganizationRequest, users.DeleteOrganizationResponse](
			httpClient,
			baseURL+UsersServiceDeleteOrganizationProcedure,
			connect.WithSchema(usersServiceDeleteOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganization: connect.NewClient[users.ListOrganizationRequest, users.ListOrganizationResponse](
			httpClient,
			baseURL+UsersServiceListOrganizationProcedure,
			connect.WithSchema(usersServiceListOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	registerUser            *connect.Client[users.RegisterRequest, users.RegisterResponse]
	loginUser               *connect.Client[users.LoginRequest, users.LoginResponse]
	listUsers               *connect.Client[users.ListUsersRequest, users.ListUsersResponse]
	updateUser              *connect.Client[users.UpdateUserRequest, users.UpdateUserResponse]
	createOrganizationGroup *connect.Client[users.CreateOrganizationGroupRequest, users.CreateOrganizationGroupResponse]
	updateOrganizationGroup *connect.Client[users.UpdateOrganizationGroupRequest, users.UpdateOrganizationGroupResponse]
	deleteOrganizationGroup *connect.Client[users.DeleteOrganizationGroupRequest, users.DeleteOrganizationGroupResponse]
	listOrganizationGroup   *connect.Client[users.ListOrganizationGroupRequest, users.ListOrganizationGroupResponse]
	createOrganization      *connect.Client[users.CreateOrganizationRequest, users.CreateOrganizationResponse]
	updateOrganization      *connect.Client[users.UpdateOrganizationRequest, users.UpdateOrganizationResponse]
	deleteOrganization      *connect.Client[users.DeleteOrganizationRequest, users.DeleteOrganizationResponse]
	listOrganization        *connect.Client[users.ListOrganizationRequest, users.ListOrganizationResponse]
}

// RegisterUser calls users.UsersService.RegisterUser.
func (c *usersServiceClient) RegisterUser(ctx context.Context, req *connect.Request[users.RegisterRequest]) (*connect.Response[users.RegisterResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// LoginUser calls users.UsersService.LoginUser.
func (c *usersServiceClient) LoginUser(ctx context.Context, req *connect.Request[users.LoginRequest]) (*connect.Response[users.LoginResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// ListUsers calls users.UsersService.ListUsers.
func (c *usersServiceClient) ListUsers(ctx context.Context, req *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UpdateUser calls users.UsersService.UpdateUser.
func (c *usersServiceClient) UpdateUser(ctx context.Context, req *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// CreateOrganizationGroup calls users.UsersService.CreateOrganizationGroup.
func (c *usersServiceClient) CreateOrganizationGroup(ctx context.Context, req *connect.Request[users.CreateOrganizationGroupRequest]) (*connect.Response[users.CreateOrganizationGroupResponse], error) {
	return c.createOrganizationGroup.CallUnary(ctx, req)
}

// UpdateOrganizationGroup calls users.UsersService.UpdateOrganizationGroup.
func (c *usersServiceClient) UpdateOrganizationGroup(ctx context.Context, req *connect.Request[users.UpdateOrganizationGroupRequest]) (*connect.Response[users.UpdateOrganizationGroupResponse], error) {
	return c.updateOrganizationGroup.CallUnary(ctx, req)
}

// DeleteOrganizationGroup calls users.UsersService.DeleteOrganizationGroup.
func (c *usersServiceClient) DeleteOrganizationGroup(ctx context.Context, req *connect.Request[users.DeleteOrganizationGroupRequest]) (*connect.Response[users.DeleteOrganizationGroupResponse], error) {
	return c.deleteOrganizationGroup.CallUnary(ctx, req)
}

// ListOrganizationGroup calls users.UsersService.ListOrganizationGroup.
func (c *usersServiceClient) ListOrganizationGroup(ctx context.Context, req *connect.Request[users.ListOrganizationGroupRequest]) (*connect.Response[users.ListOrganizationGroupResponse], error) {
	return c.listOrganizationGroup.CallUnary(ctx, req)
}

// CreateOrganization calls users.UsersService.CreateOrganization.
func (c *usersServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[users.CreateOrganizationRequest]) (*connect.Response[users.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls users.UsersService.UpdateOrganization.
func (c *usersServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[users.UpdateOrganizationRequest]) (*connect.Response[users.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls users.UsersService.DeleteOrganization.
func (c *usersServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[users.DeleteOrganizationRequest]) (*connect.Response[users.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// ListOrganization calls users.UsersService.ListOrganization.
func (c *usersServiceClient) ListOrganization(ctx context.Context, req *connect.Request[users.ListOrganizationRequest]) (*connect.Response[users.ListOrganizationResponse], error) {
	return c.listOrganization.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the users.UsersService service.
type UsersServiceHandler interface {
	// User-related methods
	RegisterUser(context.Context, *connect.Request[users.RegisterRequest]) (*connect.Response[users.RegisterResponse], error)
	LoginUser(context.Context, *connect.Request[users.LoginRequest]) (*connect.Response[users.LoginResponse], error)
	ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error)
	// Organization Group related methods
	CreateOrganizationGroup(context.Context, *connect.Request[users.CreateOrganizationGroupRequest]) (*connect.Response[users.CreateOrganizationGroupResponse], error)
	UpdateOrganizationGroup(context.Context, *connect.Request[users.UpdateOrganizationGroupRequest]) (*connect.Response[users.UpdateOrganizationGroupResponse], error)
	DeleteOrganizationGroup(context.Context, *connect.Request[users.DeleteOrganizationGroupRequest]) (*connect.Response[users.DeleteOrganizationGroupResponse], error)
	ListOrganizationGroup(context.Context, *connect.Request[users.ListOrganizationGroupRequest]) (*connect.Response[users.ListOrganizationGroupResponse], error)
	// Organization  related methods
	CreateOrganization(context.Context, *connect.Request[users.CreateOrganizationRequest]) (*connect.Response[users.CreateOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[users.UpdateOrganizationRequest]) (*connect.Response[users.UpdateOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect.Request[users.DeleteOrganizationRequest]) (*connect.Response[users.DeleteOrganizationResponse], error)
	ListOrganization(context.Context, *connect.Request[users.ListOrganizationRequest]) (*connect.Response[users.ListOrganizationResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceRegisterUserHandler := connect.NewUnaryHandler(
		UsersServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(usersServiceRegisterUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceLoginUserHandler := connect.NewUnaryHandler(
		UsersServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(usersServiceLoginUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceListUsersHandler := connect.NewUnaryHandler(
		UsersServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(usersServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateUserHandler := connect.NewUnaryHandler(
		UsersServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(usersServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateOrganizationGroupHandler := connect.NewUnaryHandler(
		UsersServiceCreateOrganizationGroupProcedure,
		svc.CreateOrganizationGroup,
		connect.WithSchema(usersServiceCreateOrganizationGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateOrganizationGroupHandler := connect.NewUnaryHandler(
		UsersServiceUpdateOrganizationGroupProcedure,
		svc.UpdateOrganizationGroup,
		connect.WithSchema(usersServiceUpdateOrganizationGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteOrganizationGroupHandler := connect.NewUnaryHandler(
		UsersServiceDeleteOrganizationGroupProcedure,
		svc.DeleteOrganizationGroup,
		connect.WithSchema(usersServiceDeleteOrganizationGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceListOrganizationGroupHandler := connect.NewUnaryHandler(
		UsersServiceListOrganizationGroupProcedure,
		svc.ListOrganizationGroup,
		connect.WithSchema(usersServiceListOrganizationGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		UsersServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(usersServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		UsersServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(usersServiceUpdateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		UsersServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(usersServiceDeleteOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceListOrganizationHandler := connect.NewUnaryHandler(
		UsersServiceListOrganizationProcedure,
		svc.ListOrganization,
		connect.WithSchema(usersServiceListOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceRegisterUserProcedure:
			usersServiceRegisterUserHandler.ServeHTTP(w, r)
		case UsersServiceLoginUserProcedure:
			usersServiceLoginUserHandler.ServeHTTP(w, r)
		case UsersServiceListUsersProcedure:
			usersServiceListUsersHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserProcedure:
			usersServiceUpdateUserHandler.ServeHTTP(w, r)
		case UsersServiceCreateOrganizationGroupProcedure:
			usersServiceCreateOrganizationGroupHandler.ServeHTTP(w, r)
		case UsersServiceUpdateOrganizationGroupProcedure:
			usersServiceUpdateOrganizationGroupHandler.ServeHTTP(w, r)
		case UsersServiceDeleteOrganizationGroupProcedure:
			usersServiceDeleteOrganizationGroupHandler.ServeHTTP(w, r)
		case UsersServiceListOrganizationGroupProcedure:
			usersServiceListOrganizationGroupHandler.ServeHTTP(w, r)
		case UsersServiceCreateOrganizationProcedure:
			usersServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case UsersServiceUpdateOrganizationProcedure:
			usersServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case UsersServiceDeleteOrganizationProcedure:
			usersServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case UsersServiceListOrganizationProcedure:
			usersServiceListOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) RegisterUser(context.Context, *connect.Request[users.RegisterRequest]) (*connect.Response[users.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.RegisterUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) LoginUser(context.Context, *connect.Request[users.LoginRequest]) (*connect.Response[users.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.LoginUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListUsers(context.Context, *connect.Request[users.ListUsersRequest]) (*connect.Response[users.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.ListUsers is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.UpdateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateOrganizationGroup(context.Context, *connect.Request[users.CreateOrganizationGroupRequest]) (*connect.Response[users.CreateOrganizationGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.CreateOrganizationGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateOrganizationGroup(context.Context, *connect.Request[users.UpdateOrganizationGroupRequest]) (*connect.Response[users.UpdateOrganizationGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.UpdateOrganizationGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteOrganizationGroup(context.Context, *connect.Request[users.DeleteOrganizationGroupRequest]) (*connect.Response[users.DeleteOrganizationGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.DeleteOrganizationGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListOrganizationGroup(context.Context, *connect.Request[users.ListOrganizationGroupRequest]) (*connect.Response[users.ListOrganizationGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.ListOrganizationGroup is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateOrganization(context.Context, *connect.Request[users.CreateOrganizationRequest]) (*connect.Response[users.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.CreateOrganization is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateOrganization(context.Context, *connect.Request[users.UpdateOrganizationRequest]) (*connect.Response[users.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.UpdateOrganization is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteOrganization(context.Context, *connect.Request[users.DeleteOrganizationRequest]) (*connect.Response[users.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.DeleteOrganization is not implemented"))
}

func (UnimplementedUsersServiceHandler) ListOrganization(context.Context, *connect.Request[users.ListOrganizationRequest]) (*connect.Response[users.ListOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.UsersService.ListOrganization is not implemented"))
}
