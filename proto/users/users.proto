syntax = "proto3";

option go_package = "github.com/az58740/connect-microservices-proto/golang/users;users"; // Go package path for generated code

package users;


// Enum for user status, which can be one of several states for the user account.
enum UserStatus {
    USER_STATUS_UNSPECIFIED = 0; // Default value, used when no status is provided.
    USER_STATUS_ACTIVE = 1;      // User is active and can log in.
    USER_STATUS_INACTIVE = 2;    // User has been deactivated and cannot log in.
    USER_STATUS_SUSPENDED = 3;   // User is temporarily suspended.
    USER_STATUS_DELETED = 4;     // User account has been deleted.
}

// Message for defining a permission related to user roles.
message Permission {
    string permission_id = 1;    // Unique identifier for the permission.
    string action = 3;           // The action that this permission grants (e.g., "create", "read", "update", "delete").
}

// Message for representing a resource (e.g., "user", "order", "payment") that roles can be associated with.
message Resource {
   string resource_id = 1;   // Unique identifier for the resource.
   string resource_name = 2;  // Name of the resource.
}

// Message for defining a user role.
message Role {
    string role_id = 1;          // Unique identifier for the user role.
    string role_name = 2;        // Name of the role (e.g., "Admin", "User").
    Resource resource = 3;       // The resource that the role applies to (e.g., "user", "order").
    string description = 4;      // Description of the role and its responsibilities.
    repeated Permission permissions = 5;  // List of permissions associated with this role.
}

// Represents a group of organizations (could be departments or teams).
message OrganizationGroup {
    string id = 1;              // Unique identifier for the group.
    string name = 2;            // Name of the organization group.
    string description = 3;     // Description of the organization group.
}

// Represents a contracting party or organization.
message ContractingParty {
    string organization_id = 1;   // Unique identifier for the organization.
    string organization_name = 2; // Name of the organization.
    OrganizationGroup group = 3;  // Group to which the organization belongs.
}

// Represents a user's profile, which contains personal and contact information.
message UserProfile {
    string full_name = 1;        // Full name of the user (first and last name).
    string email = 2;            // Email address of the user.
    string phone_number = 3;     // Phone number of the user.
    string country = 4;          // Country where the user resides.
    string province = 5;         // Province or state of the user.
    string city = 6;             // City where the user resides.
    string address_line_1 = 7;   // First line of the user's address.
    string address_line_2 = 8;   // Second line of the user's address (optional).
    string zip_code = 9;         // Zip or postal code of the user's address.
}

// Represents a user in the system, including their roles, status, and profile.
message User {
    string user_id = 1;                  // Unique identifier for the user.
    UserProfile profile = 2;             // The user's profile details.
    repeated Role roles = 3;             // List of roles assigned to the user.
    UserStatus status = 4;               // Current status of the user (active, inactive, etc.).
    ContractingParty organization = 5;   // Organization or contracting party the user belongs to.
    string username = 6;                 // Username (could be the email address).
    string password_hash = 7;            // The hashed password (for security).
}

// Pagination options for listing users or roles.
message Pagination {
    int32 page = 1;                     // Page number (starting from 1).
    int32 page_size = 2;                // Number of items to return per page.
    string sort_by = 3;                 // Field by which to sort the results (e.g., "username").
    bool sort_descending = 4;           // Whether to sort the results in descending order.
}

// Filter criteria for listing users based on different parameters.
message UserFilter {
    string user_id = 1;                   // Filter by user ID.
    string username = 2;                  // Filter by username (e.g., login name).
    string password = 3;                  // Filter by password (not recommended for real-world use).
    string email = 4;                     // Filter by email address.
    string role_ids = 5;                  // Filter by assigned role IDs.
    string organization_id=6;             // Filter by organization ID.
    string user_statuse=7;                // Filter by user statuse.
}

// Filter criteria for listing roles by associated resource.
message RoleFilter {
    Resource resource = 1;                // Filter by resource associated with the role (e.g., "user", "order").
}

// Message for registering a new user (sign up).
message RegisterRequest {
    string name = 1;      // Full name of the user.
    string email = 2;     // Email address of the user.
    string phonenumber = 3; // User's phone number.
    string username = 4;  // Chosen username for the user.
    string password = 5;  // Plaintext password (which will be hashed before storing).
}

// Response after creating a new user.
message RegisterResponse {
    string user_id = 1;  // ID of the newly created user.
    string message = 2;  // Confirmation message.
}

// Request to authenticate a user during login.
message LoginRequest {
    string username = 1; // Username (email or username) to login.
    string password = 2; // Password to authenticate the user.
}

// Response after successful login with authentication token.
message LoginResponse {
    string token = 1;    // Authentication token that can be used for subsequent requests.
    bool success = 2;    // Whether the login was successful or not.
}

// Request to log out a user.
message LogoutRequest {
    string user_id = 1;  // ID of the user who is logging out.
}

// Response after logging out.
message LogoutResponse {
    bool success = 1;    // Whether the logout operation was successful.
}

// Request to retrieve user details by user ID.
message GetUserRequest {
    string user_id = 1;  // ID of the user to retrieve.
}

// Response containing the details of a user.
message GetUserResponse {
    User user = 1; // The user information retrieved from the system.
}

// Request to update a user's details.
message UpdateUserRequest {
    string user_id = 1;  // ID of the user to update.
    User user = 2;       // Updated user information.
}

// Response after updating a user's details.
message UpdateUserResponse {
    string message = 1;  // Confirmation message.
}

// Request to list users with pagination and filtering.
message ListUsersRequest {
    Pagination pagination = 1;          // Pagination options.
    UserFilter filter = 2;              // Filter criteria to apply.
}

// Response for listing users.
message ListUsersResponse {
    repeated User users = 1;     // List of users retrieved.
    string next_page_token = 2;  // Token for the next page of results (optional).
    int32 next_page = 3;       // Total number of users in the system.
}

// Service for managing users (authentication, user details, and user roles).
service UsersService {
    // Auth-related methods
    rpc RegisterUser (RegisterRequest) returns (RegisterResponse);  // Register a new user.
    rpc LoginUser (LoginRequest) returns (LoginResponse);          // Log a user in.
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse);  // List users with pagination and filtering.
}
