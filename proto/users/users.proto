syntax = "proto3";

import "google/protobuf/timestamp.proto";


option go_package = "github.com/az58740/connect-microservices-proto/golang/users;users"; // Go package path for generated code
package users;

// ==================== ENUMS ====================
// Enum for user status.
enum UserStatus {
    USER_STATUS_UNSPECIFIED = 0; // Default value.
    USER_STATUS_ACTIVE = 1;      // Active user.
    USER_STATUS_INACTIVE = 2;    // Inactive user.
    USER_STATUS_SUSPENDED = 3;   // Suspended user.
    USER_STATUS_DELETED = 4;     // Deleted user.
}

// Enum for user types.
enum UserType {
    USER_TYPE_DEFAULT = 0;             // Default normal user.
    USER_TYPE_ADMIN = 1;               // System administrator.
    USER_TYPE_CONTRACT_PARTY = 2;      // General contracting party.
    USER_TYPE_CONTRACT_EMPLOYEE = 3;   // Employee of the contracting party.
    USER_TYPE_CONTRACT_EMPLOYER = 4;   // Employer of the contracting party.
    USER_TYPE_CONTRACT_APPLICANT = 5;  // Applicant for a contract.
}

// Enum for user gender.
enum UserGender {
    USER_Gender_Male = 0;   // Male.
    USER_Gender_Female = 1; // Female.
    USER_Gender_Other = 2;  // Other.
}

// Enum for organization types.
enum OrganizationType {
    ORG_Type_DEFAULT = 0;       // Default value.
    SPORTS_GROUP = 1;           // Sports Group.
    RECREATIONAL_CENTERS = 2;   // Recreational Centers.
    SALES_CENTERS = 3;          // Sales Centers.
    MEDICAL_SERVICES = 4;       // Medical Services.
}

// Enum for contract statuses.
enum ContractStatus {
    CONTRACT_STATUS_UNSPECIFIED = 0; // Default unspecified status.
    CONTRACT_STATUS_PENDING = 1;     // Awaiting review.
    CONTRACT_STATUS_SENDDOCUMENT = 2;     // Sending  Document.
    CONTRACT_STATUS_APPROVED = 3;    // Approved by employer.
    CONTRACT_STATUS_REJECTED = 4;    // Rejected.
    CONTRACT_STATUS_SIGNED = 5;      // Signed by both parties.
    CONTRACT_STATUS_ACTIVE = 6;      // Active and in effect.
    CONTRACT_STATUS_COMPLETED = 7;   // Completed.
    CONTRACT_STATUS_TERMINATED = 8;  // Terminated before completion.
}

// Enum for job post statuses.
enum JobPostStatus {
    JOB_POST_STATUS_UNSPECIFIED = 0;
    JOB_POST_STATUS_OPEN = 1;
    JOB_POST_STATUS_CLOSED = 2;
    JOB_POST_STATUS_CANCELLED = 3;
}

// ==================== USER-RELATED MESSAGES ====================
// Message for defining a permission related to user roles.
message Permission {
    string permissionId = 1; // Unique identifier for the permission.
    string action = 2;       // Action granted by this permission (e.g., "create", "read", "update", "delete").
}

// Message for representing a resource that roles can be associated with.
message Resource {
    string resourceId = 1;   // Unique identifier for the resource.
    string resourceName = 2; // Name of the resource.
}

// Message for defining a user role.
message Role {
    string roleId = 1;                  // Unique identifier for the user role.
    string roleName = 2;                // Name of the role (e.g., "Admin", "User").
    Resource resource = 3;              // The resource that the role applies to (e.g., "user", "order").
    string description = 4;             // Description of the role and its responsibilities.
    repeated Permission permissions = 5; // List of permissions associated with this role.
}

// Represents a user's profile, which contains personal and contact information.
message UserProfile {
    string fullName = 1;                  // Full name of the user (first and last name).
    string email = 2;                     // Email address of the user.
    string phoneNumber = 3;               // Mobile number of the user.
    string country = 4;                   // Country where the user resides.
    string province = 5;                  // Province or state of the user.
    string city = 6;                      // City where the user resides.
    string addressLine1 = 7;              // First line of the user's address.
    string addressLine2 = 8;              // Second line of the user's address (optional).
    string zipCode = 9;                   // Zip or postal code of the user's address.
    string img = 10;                      // User image address.
    UserGender gender = 11;               // User Gender.
    string phonenumberReservation = 12;   // Phone number for reservation.
}

// Represents a user in the system, including their roles, status, and profile.
message User {
    string userId = 1;                  // Unique identifier for the user.
    UserProfile profile = 2;            // The user's profile details.
    repeated Role roles = 3;            // List of roles assigned to the user.
    UserStatus status = 4;              // Current status of the user (active, inactive, etc.).
    ContractingParty organization = 5;  // Organization or contracting party the user belongs to.
    string username = 6;                // Username (could be the email address).
    string passwordHash = 7;            // The hashed password (for security).
    UserType type = 8;                  // User Type.
    repeated Contract userContracts = 9; // The user's contracts.
    User employer = 10;                   // The employer to which the user belongs.
    bool  isSearchable=11;               //The ability to search
    google.protobuf.Timestamp createdAt = 12; // Date and time when the user was created.
    google.protobuf.Timestamp deletedAt = 13; // Date and time when the user was deleted.
}

// Filter criteria for listing users based on different parameters.
message UserFilter {
    string userId = 1;                  // Filter by user ID.
    string username = 2;                // Filter by username (e.g., login name).
    string email = 3;                   // Filter by email address.
    string roleId = 4;                  // Filter by assigned role IDs.
    string organizationId = 5;          // Filter by organization ID.
    string userStatuse = 6;             // Filter by user statuse.
    string country = 7;                 // Filter by geolocation country.
    string province = 8;                // Filter by geolocation province.
    string city = 9;                    // Filter by geolocation city.
    string userType = 10;               // Filter by user type.
    string groupId = 11;                // Filter by organization group.
    string employerId = 12;             // Filter by employer the user belongs to.
    string oppositeStatuse = 13;         // Reverting all users except for this one statuse.
    string oppositeType= 14;             // Reverting all users except for this one statuse.
    string oppositeTyp2 = 15;            // Reverting all users except for this one type.
    string phoneNumber=16;                //Filter by phone number
}

// Pagination options for listing users or roles.
message Pagination {
    int32 page = 1;                     // Page number (starting from 1).
    int32 page_size = 2;                // Number of items to return per page.
    optional string sort_by = 3;        // Field by which to sort the results (e.g., "username").
    optional bool sort_descending = 4;  // Whether to sort the results in descending order.
}

message PasswordResetToken {
  uint64 id = 1;
  string short_code = 2;
  string token = 3;
  string phone = 4;
  string email=5;
  google.protobuf.Timestamp expires_at = 6;
  google.protobuf.Timestamp created_at = 7;
}


// Request to register a new user (sign up).
message RegisterRequest {
    string name = 1;      // Full name of the user.
    string email = 2;     // Email address of the user.
    string phonenumber = 3; // User's phone number.
    string username = 4;  // Chosen username for the user.
    string password = 5;  // Plaintext password (which will be hashed before storing).
    UserGender gender = 6; // Gender of the user.
}

// Response after creating a new user.
message RegisterResponse {
    string userId = 1;  // ID of the newly created user.
    string message = 2; // Confirmation message.
}

// Request to authenticate a user during login.
message LoginRequest {
    string username = 1; // Username (email or username) to log in.
    string password = 2; // Password to authenticate the user.
}

// Response after successful login with authentication token.
message LoginResponse {
    string token = 1;    // Authentication token that can be used for subsequent requests.
    bool success = 2;    // Whether the login was successful or not.
}
// Request to authenticate a user during forget password.
message ForgotPasswordRequest {
   optional string email = 1; // email  for reset password.
   optional string phonenumber = 2; //phone number for resetpassword.
 optional string resetpasswordlink=3; // a link for reset password
}

// Response after successful login with authentication token.
message ForgotPasswordResponse {
    string token = 1;    // A JWT token include email  .
    bool success = 2;    // Whether the user exist in DB was successful or not.
}

// Request to log out a user.
message LogoutRequest {
    string userId = 1;  // ID of the user who is logging out.
}

// Response after logging out.
message LogoutResponse {
    bool success = 1;    // Whether the logout operation was successful.
}

// Request to update a user's details.
message UpdateUserRequest {
    User user = 1;       // Updated user information.
}

// Response after updating a user's details.
message UpdateUserResponse {
    string message = 1;  // Confirmation message.
}

// Request to list users with pagination and filtering.
message ListUsersRequest {
    Pagination pagination = 1; // Pagination options.
    UserFilter filter = 2;     // Filter criteria to apply.
}

// Response for listing users.
message ListUsersResponse {
    repeated User users = 1;     // List of users retrieved.
    string next_page_token = 2;  // Token for the next page of results (optional).
    int32 total_pages = 3;       // Total number of users in the system.
}

// ==================== ORGANIZATION-RELATED MESSAGES ====================
// Represents a group of organizations (could be departments or teams).
message OrganizationGroup {
    string id = 1;          // Unique identifier for the group.
    string name = 2;        // Name of the organization group.
    string description = 3; // Description of the organization group.
    UserStatus status = 4;  // Current status of the contract party group (active, inactive, etc.).
}

// Filter criteria for listing Organization Groups.
message OrganizationGroupFilter {
    optional string groupId = 1;         // Filter by group ID.
    optional string groupName = 2;      // Filter by group name.
    optional string group_statuse = 3;  // Filter by status.
}

// Request to create an organization group.
message CreateOrganizationGroupRequest {
    string name = 1;        // Name of the organization group.
    string description = 2; // Description of the organization group.
    UserStatus status = 3;  // Current status of the organization group.
}

// Response after creating an organization group.
message CreateOrganizationGroupResponse {
    string message = 1; // Confirmation message.
}

// Request to update an organization group.
message UpdateOrganizationGroupRequest {
    OrganizationGroup group = 1; // Updated organization group details.
}

// Response after updating an organization group.
message UpdateOrganizationGroupResponse {
    string message = 1; // Confirmation message.
}

// Request to delete an organization group.
message DeleteOrganizationGroupRequest {
    string groupId = 1; // ID of the organization group to delete.
}

// Response after deleting an organization group.
message DeleteOrganizationGroupResponse {
    string message = 1; // Confirmation message.
}

// Request to list organization groups.
message ListOrganizationGroupRequest {
    OrganizationGroupFilter filter = 1; // Filter criteria to apply.
}

// Response for listing organization groups.
message ListOrganizationGroupResponse {
    repeated OrganizationGroup groups = 1; // List of organization groups retrieved.
}

// Represents a contracting party or organization.
message ContractingParty {
    string organizationId = 1;   // Unique identifier for the organization.
    string organizationName = 2; // Name of the organization.
    string description = 3;      // Description of the organization.
    OrganizationGroup group = 4; // Group to which the organization belongs.
    OrganizationType type = 5;   // Type of organization.
    UserStatus status = 6;       // Current status of the contract party (active, inactive, etc.).
}

// Filter criteria for listing Contract Parties.
message OrganizationFilter {
    optional string organizationId = 1;         // Filter by organization ID.
    optional string organizationgroupId = 2;   // Filter by organization group ID.
    optional string organizationStatuse = 3;  // Filter by organization status.
     optional string oppositeStatuse = 4;     // Reverting all organization except for this one statuse.
}

// Request to create an organization.
message CreateOrganizationRequest {
    string organizationName = 1;       // Name of the organization.
    optional string organizationgroupId = 2; // ID of the organization group.
    optional string description = 3;         // Description of the organization.
}

// Response after creating an organization.
message CreateOrganizationResponse {
    string organizationId = 1; // ID of the newly created organization.
    string message = 2;        // Confirmation message.
}

// Request to update an organization.
message UpdateOrganizationRequest {
    ContractingParty organization = 1; // Updated organization details.
}

// Response after updating an organization.
message UpdateOrganizationResponse {
    string message = 1; // Confirmation message.
}

// Request to delete an organization.
message DeleteOrganizationRequest {
    string organizationId = 1; // ID of the organization to delete.
}

// Response after deleting an organization.
message DeleteOrganizationResponse {
    string message = 1; // Confirmation message.
}

// Request to list organizations.
message ListOrganizationRequest {
    OrganizationFilter filter = 1; // Filter criteria to apply.
}

// Response for listing organizations.
message ListOrganizationResponse {
    repeated ContractingParty organizations = 1; // List of organizations retrieved.
}

// ==================== CONTRACT-RELATED MESSAGES ====================
// Represents a contract in the system.
message Contract {
    string contractId = 1;                    // Unique identifier for the contract.
    User employer = 2;                    // Employer's user ID.
    User employee = 3;                    // Employee's (candidate's) user ID.
    string title = 4;                         // Title of the contract.
    string description = 5;                   // Short general description about the contract.
    double amount = 6;                        // Contract amount (optional).
    string currency = 7;                      // Currency of the amount (IRR, USD, etc.).
    ContractStatus status = 8;                // Current status of the contract.
    google.protobuf.Timestamp startDate = 9;  // Start date of the contract.
    google.protobuf.Timestamp endDate = 10;   // End date of the contract.
    string terms = 11;                        // Full legal terms and conditions.
    google.protobuf.Timestamp createdAt = 12; // Creation timestamp.
    google.protobuf.Timestamp updatedAt = 13; // Last updated timestamp.
    string contractRequestFileUrl = 14;       // URL or path to the request file (e.g., PDF, DOCX).
    string signedContractFileUrl = 15;        // URL or path to the signed contract file.
}

// Filter criteria for listing contracts.
message ContractFilter {
    string contractId = 1;                    // Filter by contract ID.
    string employerId = 2;                    // Filter by employer ID.
    string employeeId = 3;                    // Filter by employee ID.
    ContractStatus contractStatuse = 4;               // Filter by contract status.
    google.protobuf.Timestamp startDate = 5;  // Filter by start date of the contract.
    google.protobuf.Timestamp endDate = 6;    // Filter by end date of the contract.
    ContractStatus oppositeStatuse =7 ;               // Reverting all contract except for this one statuse.
}

// Request to create a contract.
message CreateContractRequest {
    string employerId = 1;      // Employer ID.
    string employeeId = 2;      // Employee ID.
    ContractStatus contractStatuse = 3; // Contract status.
    string description = 4;     // Description of the contract.
    string contractRequestFileUrl=5;  // URL or path to the request file (e.g., PDF, DOCX).
    
}

// Response after creating a contract.
message CreateContractResponse {
    string contractId = 1; // ID of the newly created contract.
    string message = 2;    // Confirmation message.
}

// Request to update a contract.
message UpdateContractRequest {
    Contract contract = 1; // Updated contract details.
}

// Response after updating a contract.
message UpdateContractResponse {
    string message = 1; // Confirmation message.
}

// Request to delete a contract.
message DeleteContractRequest {
    string contractId = 1; // ID of the contract to delete.
}

// Response after deleting a contract.
message DeleteContractResponse {
    string message = 1; // Confirmation message.
}

// Request to list contracts.
message ListContractRequest {
    ContractFilter filter = 1; // Filter criteria to apply.
    Pagination pagination = 2; // Pagination options.
}

// Response for listing contracts.
message ListContractResponse {
    repeated Contract contracts = 1; // List of contracts retrieved.
    int32 total_pages = 2;           // Total number of pages in the system.
}

// ==================== GEOLOCATION-RELATED MESSAGES ====================
// Represents a geolocation in the system (country, province, or city).
message Geolocation {
    string en = 1; // Geolocation English name.
    string fa = 2; // Geolocation Farsi name.
}

// Filter criteria for geolocation.
message GeolocationFilter {
    string en = 1; // Filter by English name of the geolocation.
}

// Request to get geolocations.
message GetGeolocationRequest {
    GeolocationFilter filter = 1; // Filter criteria to apply.
}

// Response for geolocation retrieval.
message GetGeolocationResponse {
    repeated Geolocation locations = 1; // List of geolocations retrieved.
}

// ==================== JOB POST-RELATED MESSAGES ====================
// Represents a job post.
message JobPost {
    string jobPostId = 1;                 // Unique ID for the job post.
    string employerId = 2;                // ID of the employer who posted.
    string title = 3;                     // Title of the job post.
    string description = 4;               // Description of the job.
    repeated string requiredSkills = 5;   // List of required skills.
    double salary = 6;                    // Expected salary or offer.
    string currency = 7;                  // Salary currency.
    JobPostStatus status = 8;             // Status of the job post (open, closed, cancelled).
    google.protobuf.Timestamp createdAt = 9;  // When the job post was created.
    google.protobuf.Timestamp updatedAt = 10; // Last update timestamp.
}
//Request to get main token
message GetResetTokenRequest {
  string short_code = 1;
}
//Responce from get reset token 
message GetResetTokenResponse {
  string token = 1;
  string phone = 2;
  string email=3;
  google.protobuf.Timestamp expires_at = 4;
}
// ==================== SERVICE DEFINITIONS ====================
service UsersService {
    // User-related methods
    rpc RegisterUser(RegisterRequest) returns (RegisterResponse);                     // Register a new user.
    rpc LoginUser(LoginRequest) returns (LoginResponse);                              // Log a user in.
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);                      // List users with pagination and filtering.
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);                   // Update user details.
    rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);       // Forgot Password 


    // Organization Group related methods
    rpc CreateOrganizationGroup(CreateOrganizationGroupRequest) returns (CreateOrganizationGroupResponse);
    rpc UpdateOrganizationGroup(UpdateOrganizationGroupRequest) returns (UpdateOrganizationGroupResponse);
    rpc DeleteOrganizationGroup(DeleteOrganizationGroupRequest) returns (DeleteOrganizationGroupResponse);
    rpc ListOrganizationGroup(ListOrganizationGroupRequest) returns (ListOrganizationGroupResponse);

    // Organization related methods
    rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);
    rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
    rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse);
    rpc ListOrganization(ListOrganizationRequest) returns (ListOrganizationResponse);

    // Contract related methods
    rpc CreateContract(CreateContractRequest) returns (CreateContractResponse);
    rpc UpdateContract(UpdateContractRequest) returns (UpdateContractResponse);
    rpc DeleteContract(DeleteContractRequest) returns (DeleteContractResponse);
    rpc ListContract(ListContractRequest) returns (ListContractResponse);

    // Geolocation related methods
    rpc GetCountries(GetGeolocationRequest) returns (GetGeolocationResponse);
    rpc GetProvinces(GetGeolocationRequest) returns (GetGeolocationResponse);
    rpc GetCities(GetGeolocationRequest) returns (GetGeolocationResponse);

    //Generate token related methods
      rpc GetResetTokenByShortCode(GetResetTokenRequest) returns (GetResetTokenResponse);

}