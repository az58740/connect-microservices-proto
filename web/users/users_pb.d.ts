// @generated by protoc-gen-es v2.2.3 with parameter "target=ts+js+dts,import_extension=js,import_extension=ts"
// @generated from file users/users.proto (package users, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file users/users.proto.
 */
export declare const file_users_users: GenFile;

/**
 * Message for system
 *
 * @generated from message users.Service
 */
export declare type Service = Message<"users.Service"> & {
  /**
   * Unique identifier for the system
   *
   * @generated from field: string service_id = 1;
   */
  serviceId: string;

  /**
   * Name of the system
   *
   * @generated from field: string service_name = 2;
   */
  serviceName: string;
};

/**
 * Describes the message users.Service.
 * Use `create(ServiceSchema)` to create a new message.
 */
export declare const ServiceSchema: GenMessage<Service>;

/**
 * Message for role actions
 *
 * @generated from message users.Permissions
 */
export declare type Permissions = Message<"users.Permissions"> & {
  /**
   * Unique identifier for the role actions
   *
   * @generated from field: string permission_id = 1;
   */
  permissionId: string;

  /**
   * Name of the role action
   *
   * @generated from field: string Permission_name = 2;
   */
  PermissionName: string;
};

/**
 * Describes the message users.Permissions.
 * Use `create(PermissionsSchema)` to create a new message.
 */
export declare const PermissionsSchema: GenMessage<Permissions>;

/**
 * Message for user roles
 *
 * @generated from message users.Role
 */
export declare type Role = Message<"users.Role"> & {
  /**
   * Unique identifier for the user role
   *
   * @generated from field: string role_id = 1;
   */
  roleId: string;

  /**
   * Name of the user role
   *
   * @generated from field: string role_name = 2;
   */
  roleName: string;

  /**
   * Role actions
   *
   * @generated from field: repeated users.Permissions permissions = 3;
   */
  permissions: Permissions[];
};

/**
 * Describes the message users.Role.
 * Use `create(RoleSchema)` to create a new message.
 */
export declare const RoleSchema: GenMessage<Role>;

/**
 * Message representing a user profile
 *
 * @generated from message users.UserProfile
 */
export declare type UserProfile = Message<"users.UserProfile"> & {
  /**
   * First name of the user
   *
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * Last name of the user
   *
   * @generated from field: string last_name = 2;
   */
  lastName: string;

  /**
   * Email address of the user
   *
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * Phone number of the user
   *
   * @generated from field: string phone_number = 4;
   */
  phoneNumber: string;

  /**
   * Country of the user
   *
   * @generated from field: string country = 5;
   */
  country: string;

  /**
   * Province/state of the user
   *
   * @generated from field: string province = 6;
   */
  province: string;

  /**
   * City where the user resides
   *
   * @generated from field: string city = 7;
   */
  city: string;

  /**
   * First line of the address
   *
   * @generated from field: string address_line_1 = 8;
   */
  addressLine1: string;

  /**
   * Second line of the address (optional)
   *
   * @generated from field: string address_line_2 = 9;
   */
  addressLine2: string;

  /**
   * Zip/postal code
   *
   * @generated from field: string zip_code = 10;
   */
  zipCode: string;
};

/**
 * Describes the message users.UserProfile.
 * Use `create(UserProfileSchema)` to create a new message.
 */
export declare const UserProfileSchema: GenMessage<UserProfile>;

/**
 * Message representing a user
 *
 * @generated from message users.User
 */
export declare type User = Message<"users.User"> & {
  /**
   * Unique identifier for the user
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * The user's profile information
   *
   * @generated from field: users.UserProfile profile = 2;
   */
  profile?: UserProfile;

  /**
   * Type of user (Admin, Regular, Guest)
   *
   * @generated from field: repeated users.Role user_roles = 3;
   */
  userRoles: Role[];

  /**
   * Which systems user active on
   *
   * @generated from field: repeated users.Service user_services = 4;
   */
  userServices: Service[];

  /**
   * Current status of the user
   *
   * @generated from field: users.UserStatus user_status = 5;
   */
  userStatus: UserStatus;

  /**
   * Username for user can be email
   *
   * @generated from field: string username = 6;
   */
  username: string;

  /**
   * Hash of the user's password
   *
   * @generated from field: string password_hash = 7;
   */
  passwordHash: string;

  /**
   * Timestamp for when user was created
   *
   * @generated from field: string created_at = 8;
   */
  createdAt: string;

  /**
   * Timestamp for when user was last updated
   *
   * @generated from field: string updated_at = 9;
   */
  updatedAt: string;
};

/**
 * Describes the message users.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * Message for creating a new user request
 *
 * @generated from message users.CreateUserRequest
 */
export declare type CreateUserRequest = Message<"users.CreateUserRequest"> & {
  /**
   * User details to create
   *
   * @generated from field: users.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message users.CreateUserRequest.
 * Use `create(CreateUserRequestSchema)` to create a new message.
 */
export declare const CreateUserRequestSchema: GenMessage<CreateUserRequest>;

/**
 * Message for creating a new user response
 *
 * @generated from message users.CreateUserResponse
 */
export declare type CreateUserResponse = Message<"users.CreateUserResponse"> & {
  /**
   * ID of the created user
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * Confirmation message
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message users.CreateUserResponse.
 * Use `create(CreateUserResponseSchema)` to create a new message.
 */
export declare const CreateUserResponseSchema: GenMessage<CreateUserResponse>;

/**
 * Message for updating user details
 *
 * @generated from message users.UpdateUserRequest
 */
export declare type UpdateUserRequest = Message<"users.UpdateUserRequest"> & {
  /**
   * ID of the user to update
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * Updated profile information
   *
   * @generated from field: users.UserProfile profile = 2;
   */
  profile?: UserProfile;

  /**
   * Updated status of the user
   *
   * @generated from field: users.UserStatus user_status = 3;
   */
  userStatus: UserStatus;
};

/**
 * Describes the message users.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export declare const UpdateUserRequestSchema: GenMessage<UpdateUserRequest>;

/**
 * Message for updating user response
 *
 * @generated from message users.UpdateUserResponse
 */
export declare type UpdateUserResponse = Message<"users.UpdateUserResponse"> & {
  /**
   * Confirmation message
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message users.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export declare const UpdateUserResponseSchema: GenMessage<UpdateUserResponse>;

/**
 * Message for retrieving user details by user ID
 *
 * @generated from message users.GetUserRequest
 */
export declare type GetUserRequest = Message<"users.GetUserRequest"> & {
  /**
   * ID of the user to retrieve
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * Username for user can be email
   *
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * user's password
   *
   * @generated from field: string password = 3;
   */
  password: string;
};

/**
 * Describes the message users.GetUserRequest.
 * Use `create(GetUserRequestSchema)` to create a new message.
 */
export declare const GetUserRequestSchema: GenMessage<GetUserRequest>;

/**
 * Message for user detail response
 *
 * @generated from message users.GetUserResponse
 */
export declare type GetUserResponse = Message<"users.GetUserResponse"> & {
  /**
   * User information retrieved
   *
   * @generated from field: users.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message users.GetUserResponse.
 * Use `create(GetUserResponseSchema)` to create a new message.
 */
export declare const GetUserResponseSchema: GenMessage<GetUserResponse>;

/**
 * Message for listing users with pagination
 *
 * @generated from message users.UsersListRequest
 */
export declare type UsersListRequest = Message<"users.UsersListRequest"> & {
  /**
   * Page number for pagination
   *
   * @generated from field: int32 page = 1;
   */
  page: number;

  /**
   * Number of users per page
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;
};

/**
 * Describes the message users.UsersListRequest.
 * Use `create(UsersListRequestSchema)` to create a new message.
 */
export declare const UsersListRequestSchema: GenMessage<UsersListRequest>;

/**
 * Message for list users response
 *
 * @generated from message users.UsersListResponse
 */
export declare type UsersListResponse = Message<"users.UsersListResponse"> & {
  /**
   * List of users
   *
   * @generated from field: repeated users.User users = 1;
   */
  users: User[];

  /**
   * Total number of users in the system
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Describes the message users.UsersListResponse.
 * Use `create(UsersListResponseSchema)` to create a new message.
 */
export declare const UsersListResponseSchema: GenMessage<UsersListResponse>;

/**
 * // Message for deleting a user request
 *
 * @generated from message users.DeleteUserRequest
 */
export declare type DeleteUserRequest = Message<"users.DeleteUserRequest"> & {
  /**
   * ID of the user to delete
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;
};

/**
 * Describes the message users.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export declare const DeleteUserRequestSchema: GenMessage<DeleteUserRequest>;

/**
 * // Message for deleting a user response
 *
 * @generated from message users.DeleteUserResponse
 */
export declare type DeleteUserResponse = Message<"users.DeleteUserResponse"> & {
  /**
   * Confirmation message
   *
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message users.DeleteUserResponse.
 * Use `create(DeleteUserResponseSchema)` to create a new message.
 */
export declare const DeleteUserResponseSchema: GenMessage<DeleteUserResponse>;

/**
 * Enum for user status
 *
 * @generated from enum users.UserStatus
 */
export enum UserStatus {
  /**
   * Default value
   *
   * @generated from enum value: USER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * User is active and can log in
   *
   * @generated from enum value: USER_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * User has been deactivated
   *
   * @generated from enum value: USER_STATUS_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * User is temporarily suspended
   *
   * @generated from enum value: USER_STATUS_SUSPENDED = 3;
   */
  SUSPENDED = 3,

  /**
   * User account has been deleted
   *
   * @generated from enum value: USER_STATUS_DELETED = 4;
   */
  DELETED = 4,
}

/**
 * Describes the enum users.UserStatus.
 */
export declare const UserStatusSchema: GenEnum<UserStatus>;

/**
 * User Managment Service
 *
 * @generated from service users.UsersService
 */
export declare const UsersService: GenService<{
  /**
   * @generated from rpc users.UsersService.GetUser
   */
  getUser: {
    methodKind: "unary";
    input: typeof GetUserRequestSchema;
    output: typeof GetUserResponseSchema;
  },
  /**
   * @generated from rpc users.UsersService.CreateUser
   */
  createUser: {
    methodKind: "client_streaming";
    input: typeof CreateUserRequestSchema;
    output: typeof CreateUserResponseSchema;
  },
  /**
   * @generated from rpc users.UsersService.UpdateUser
   */
  updateUser: {
    methodKind: "client_streaming";
    input: typeof UpdateUserRequestSchema;
    output: typeof UpdateUserResponseSchema;
  },
  /**
   * @generated from rpc users.UsersService.UsersList
   */
  usersList: {
    methodKind: "server_streaming";
    input: typeof UsersListRequestSchema;
    output: typeof UsersListResponseSchema;
  },
}>;

